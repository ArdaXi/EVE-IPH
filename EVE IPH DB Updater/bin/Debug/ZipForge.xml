<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZipForge</name>
    </assembly>
    <members>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverException">
            <summary>
            ArchiverException class allows user to know <see cref="F:ComponentAce.Compression.Archiver.ArchiverException.ErrorCode"/> 
            and to get objects related to exception.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverException.Args">
            <summary>
            Gets/Sets array of objects explaining exception.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverException.ErrorCode">
            <summary>
            Gets/Sets code of the error that caused exception.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverException.#ctor(System.String,ComponentAce.Compression.Archiver.ErrorCode,System.Object[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Archiver.ArchiverException"/> class 
            with an additional error code and an array of objects explaining exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">The code of the error that caused exception.</param>
            <param name="args">The array of objects (arguments) explaining exception, if any.</param>
            <param name="innerException">The exception that is the cause of the current exception, if any.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate">
            <summary>
            The delegate to handle reading or writing failure events.
            </summary>
            <param name="innerException">The exception which is being thrown.</param>
            <param name="cancel">This parameter determines if the current operation should be cancelled. Set it to 
            <c><b>true</b></c>, if you want to cancel the operation. The default value of <b>cancel</b> is <c><b>false</b></c>.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverForgeBase">
            <summary>
            The base class for compression / decompression operations.
            </summary>
            <remarks>
            This class is the base for ZipForge, TarForge, GzipForge and TgzForge classes.
            All public methods and properties are declared here. So if you want to create
            your own implementation of the archiver or compression class you should to
            inherite your class from this one.
            <para>Because of base class doesn`t have any information about real
            implementation of items included in the archive, some methods should be override
            in the inherited class.</para>
            </remarks>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._oemCodePage">
            <summary>
            The code page number used for encoding and decoding operations.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._baseDir">
            <summary>
            Base directory for compression and decompression operations.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._compressedStream">
            <summary>
            The stream containing compressed data.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._currentItemOperationStartTime">
            <summary>
            The time of the beginning of the current operation.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._fileName">
            <summary>
            Name of the archiver file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._fileOpenAccess">
            <summary>
            Defines constants for read, write, or read/write access to the archive file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._fileOpenMode">
            <summary>
            Specifies how to open the archive file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._fileOpenShare">
            <summary>
            Specifies controlling the kind of access other FileStream objects can have to the same archive file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._isCustomStream">
            <summary>
            Determines if the archive is opened in a custom stream, not in a file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._isInMemory">
            <summary>
            Specifies whether the archive will be stored in RAM.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._isOpenCorruptedArchives">
            <summary>
            Determines whether try to rebuild the central directory by the local files headers in case of the central 
            directory is corrupted.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._isOpened">
            <summary>
            Determines if the archive is opened.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._itemsHandler">
            <summary>
            Manager of the items in the archive.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._operationStartTime">
            <summary>
            Start time of the operation.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._processedFileCount">
            <summary>
            The size of the file that has been processed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._processedFileNo">
            <summary>
            Number of the processing file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._progressCancel">
            <summary>
            Determines whether the operation should be canceled.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._progressEnabled">
            <summary>
            Determines whether the progress evens would be fired.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._skipFile">
            <summary>
            Determines whether the current being processed file should be skipped.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._archiverOptions">
            <summary>
            The options for the compress and decompress operations.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._toProcessFilesTotalSize">
            <summary>
            The total size in bytes which should be processed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._totalProcessedFilesSize">
            <summary>
            The total size in bytes which has been processed already.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiverForgeBase._updateCount">
            <summary>
            Specifies the number of opened transactions.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Archiver.ArchiverForgeBase"/> class.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:28
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CreateNewArchiveItem">
            <summary>
            Creates the new archive item.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetFileCount">
            <summary>
            Gets the number of files in the archive.
            </summary>
            <returns>Number of files.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ChangeFilesAttr(System.String,System.IO.FileAttributes)">
            <summary>
            Changes file attributes for the files stored within the current archive file.
            </summary>
            <remarks>
            Call ChangeFilesAttr to change file attributes for files stored within the
            current archive file. 
            <para>The <paramref name="fileMask"/> parameter is the directory and file name
            mask, including wildcard characters. For example, "TEST\\*.*"
            specifies all files in the TEST directory stored within the archive file. All
            files that meet <paramref name="fileMask"/> will be processed.</para>
            </remarks>
            <param name="fileMask">The directory and file name mask, including wildcard
            characters.</param>
            <param name="newAttributes">Specifies new file attributes.</param>
            <example>The following example shows how to change attributes for the files in the archive (note that this example uses <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see> class, however you
            can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see>): 
            <code lang="C#">
            // Create a new instance of tar archive object.
            TarForge tarForge = new TarForge();
            // Set the directory where files will be searched for add operation.
            tarForge.BaseDir = @"Tests\Source\Files";
            // Specify the name for the tar archive file.
            tarForge.FileName = @"Tests\Temp\archive.tar";
            // Create and open the new archive.
            tarForge.OpenArchive(FileMode.Create);
            // The mask '*.*' specifies all files to add. To prevent adding several files 
            // you can specify any other file name mask, including wildcard characters.
            tarForge.AddFiles("*.*");
            // Specify the attributes for files to set that fit to the specified mask.
            tarForge.ChangeFilesAttr(
                    "*.*", // The directory and the file name mask, including wildcard characters.
                    FileAttributes.ReadOnly // Specify the new file attributes.
                );
            //Close the archive
            tarForge.CloseArchive();
            </code>
            <code lang="VB">
            ' Create a new instance of tar archive object.
            Dim tarForge As New TarForge()
            ' Set the directory where files will be searched for add operation.
            tarForge.BaseDir = "Tests\Source\Files"
            ' Specify the name for the tar archive file.
            tarForge.FileName = "Tests\Temp\archive.tar"
            ' Create and open the new archive.
            tarForge.OpenArchive(FileMode.Create)
            ' The mask '*.*' specifies all files to add. To prevent adding several files 
            ' you can specify any other file name mask, including wildcard characters.
            tarForge.AddFiles("*.*")
            ' Specify the attributes for files to set that fit to the specified mask.
            ' The directory and the file name mask, including wildcard characters.
            	' Specify the new file attributes.
            tarForge.ChangeFilesAttr("*.*", FileAttributes.[ReadOnly])
            'Close the archive
            tarForge.CloseArchive()</code>
            </example>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles">
            <summary>
            Adds files to the archive specified by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks">FileMasks</see> and
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks">ExclusionMasks</see> properties.
            </summary>
            <remarks>
            Use AddFiles to add files to the open archive file. If you need to delete
            backupFileStream files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles">MoveFiles()</see> instead of
            AddFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options">Options</see>.Recurse is set to <b>true</b>,
            AddFiles will search files recursively. 
            <para>AddFiles variant without parameters uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks">FileMasks</see>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks">ExclusionMasks</see> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options">Options</see>.SearchAttr properties to specify search conditions
            and to exclude files from add operation.</para>
            <para> If some errors occurs an exception will be raised. Write an <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure">OnProcessFileFailure</see> event handler to perform
            your own error handling.</para>
            <para>If you need to change the name of the added file, use <see cref="E:ComponentAce.Compression.Tar.TarForge.OnStoreFile"/> or <see cref="E:ComponentAce.Compression.Tgz.TgzForge.OnStoreFile"/> or <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnStoreFile"/> or <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnStoreFile"/>.</para>
            </remarks>
            <example>
            The following example shows how to add files to archive and extract them (note
            that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
            can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>): 
            <code lang="C#">
             zipForge1.FileName ="C:\\TEST\\test.zip";
             // Create a new archive file
             zipForge1.OpenArchive(FileMode.Create);
             // Set path to folder with the files to archive
             zipForge1.BaseDir = "\\Source";
             // Add all files and directories from the backupFileStream folder to the
            archive
             zipForge1.AddFiles("*.*");
             // Set path to the compressedStream folder
             zipForge1.BaseDir = "\\Dest";
             // extract all files in archive
             zipForge1.ExtractFiles("*.*");
             // Close archive
             zipForge1.CloseArchive();</code>
            <para></para>
            <code>
             ' Set archive file name
             ZipForge1.FileName = "C:\TEST\test.zip"
             ' Create a new archive file
             ZipForge1.OpenArchive(System.IO.FileMode.Create)
             ' Set path to folder with the files to archive
             ZipForge1.BaseDir = DemoFolder + "\\Source"
             ' Add all files and directories from the backupFileStream folder to the archive
             ZipForge1.AddFiles("*.*")
             ' Set path to the compressedStream folder
             ZipForge1.BaseDir = DemoFolder + "\\Dest"
             ' extract all files in archive
             ZipForge1.ExtractFiles("*.*")
             ' Close archive
             ZipForge1.CloseArchive()</code>
            </example>
            <overloads> Adds files to the archive. </overloads>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles(System.String)">
            <summary>
            Adds files specified by the <paramref name="fileMask"/> parameter to the archive.
            </summary>          
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <remarks>
            Use AddFiles to add files to the open archive file. If you need to delete backupFileStream files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/> instead of AddFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, AddFiles will search files recursively.
            <para>The fileMask parameter is the directory and file name mask, including
            wildcard characters. For example, "C:\TEST\*.*" specifies all files in
            the C:\TEST directory. All files that meets fileMask and searchAttributes will
            be added to the archive.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles(System.String,System.IO.FileAttributes)">
            <summary>
            Adds files specified by <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters to the archive.
            </summary>          
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
            <remarks>
            Use AddFiles to add files to the open archive file. If you need to delete backupFileStream files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/> instead of AddFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, AddFiles will search files recursively.
            <para>The fileMask parameter is the directory and file name mask, including
            wildcard characters. For example, "C:\TEST\*.*" specifies all files in
            the C:\TEST directory. All files that meets fileMask and searchAttributes will
            be added to the archive.</para>
            <para>The searchAttributes parameter specifies the special files to include in
            addition to all normal files.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles(System.String,System.IO.FileAttributes,System.String)">
            <summary>
            Adds files specified by <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters to the archive.
            </summary>        
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
            <param name="exclusionMask">Specifies files to be excluded from add operation.</param>
            <remarks>
            Use AddFiles to add files to the open archive file. If you need to delete backupFileStream files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/> instead of AddFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, AddFiles will search files recursively.
            <para>The fileMask parameter is the directory and file name mask, including
            wildcard characters. For example, "C:\TEST\*.*" specifies all files in
            the C:\TEST directory. All files that meets fileMask and searchAttributes will
            be added to the archive.</para>
            <para>The searchAttributes parameter specifies the special files to include in
            addition to all normal files.</para>
            <para>The exclusionMask specifies files to be excluded from the add
            operation.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFromBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            Adds data stored in a memory buffer to the archive.
            </summary>
            <param name="fileName">Specifies file name that will be used to store data from the memory buffer.</param>
            <param name="buffer">Buffer to add data from.</param>
            <param name="count">Specifies the number of bytes to be written.</param>
            <remarks >
            Use AddFromBuffer to compress data stored in the memory buffer to the file inside the archive. 
            <para>If some errors occurs an exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFromStream(System.String,System.IO.Stream)">
            <overloads>
            Adds data stored in a stream to the archive.
            </overloads>
            <summary>
            Adds data stored in a stream to the archive.
            </summary>
            <remarks>
            Use AddFromStream to compress data stored in the Stream descendant object like FileStream or MemoryStream to the file inside the archive.
            <para>While using multiple AddFromStream calls within a single transaction, keep in mind that you may get an error if a stream object is destroyed before the call to the EndUpdate method. Please take into account that you should use separate stream objects for each AddFromStream call.</para>
            </remarks>          
            <param name="fileName">Specifies file name that will be used to store data from the Stream descendant object.</param>
            <param name="stream">Stream to add data from.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFromStream(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Adds data stored at a specified position in the stream to the archive.
            </summary>
            <param name="fileName">Specifies file name that will be used to store data from the Stream descendant object.</param>
            <param name="stream">Stream to add data from.</param>
            <param name="position">Determines starting position in stream for adding data to the archive.</param>
            <remarks>
            <para>Use AddFromStream to compress data stored in the Stream descendant object like FileStream or MemoryStream to the file inside the archive.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFromStream(System.String,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Adds specified amount of data stored at a specified position in the stream to the archive.
            </summary>
            <param name="fileName">Specifies file name that will be used to store data from the Stream descendant object.</param>
            <param name="stream">Stream to add data from.</param>
            <param name="position">Determines starting position in stream for adding data to the archive.</param>
            <param name="count">Count specifies size of the data in stream for adding to the archive.</param>
            <remarks>
            <para>Use AddFromStream to compress data stored in the Stream descendant object like FileStream or MemoryStream to the file inside the archive. </para>
            <para>The position determines starting position in stream for adding data to the archive.</para>
            <para>Count specifies size of the data in stream for adding to the archive. If count = 0 size of the data will be <see cref="P:System.IO.Stream.Length"/> - position. If count &gt; 0 then AddFromStream copies stream data to the internal memory stream before processing.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFromString(System.String,System.String)">
            <summary>
            Adds string to the archive.
            </summary>
            <param name="fileName">Specifies file name that will be used to store string.</param>
            <param name="text">String to add data from.</param>
            <remarks>
            Use AddFromString to compress string to the file inside the archive. 
            <para>If some errors occurs an exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BeginUpdate">
            <summary>
            Begins a transaction for an open archive.
            </summary>
            <example> The following example shows how to use transaction system (note
            that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
            can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
            <code lang="C#">
                  zipForge1.FileName = "C:\\TEST\\test.zip";
                  // Create a new archive file            
                  zipForge1.OpenArchive(System.IO.FileMode.Create);
                  // Start a transaction
                  zipForge1.BeginUpdate();
                  // Set path to folder with some HTML files to BaseDir
                  zipForge1.BaseDir = DemoPath + "Source";
                  // Add all files from Source folder to the archive
                  try
                  {
                    zipForge1.AddFiles("*.*");
                  }
                  catch
                  {
                    // If errors occurs rollback transaction. All modifications will be cancelled.            
                    zipForge1.CancelUpdate();
                    // Close archive and exit current procedure                
                    zipForge1.CloseArchive();
                    MessageBox.Show("Error adding all files");
                    return;
                  }
                  // Set path to folder with some HTML files to BaseDir            
                  zipForge1.BaseDir = DemoPath + "Source1\\";
                  // Add all HTML files from Source1 folder to the archive
                  try
                  {
                    zipForge1.AddFiles("*.htm*");
                  }
                  catch
                  {
                    // If errors occurs rollback transaction. All modifications will be cancelled.                
                    zipForge1.CancelUpdate();
                    // Close archive and exit current procedure                
                    zipForge1.CloseArchive();
                    MessageBox.Show("Error adding html files");
                    return;
                  }
                  // Commit a transaction. All modifications will be saved.            
                  zipForge1.EndUpdate();
                  // Set path to compressedStream folder            
                  zipForge1.BaseDir = DemoPath + "Dest";
                  // Extract all files            
                  zipForge1.ExtractFiles("*.*");
                  // Close the archive            
                  zipForge1.CloseArchive();
                </code>
                <code lang="vbnet">
                  zipForge1.FileName = "C:\TEST\test.zip";
                  ' Create a new archive file            
                  zipForge1.OpenArchive(System.IO.FileMode.Create)
                  ' Start a transaction
                  zipForge1.BeginUpdate()
                  ' Set path to folder with some HTML files to BaseDir
                  zipForge1.BaseDir = DemoPath + "Source"
                  ' Add all files from Source folder to the archive
                  Try
                    zipForge1.AddFiles("*.*")
                  Catch
                    ' If errors occurs rollback transaction. All modifications will be cancelled.            
                    zipForge1.CancelUpdate()
                    ' Close archive and exit current procedure                
                    zipForge1.CloseArchive()
                    MessageBox.Show("Error adding all files")
                    Return
                  End Try
                  ' Set path to folder with some HTML files to BaseDir            
                  zipForge1.BaseDir = DemoPath + "Source1\\"
                  ' Add all HTML files from Source1 folder to the archive
                  Try
                    zipForge1.AddFiles("*.htm*")
                  Catch
                    ' If errors occurs rollback transaction. All modifications will be cancelled.                
                    zipForge1.CancelUpdate()
                    ' Close archive and exit current procedure                
                    zipForge1.CloseArchive()
                    MessageBox.Show("Error adding html files")
                    Return
                  End Try
                  ' Commit a transaction. All modifications will be saved.            
                  zipForge1.EndUpdate()
                  ' Set path to compressedStream folder            
                  zipForge1.BaseDir = DemoPath + "Dest"
                  ' Extract all files            
                  zipForge1.ExtractFiles("*.*")
                  ' Close the archive            
                  zipForge1.CloseArchive
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.EndUpdate"/>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CancelUpdate"/>
            <remarks>
            Call BeginUpdate to start a group of operations called a transaction. All changes made by operations within single transaction can be saved by calling <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.EndUpdate"/> or cancelled by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CancelUpdate"/>. BeginUpdate sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InUpdate"/> property to <b>true</b>.
            <para>Transaction system provides archive integrity like reliable database systems.</para>
            <para>Any transaction must be finished before <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles">extracting</see> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles">testing</see> files. Otherwise exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CancelUpdate">
            <summary>
            Cancels all archive operations made after calling BeginUpdate.
            </summary>
            <example> The following example shows how to use transaction system (note
            that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
            can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
            <code lang="C#">
                  zipForge1.FileName = "C:\\TEST\\test.zip";
                  // Create a new archive file            
                  zipForge1.OpenArchive(System.IO.FileMode.Create);
                  // Start a transaction
                  zipForge1.BeginUpdate();
                  // Set path to folder with some HTML files to BaseDir
                  zipForge1.BaseDir = DemoPath + "Source";
                  // Add all files from Source folder to the archive
                  try
                  {
                    zipForge1.AddFiles("*.*");
                  }
                  catch
                  {
                    // If errors occurs rollback transaction. All modifications will be cancelled.            
                    zipForge1.CancelUpdate();
                    // Close archive and exit current procedure                
                    zipForge1.CloseArchive();
                    MessageBox.Show("Error adding all files");
                    return;
                  }
                  // Set path to folder with some HTML files to BaseDir            
                  zipForge1.BaseDir = DemoPath + "Source1\\";
                  // Add all HTML files from Source1 folder to the archive
                  try
                  {
                    zipForge1.AddFiles("*.htm*");
                  }
                  catch
                  {
                    // If errors occurs rollback transaction. All modifications will be cancelled.                
                    zipForge1.CancelUpdate();
                    // Close archive and exit current procedure                
                    zipForge1.CloseArchive();
                    MessageBox.Show("Error adding html files");
                    return;
                  }
                  // Commit a transaction. All modifications will be saved.            
                  zipForge1.EndUpdate();
                  // Set path to compressedStream folder            
                  zipForge1.BaseDir = DemoPath + "Dest";
                  // Extract all files            
                  zipForge1.ExtractFiles("*.*");
                  // Close the archive            
                  zipForge1.CloseArchive();
                </code>
                <code lang="vbnet">
                  zipForge1.FileName = "C:\TEST\test.zip";
                  ' Create a new archive file            
                  zipForge1.OpenArchive(System.IO.FileMode.Create)
                  ' Start a transaction
                  zipForge1.BeginUpdate()
                  ' Set path to folder with some HTML files to BaseDir
                  zipForge1.BaseDir = DemoPath + "Source"
                  ' Add all files from Source folder to the archive
                  Try
                    zipForge1.AddFiles("*.*")
                  Catch
                    ' If errors occurs rollback transaction. All modifications will be cancelled.            
                    zipForge1.CancelUpdate()
                    ' Close archive and exit current procedure                
                    zipForge1.CloseArchive()
                    MessageBox.Show("Error adding all files")
                    Return
                  End Try
                  ' Set path to folder with some HTML files to BaseDir            
                  zipForge1.BaseDir = DemoPath + "Source1\\"
                  ' Add all HTML files from Source1 folder to the archive
                  Try
                    zipForge1.AddFiles("*.htm*")
                  Catch
                    ' If errors occurs rollback transaction. All modifications will be cancelled.                
                    zipForge1.CancelUpdate()
                    ' Close archive and exit current procedure                
                    zipForge1.CloseArchive()
                    MessageBox.Show("Error adding html files")
                    Return
                  End Try
                  ' Commit a transaction. All modifications will be saved.            
                  zipForge1.EndUpdate()
                  ' Set path to compressedStream folder            
                  zipForge1.BaseDir = DemoPath + "Dest"
                  ' Extract all files            
                  zipForge1.ExtractFiles("*.*")
                  ' Close the archive            
                  zipForge1.CloseArchive
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BeginUpdate"/>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.EndUpdate"/>
            <remarks>
            Use CancelUpdate to rollback current transaction started by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BeginUpdate"/>. CancelUpdate clears all archive modifications made after calling BeginUpdate. CancelUpdate sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InUpdate"/> property to <b>false</b>.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive">
             <summary>
             Closes current archive file.
             </summary>
             <example> The following example shows how to add files to archive and extract them (note
             that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
             can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
             <code lang="C#">
              zipForge1.FileName ="C:\\TEST\\test.zip";
              // Create a new archive file
              zipForge1.OpenArchive(FileMode.Create);
              // Set path to folder with the files to archive
              zipForge1.BaseDir = "\\Source";
              // Add all files and directories from the backupFileStream folder to the archive
              zipForge1.AddFiles("*.*");
              // Set path to the compressedStream folder
              zipForge1.BaseDir = "\\Dest";
              // extract all files in archive
              zipForge1.ExtractFiles("*.*");
              // Close archive
              zipForge1.CloseArchive();
             </code>
             <code lang="vbnet">
              ' Set archive file name
              ZipForge1.FileName = "C:\TEST\test.zip"
              ' Create a new archive file
              ZipForge1.OpenArchive(System.IO.FileMode.Create)
              ' Set path to folder with the files to archive
              ZipForge1.BaseDir = DemoFolder + "\\Source"
              ' Add all files and directories from the backupFileStream folder to the archive
              ZipForge1.AddFiles("*.*")
              ' Set path to the compressedStream folder
              ZipForge1.BaseDir = DemoFolder + "\\Dest"
              ' extract all files in archive
              ZipForge1.ExtractFiles("*.*")
              ' Close archive
              ZipForge1.CloseArchive()
             </code>
             </example>
             <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive"/>
            <remarks>
             Call CloseArchive to close current archive file. CloseArchive automatically finishes current transaction started by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BeginUpdate"/> method and sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <b>false</b>.
             <para>Call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive"/> to create or open archive file.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles">
            <overloads>
            Deletes files stored within the archive.
            </overloads>
            <summary>
            Deletes files stored within the archive specified by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <example> The following example shows how to handle the archive file (note
            that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
            can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
            <code lang="C#">
             zipForge1.FileName = "C:\\TEST\\test.zip";
             // Create a new archive file
             zipForge1.OpenArchive(FileMode.Create);
             // Let's encrypt all files
             zipForge1.Password = "The password";
             // Set path to folder with some text files to BaseDir
             zipForge1.BaseDir = "Source";
             // Do not compress MPEG3 files
             zipForge1.NoCompressionMasks.Add("*.mp3");
             // Add all files and directories from Source excluding text files to the archive
             zipForge1.AddFiles("*.*", FileAttributes.Archive| 
             FileAttributes.Normal | FileAttributes.Directory, "*.txt");// Set path to compressedStream folder            
             zipForge1.BaseDir = "Dest";
             // Extract all files and directories from the archive to BaseDir
             // After extracting directory Dest should contain all files from folder
             // Source excluding *.txt files
             zipForge1.ExtractFiles("*.*");
             // Use full path
             zipForge1.Options.StorePath = StorePathMode.FullPath;
             // Set path to compressedStream folder
             zipForge1.BaseDir = "Source1";
             // Move all text files from Source1 to the archive
             // After moving directory Source1 should not contain any text files
             zipForge1.MoveFiles("*.txt", FileAttributes.Normal | FileAttributes.Archive);
             // Set path to current drive
             zipForge1.BaseDir = Directory.GetDirectoryRoot(Directory.GetCurrentDirectory());
             // Overwrite all files
             zipForge1.Options.Overwrite = OverwriteMode.Always;
             // Update all files excluding 1???.newDirItem* from Source1
             zipForge1.UpdateFiles(DemoFolder + "\\Source1\\*.*", FileAttributes.Archive | FileAttributes.Normal,       "2???.newDirItem*");
             // Set temporary directory
             zipForge1.TempDir = "Temp";
             // Test all files and directories in the archive
             try
             {
               zipForge1.TestFiles("*.*");
             }
             catch
             {
               MessageBox.Show("Archive is corrupted");
             }
             // Close archive
             zipForge1.CloseArchive();
            </code>
            <code lang="vbnet">
             zipForge1.FileName = "C:\TEST\test.zip";
             ' Create a new archive file
             ZipForge1.OpenArchive(System.IO.FileMode.Create)
             ' Let's encrypt all files
             ZipForge1.Password = "The password"
             ' Set path to folder with some text files to BaseDir
             ZipForge1.BaseDir = "Source"
             ' Do not compress MPEG3 files
             ZipForge1.NoCompressionMasks.Add("*.mp3")
             ' Add all files and directories from Source excluding text files to the archive
             ZipForge1.AddFiles("*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Directory, "*.txt")
             ' Set path to compressedStream folder            
             ZipForge1.BaseDir = "Dest"
             ' Extract all files and directories from the archive to BaseDir
             ' After extracting directory Dest should contain all files from folder
             ' Source excluding *.txt files
             ZipForge1.ExtractFiles("*.*")
             ' Use full path
             ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.FullPath
             ' Set path to compressedStream folder
             ZipForge1.BaseDir = "Source1"
             ' Move all text files from Source1 to the archive
             ' After moving directory Source1 should not contain any text files
             ZipForge1.MoveFiles("*.txt", System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Archive)
             ' Set path to current drive
             ZipForge1.BaseDir = System.IO.Directory.GetDirectoryRoot(System.IO.Directory.GetCurrentDirectory())
             ' Overwrite all files
             ZipForge1.Options.Overwrite = ComponentAce.Compression.ZipForge.OverwriteMode.Always
             ' Update all files excluding 1???.newDirItem* from Source1
             ZipForge1.UpdateFiles(DemoFolder + "\Source1\*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal, "2???.newDirItem*")
             ' Set temporary directory
             ZipForge1.TempDir = DemoFolder + "Temp"
             ' Test all files and directories in the archive
             Try
               ZipForge1.TestFiles("*.*")
             Catch
               MessageBox.Show("Archive is corrupted")
             End Try
             ' Use full path
             ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.RelativePath
             ZipForge1.BaseDir = "Dest1"
             ' Extract all files to Dest1
             ZipForge1.ExtractFiles("*.*")
             ' Close the archive
             ZipForge1.CloseArchive()
            </code>
            </example>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles(System.String)">
             <summary>
             Deletes files stored within the archive and specified by the <paramref name="fileMask"/> parameter.
             </summary>
             <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
             <remarks>
             Use DeleteFiles to delete files from the open archive file. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, DeleteFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetArchiveSize">
            <summary>
            Gets the size of the archive.
            </summary>
            <returns>Length of compression stream.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles(System.String,System.IO.FileAttributes)">
             <summary>
             Deletes files stored within the archive and specified by <paramref name="fileMask"/> and <paramref name="searchAttributes"/> parameters.
             </summary>
             <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
             <param name="searchAttributes">Specifies the special files to include in addition to all normal files.</param>
             <remarks>
             Use DeleteFiles to delete files from the open archive file. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, DeleteFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles(System.String,System.IO.FileAttributes,System.String)">
            <summary>
            Deletes files stored within the archive and specified by <paramref name="fileMask"/>, <paramref name="searchAttributes"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttributes">Specifies the special files to include in addition to all normal files.</param>
            <param name="exclusionMask">Specifies files to be excluded from the delete operation.</param>
            <remarks>
            Use DeleteFiles to delete files from the open archive file. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse 
            is set to <b>true</b>, DeleteFiles will search files recursively.
            <para>DeleteFiles variant without parameters uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, 
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr to specify search 
            conditions and to exclude files from delete operation.</para>
            <para>The <paramref name="fileMask"/> parameter is the directory and file name mask, 
            including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST 
            directory stored within the archive file. All files that meets FileMask and SearchAttr 
            will be deleted.</para>
            <para>The <paramref name="searchAttributes"/> parameter specifies the special files to include 
            in addition to all normal files.</para>
            <para>The <paramref name="exclusionMask"/> specifies files to be excluded from the 
            delete operation.</para>
            <para> If some errors occur an exception will be raised. Write an 
            <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event handler to perform your own error handling.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.EndUpdate">
            <summary>
            Finishes a transaction for an open archive.
            </summary>
            <example> The following example shows how to use transaction system (note
            that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
            can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
            <code lang="C#">
                  zipForge1.FileName = "C:\\TEST\\test.zip";
                  // Create a new archive file            
                  zipForge1.OpenArchive(System.IO.FileMode.Create);
                  // Start a transaction
                  zipForge1.BeginUpdate();
                  // Set path to folder with some HTML files to BaseDir
                  zipForge1.BaseDir = DemoPath + "Source";
                  // Add all files from Source folder to the archive
                  try
                  {
                    zipForge1.AddFiles("*.*");
                  }
                  catch
                  {
                    // If errors occurs rollback transaction. All modifications will be cancelled.            
                    zipForge1.CancelUpdate();
                    // Close archive and exit current procedure                
                    zipForge1.CloseArchive();
                    MessageBox.Show("Error adding all files");
                    return;
                  }
                  // Set path to folder with some HTML files to BaseDir            
                  zipForge1.BaseDir = DemoPath + "Source1\\";
                  // Add all HTML files from Source1 folder to the archive
                  try
                  {
                    zipForge1.AddFiles("*.htm*");
                  }
                  catch
                  {
                    // If errors occurs rollback transaction. All modifications will be cancelled.                
                    zipForge1.CancelUpdate();
                    // Close archive and exit current procedure                
                    zipForge1.CloseArchive();
                    MessageBox.Show("Error adding html files");
                    return;
                  }
                  // Commit a transaction. All modifications will be saved.            
                  zipForge1.EndUpdate();
                  // Set path to compressedStream folder            
                  zipForge1.BaseDir = DemoPath + "Dest";
                  // Extract all files            
                  zipForge1.ExtractFiles("*.*");
                  // Close the archive            
                  zipForge1.CloseArchive();
                </code>
                <code lang="vbnet">
                  zipForge1.FileName = "C:\TEST\test.zip";
                  ' Create a new archive file            
                  zipForge1.OpenArchive(System.IO.FileMode.Create)
                  ' Start a transaction
                  zipForge1.BeginUpdate()
                  ' Set path to folder with some HTML files to BaseDir
                  zipForge1.BaseDir = DemoPath + "Source"
                  ' Add all files from Source folder to the archive
                  Try
                    zipForge1.AddFiles("*.*")
                  Catch
                    ' If errors occurs rollback transaction. All modifications will be cancelled.            
                    zipForge1.CancelUpdate()
                    ' Close archive and exit current procedure                
                    zipForge1.CloseArchive()
                    MessageBox.Show("Error adding all files")
                    Return
                  End Try
                  ' Set path to folder with some HTML files to BaseDir            
                  zipForge1.BaseDir = DemoPath + "Source1\\"
                  ' Add all HTML files from Source1 folder to the archive
                  Try
                    zipForge1.AddFiles("*.htm*")
                  Catch
                    ' If errors occurs rollback transaction. All modifications will be cancelled.                
                    zipForge1.CancelUpdate()
                    ' Close archive and exit current procedure                
                    zipForge1.CloseArchive()
                    MessageBox.Show("Error adding html files")
                    Return
                  End Try
                  ' Commit a transaction. All modifications will be saved.            
                  zipForge1.EndUpdate()
                  ' Set path to compressedStream folder            
                  zipForge1.BaseDir = DemoPath + "Dest"
                  ' Extract all files            
                  zipForge1.ExtractFiles("*.*")
                  ' Close the archive            
                  zipForge1.CloseArchive
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BeginUpdate"/>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CancelUpdate"/>
            <remarks>
            EndUpdate saves all archive modifications made after calling <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BeginUpdate"/> and finishes current transaction. EndUpdate sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InUpdate"/> property to <b>false</b>. 
            <para>Call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CancelUpdate"/> to cancel archive modifications.</para>
            </remarks> 
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles">
            <overloads>
            Extracts files from the archive.
            </overloads>
            <summary>
            Extracts files specified by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties from the archive.
            </summary>
            <example> The following example shows how to add files to archive and extract them (note
            that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
            can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
            <code lang="C#">
             zipForge1.FileName ="C:\\TEST\\test.zip";
             // Create a new archive file
             zipForge1.OpenArchive(FileMode.Create);
             // Set path to folder with the files to archive
             zipForge1.BaseDir = "\\Source";
             // Add all files and directories from the backupFileStream folder to the archive
             zipForge1.AddFiles("*.*");
             // Set path to the compressedStream folder
             zipForge1.BaseDir = "\\Dest";
             // extract all files in archive
             zipForge1.ExtractFiles("*.*");
             // Close archive
             zipForge1.CloseArchive();
            </code>
            <code lang="vbnet">
             ' Set archive file name
             ZipForge1.FileName = "C:\TEST\test.zip"
             ' Create a new archive file
             ZipForge1.OpenArchive(System.IO.FileMode.Create)
             ' Set path to folder with the files to archive
             ZipForge1.BaseDir = DemoFolder + "\\Source"
             ' Add all files and directories from the backupFileStream folder to the archive
             ZipForge1.AddFiles("*.*")
             ' Set path to the compressedStream folder
             ZipForge1.BaseDir = DemoFolder + "\\Dest"
             ' extract all files in archive
             ZipForge1.ExtractFiles("*.*")
             ' Close archive
             ZipForge1.CloseArchive()
            </code>
            </example>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles(System.String)">
            <summary>
            Extracts files specified by the <paramref name="fileMask"/> parameter.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <remarks>
            Use ExtractFiles to extract files from the open archive file. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, ExtractFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles(System.String,System.IO.FileAttributes)">
            <summary>
            Extracts files specified by <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <remarks>
            Use ExtractFiles to extract files from the open archive file. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, ExtractFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles(System.String,System.IO.FileAttributes,System.String)">
            <summary>
            Extracts files specified by <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <param name="exclusionMask">Specifies files to be excluded from the extract operation.</param>
            <remarks>
            Use ExtractFiles to extract files from the open archive file. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse 
            is set to <b>true</b>, ExtractFiles will search files recursively.
            <para>
            ExtractFiles variant without parameters uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, 
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr properties to 
            specify search conditions and to exclude files from add operation.
            ExtractFiles variant with parameters uses procedure parameters and ignores 
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr 
            properties.
            </para>
            <para>The <paramref name="fileMask"/> parameter is the directory and file name mask, 
            including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST 
            directory stored within the archive file. All files that meets FileMask and SearchAttr 
            will be extracted from the archive. If FileMask is a blank string, no files will be extracted.</para>
            <para>The <paramref name="searchAttr"/> parameter specifies the special files to 
            include in addition to all normal files.</para>
            <para>The <paramref name="exclusionMask"/> specifies files to be excluded from the 
            extract operation.</para>
            <para>Any transaction must be finished before calling ExtractFiles. Otherwise an 
            exception will be raised. Also if some other errors occurs an exception will be raised. 
            Write an <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event handler to perform your own error handling.</para>
            <para>If you need to change the name of the extracted file, 
            use <see cref="E:ComponentAce.Compression.Tar.TarForge.OnExtractFile"/> or <see cref="E:ComponentAce.Compression.Tgz.TgzForge.OnExtractFile"/> or <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnExtractFile"/> or <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnExtractFile"/>event handler.</para>
            </remarks>          
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractToBuffer(System.String,System.Byte[]@)">
            <summary>
            Decompresses a file with the <paramref name="fileName"/> name stored inside the archive to byte array.
            </summary>
            <param name="fileName">Specifies file name being extracted.</param>
            <param name="buffer">Buffer is an array of bytes where data will be extracted. The method allocates memory for the buffer.</param>
            <returns>Returns the number of data bytes extracted to the buffer.</returns>
            <remarks >
            Use ExtractToBuffer to decompress data stored in the file inside the archive to memory buffer. 
            <para>Any transaction must be finished before calling ExtractToBuffer. Otherwise an exception will be raised. Also if some other errors occurs an exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractToStream(System.String,System.IO.Stream)">
            <summary>
            Extracts data stored in the file inside the archive to a <see cref="T:System.IO.Stream">Stream</see> object descendant.
            </summary>
            <param name="fileName">Name of the file being extracted.</param>
            <param name="stream">Stream to extract data to.</param>
            <remarks>
            Use ExtractToStream to decompress data stored in the file inside the archive to a Stream descendant object like FileStream or MemoryStream. 
            <para>Any transaction must be finished before calling ExtractToStream.
            Otherwise an exception will be raised. Also if some other errors occurs an exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractToString(System.String,System.String@)">
            <summary>
            Extracts a file stored withing the archive into a string.
            </summary>
            <param name="fileName">Name of the file being extracted.</param>
            <param name="text">String to extract data to.</param>
            <remarks>Use ExtractToString to decompress string from the file inside the archive. 
            <para>Any transaction must be finished before calling ExtractToString. Otherwise an exception will be raised. Also if some other errors occurs an exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindFirst(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <overloads>
            Finds files stored within the archive.
            </overloads>
            <summary>
            Finds files stored within the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <example> The following example shows how to search files stored within the archive:
            <code lang="C#">
             zipForge1.FileName = "C:\\TEST\\test.zip";
             zipForge1.OpenArchive();
             ComponentAce.Compression.ZipForge.ArchiveItem archiveItem = new ComponentAce.Compression.ZipForge.ArchiveItem();
             if (zipForge1.FindFirst("*.*", ref archiveItem))
             {
               do
               {
                 ListViewItem listItem = new ListViewItem();
                 listItem.Text = archiveItem.FileName;
                 ListViewItem.ListViewSubItem subItem = new ListViewItem.ListViewSubItem(listItem, 
                     archiveItem.LastWriteTime.ToShortDateString() + " " + archiveItem.LastWriteTime.ToShortTimeString());
                 listItem.SubItems.Add(subItem);
                 subItem = new ListViewItem.ListViewSubItem(listItem, archiveItem.UncompressedSize.ToString());
                 listItem.SubItems.Add(subItem);                    
                 subItem = new ListViewItem.ListViewSubItem(listItem, archiveItem.CompressedSize.ToString());
                 listItem.SubItems.Add(subItem);
                 subItem = new ListViewItem.ListViewSubItem(listItem, archiveItem.CompressionRate.ToString());
                 listItem.SubItems.Add(subItem);
                 subItem = new ListViewItem.ListViewSubItem(listItem, ((uint)archiveItem.Crc).ToString());
                 listItem.SubItems.Add(subItem);
                 subItem = new ListViewItem.ListViewSubItem(listItem, archiveItem.StoredPath);
                 listItem.SubItems.Add(subItem);                    
                 listView1.Items.Add(listItem);
               }
               while (zipForge1.FindNext(ref archiveItem));
             }
             zipForge1.CloseArchive();
             </code>
             <code lang="vbnet">
             zipForge1.FileName = "C:\TEST\test.zip";
             zipForge1.OpenArchive()
             Dim archiveItem As ComponentAce.Compression.ZipForge.ArchiveItem = New ComponentAce.Compression.ZipForge.ArchiveItem()
             If ZipForge1.FindFirst("*.*", archiveItem) Then
               Do                
                 Dim listItem As ListViewItem = New ListViewItem()
                 listItem.Text = archiveItem.FileName
                 Dim subItem As ListViewItem.ListViewSubItem = New ListViewItem.ListViewSubItem(listItem,
                 archiveItem.LastWriteTime.ToShortDateString() + " " + archiveItem.LastWriteTime.ToShortTimeString())
                 listItem.SubItems.Add(subItem)
                 subItem = New ListViewItem.ListViewSubItem(listItem, archiveItem.UncompressedSize.ToString())
                 listItem.SubItems.Add(subItem)
                 subItem = New ListViewItem.ListViewSubItem(listItem, archiveItem.CompressedSize.ToString())
                 listItem.SubItems.Add(subItem)
                 subItem = New ListViewItem.ListViewSubItem(listItem, archiveItem.CompressionRate.ToString())
                 listItem.SubItems.Add(subItem)
                 subItem = New ListViewItem.ListViewSubItem(listItem, (CType(archiveItem.Crc, System.UInt32)).ToString())
                 listItem.SubItems.Add(subItem)
                 subItem = New ListViewItem.ListViewSubItem(listItem, archiveItem.StoredPath)
                 listItem.SubItems.Add(subItem)
                 listView1.Items.Add(listItem)
               Loop While ZipForge1.FindNext(archiveItem)
             End If
             zipForge1.CloseArchive()
            </code>
            </example>
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindNext(ComponentAce.Compression.Archiver.BaseArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            <para>FindFirst variant with single parameter uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr to specify search conditions and to exclude files from delete operation.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            <para>The searchAttributes parameter specifies the special files to include in addition to all normal files</para>
            <para>The exclusionMask specifies files to be excluded from the delete operation.</para>
            </remarks>          
            <param name="archiveItem">ArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindNext(ComponentAce.Compression.Archiver.BaseArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindFirst(System.String,ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> parameter.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">ArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindNext(ComponentAce.Compression.Archiver.BaseArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindNext(ComponentAce.Compression.Archiver.BaseArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindFirst(System.String,ComponentAce.Compression.Archiver.BaseArchiveItem@,System.IO.FileAttributes)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">ArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindNext(ComponentAce.Compression.Archiver.BaseArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindNext(ComponentAce.Compression.Archiver.BaseArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindFirst(System.String,ComponentAce.Compression.Archiver.BaseArchiveItem@,System.IO.FileAttributes,System.String)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">ArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <param name="exclusionMask">Specifies files to be excluded from the search operation.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns>  
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindNext(ComponentAce.Compression.Archiver.BaseArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindNext(ComponentAce.Compression.Archiver.BaseArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindNext(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
             <summary>
             Finds files stored within the archive.
             </summary>
             <example> The following example shows how to search files stored within the archive:
             <code lang="C#">
              zipForge1.FileName = "C:\\TEST\\test.zip";
              zipForge1.OpenArchive();
              ComponentAce.Compression.ZipForge.ArchiveItem archiveItem = new ComponentAce.Compression.ZipForge.ArchiveItem();
              if (zipForge1.FindFirst("*.*", ref archiveItem))
              {
                do
                {
                  ListViewItem listItem = new ListViewItem();
                  listItem.Text = archiveItem.FileName;
                  ListViewItem.ListViewSubItem subItem = new ListViewItem.ListViewSubItem(listItem, 
                      archiveItem.LastWriteTime.ToShortDateString() + " " + archiveItem.LastWriteTime.ToShortTimeString());
                  listItem.SubItems.Add(subItem);
                  subItem = new ListViewItem.ListViewSubItem(listItem, archiveItem.UncompressedSize.ToString());
                  listItem.SubItems.Add(subItem);                    
                  subItem = new ListViewItem.ListViewSubItem(listItem, archiveItem.CompressedSize.ToString());
                  listItem.SubItems.Add(subItem);
                  subItem = new ListViewItem.ListViewSubItem(listItem, archiveItem.CompressionRate.ToString());
                  listItem.SubItems.Add(subItem);
                  subItem = new ListViewItem.ListViewSubItem(listItem, ((uint)archiveItem.Crc).ToString());
                  listItem.SubItems.Add(subItem);
                  subItem = new ListViewItem.ListViewSubItem(listItem, archiveItem.StoredPath);
                  listItem.SubItems.Add(subItem);                    
                  listView1.Items.Add(listItem);
                }
                while (zipForge1.FindNext(ref archiveItem));
              }
              zipForge1.CloseArchive();
              </code>
              <code lang="vbnet">
              zipForge1.FileName = "C:\TEST\test.zip";
              zipForge1.OpenArchive()
              Dim archiveItem As ComponentAce.Compression.ZipForge.ArchiveItem = New ComponentAce.Compression.ZipForge.ArchiveItem()
              If ZipForge1.FindFirst("*.*", archiveItem) Then
                Do                
                  Dim listItem As ListViewItem = New ListViewItem()
                  listItem.Text = archiveItem.FileName
                  Dim subItem As ListViewItem.ListViewSubItem = New ListViewItem.ListViewSubItem(listItem,
                  archiveItem.LastWriteTime.ToShortDateString() + " " + archiveItem.LastWriteTime.ToShortTimeString())
                  listItem.SubItems.Add(subItem)
                  subItem = New ListViewItem.ListViewSubItem(listItem, archiveItem.UncompressedSize.ToString())
                  listItem.SubItems.Add(subItem)
                  subItem = New ListViewItem.ListViewSubItem(listItem, archiveItem.CompressedSize.ToString())
                  listItem.SubItems.Add(subItem)
                  subItem = New ListViewItem.ListViewSubItem(listItem, archiveItem.CompressionRate.ToString())
                  listItem.SubItems.Add(subItem)
                  subItem = New ListViewItem.ListViewSubItem(listItem, (CType(archiveItem.Crc, System.UInt32)).ToString())
                  listItem.SubItems.Add(subItem)
                  subItem = New ListViewItem.ListViewSubItem(listItem, archiveItem.StoredPath)
                  listItem.SubItems.Add(subItem)
                  listView1.Items.Add(listItem)
                Loop While ZipForge1.FindNext(archiveItem)
              End If
              zipForge1.CloseArchive()
             </code>
             </example> 
             <param name="archiveItem">ArchiveItem class.</param>
             <returns>FindNext returns <b>true</b> if there is at least one file meets search conditions, otherwise it returns <b>false</b>.</returns>
            <remarks>
             Use FindNext to find files stored inside the open archive file. Use FindNext after calling <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindFirst(ComponentAce.Compression.Archiver.BaseArchiveItem@)"/> only.
             <para>Pass ArchiveItem class found by previous calling of FindFirst or FindNext to the FindNext.
             After calling FindNext archiveItem parameter will contain parameters of the next found file.
             </para>
            </remarks>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FindFirst(ComponentAce.Compression.Archiver.BaseArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles">
             <overloads>
             Adds files to the archive and deletes original files.
             </overloads>
             <summary>
             Moves files to the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
             </summary>
             <example> The following example shows how to handle the archive file (note
             that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
             can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
             <code lang="C#">
              zipForge1.FileName = "C:\\TEST\\test.zip";
              // Create a new archive file
              zipForge1.OpenArchive(FileMode.Create);
              // Let's encrypt all files
              zipForge1.Password = "The password";
              // Set path to folder with some text files to BaseDir
              zipForge1.BaseDir = "Source";
              // Do not compress MPEG3 files
              zipForge1.NoCompressionMasks.Add("*.mp3");
              // Add all files and directories from Source excluding text files to the archive
              zipForge1.AddFiles("*.*", FileAttributes.Archive| 
              FileAttributes.Normal | FileAttributes.Directory, "*.txt");// Set path to compressedStream folder            
              zipForge1.BaseDir = "Dest";
              // Extract all files and directories from the archive to BaseDir
              // After extracting directory Dest should contain all files from folder
              // Source excluding *.txt files
              zipForge1.ExtractFiles("*.*");
              // Use full path
              zipForge1.Options.StorePath = StorePathMode.FullPath;
              // Set path to compressedStream folder
              zipForge1.BaseDir = "Source1";
              // Move all text files from Source1 to the archive
              // After moving directory Source1 should not contain any text files
              zipForge1.MoveFiles("*.txt", FileAttributes.Normal | FileAttributes.Archive);
              // Set path to current drive
              zipForge1.BaseDir = Directory.GetDirectoryRoot(Directory.GetCurrentDirectory());
              // Overwrite all files
              zipForge1.Options.Overwrite = OverwriteMode.Always;
              // Update all files excluding 1???.newDirItem* from Source1
              zipForge1.UpdateFiles(DemoFolder + "\\Source1\\*.*", FileAttributes.Archive | FileAttributes.Normal,       "2???.newDirItem*");
              // Set temporary directory
              zipForge1.TempDir = "Temp";
              // Test all files and directories in the archive
              try
              {
                zipForge1.TestFiles("*.*");
              }
              catch
              {
                MessageBox.Show("Archive is corrupted");
              }
              // Close archive
              zipForge1.CloseArchive();
             </code>
             <code lang="vbnet">
              zipForge1.FileName = "C:\TEST\test.zip";
              ' Create a new archive file
              ZipForge1.OpenArchive(System.IO.FileMode.Create)
              ' Let's encrypt all files
              ZipForge1.Password = "The password"
              ' Set path to folder with some text files to BaseDir
              ZipForge1.BaseDir = "Source"
              ' Do not compress MPEG3 files
              ZipForge1.NoCompressionMasks.Add("*.mp3")
              ' Add all files and directories from Source excluding text files to the archive
              ZipForge1.AddFiles("*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Directory, "*.txt")
              ' Set path to compressedStream folder            
              ZipForge1.BaseDir = "Dest"
              ' Extract all files and directories from the archive to BaseDir
              ' After extracting directory Dest should contain all files from folder
              ' Source excluding *.txt files
              ZipForge1.ExtractFiles("*.*")
              ' Use full path
              ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.FullPath
              ' Set path to compressedStream folder
              ZipForge1.BaseDir = "Source1"
              ' Move all text files from Source1 to the archive
              ' After moving directory Source1 should not contain any text files
              ZipForge1.MoveFiles("*.txt", System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Archive)
              ' Set path to current drive
              ZipForge1.BaseDir = System.IO.Directory.GetDirectoryRoot(System.IO.Directory.GetCurrentDirectory())
              ' Overwrite all files
              ZipForge1.Options.Overwrite = ComponentAce.Compression.ZipForge.OverwriteMode.Always
              ' Update all files excluding 1???.newDirItem* from Source1
              ZipForge1.UpdateFiles(DemoFolder + "\Source1\*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal, "2???.newDirItem*")
              ' Set temporary directory
              ZipForge1.TempDir = DemoFolder + "Temp"
              ' Test all files and directories in the archive
              Try
                ZipForge1.TestFiles("*.*")
              Catch
                MessageBox.Show("Archive is corrupted")
              End Try
              ' Use full path
              ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.RelativePath
              ZipForge1.BaseDir = "Dest1"
              ' Extract all files to Dest1
              ZipForge1.ExtractFiles("*.*")
              ' Close the archive
              ZipForge1.CloseArchive()
             </code>
             </example>
             <remarks>
             Use MoveFiles to move files to the open archive file. MoveFiles deletes all files after they will be added to the archive. If you need to add files to the archive without deleting source files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> instead of MoveFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, MoveFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles(System.String)">
             <summary>
             Moves files to archive using <paramref name="fileMask"/> parameter.
             </summary>
             <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
             <remarks>
             Use MoveFiles to move files to the open archive file. MoveFiles deletes all files after they will be added to the archive. If you need to add files to the archive without deleting source files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> instead of MoveFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, MoveFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles(System.String,System.IO.FileAttributes)">
             <summary>
             Moves files to archive using <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters.
             </summary>
             <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
             <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
             <remarks>
             Use MoveFiles to move files to the open archive file. MoveFiles deletes all files after they will be added to the archive. If you need to add files to the archive without deleting source files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> instead of MoveFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, MoveFiles will search files recursively.
            </remarks>           
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles(System.String,System.IO.FileAttributes,System.String)">
            <summary>
            Moves files to archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
            <param name="exclusionMask">Specifies files to be excluded from the move operation.</param>
            <remarks>
            Use MoveFiles to move files to the open archive file. MoveFiles deletes all files after they are added to the archive. If you need to add files to the archive without deleting source files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> instead of MoveFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, MoveFiles will search files recursively.
            <para>MoveFiles variant without parameters uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr to specify search conditions and to exclude files from move operation.</para>
            <para>The <paramref name="fileMask"/> parameter is the directory and file name mask, including wildcard characters. For example, 'C:\TEST\*.*' specifies all files in the C:\TEST directory. All files that meets FileMask and SearchAttr will be moved to the archive.</para>
            <para>The <paramref name="searchAttr"/> parameter specifies the special files to include in addition to all normal files.</para>
            <para>The <paramref name="exclusionMask"/> specifies files to be excluded from the move operation.</para>
            <para>If some errors occurs an exception will be raised. Write an <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event handler to perform your own error handling.</para>
            </remarks>          
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">
            <overloads>
            Opens or creates an archive file.
            </overloads>
            <summary>
            Opens or creates an archive file.
            </summary>
            <example> The following example shows how to add files to archive and extract them (note
            that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
            can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
            <code lang="C#">
             zipForge1.FileName ="C:\\TEST\\test.zip";
             // Create a new archive file
             zipForge1.OpenArchive(FileMode.Create);
             // Set path to folder with the files to archive
             zipForge1.BaseDir = "\\Source";
             // Add all files and directories from the backupFileStream folder to the archive
             zipForge1.AddFiles("*.*");
             // Set path to the compressedStream folder
             zipForge1.BaseDir = "\\Dest";
             // extract all files in archive
             zipForge1.ExtractFiles("*.*");
             // Close archive
             zipForge1.CloseArchive();
            </code>
            <code lang="vbnet">
             ' Set archive file name
             ZipForge1.FileName = "C:\TEST\test.zip"
             ' Create a new archive file
             ZipForge1.OpenArchive(System.IO.FileMode.Create)
             ' Set path to folder with the files to archive
             ZipForge1.BaseDir = DemoFolder + "\\Source"
             ' Add all files and directories from the backupFileStream folder to the archive
             ZipForge1.AddFiles("*.*")
             ' Set path to the compressedStream folder
             ZipForge1.BaseDir = DemoFolder + "\\Dest"
             ' extract all files in archive
             ZipForge1.ExtractFiles("*.*")
             ' Close archive
             ZipForge1.CloseArchive()
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive"/>
            <remarks>
            <para>Method OpenArchive without parameters creates a new archive if file specified with <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> doesn`t exists otherwise it will do an attempt to open an existing archive. To manually specify whether to create a new archive or open an existing, use overload of the OpenArchive method with parameters.</para>
            <para>Call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive"/> to close the archive file.</para>
            </remarks>                          
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive(System.IO.FileMode)">
            <summary>
            Opens of creates an archive file with specified <paramref name="fileMode"/> parameter.
            </summary>
            <param name="fileMode">Specifies open mode constant like in <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)"/>.</param>
            <remarks>
            Call OpenArchive to open or create an archive file. If file specified by the <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property does not exists and <paramref name="fileMode"/> parameter is set to Create (this is by default) or <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InMemory"/> property is set to <b>true</b> then OpenArchive will create and open it. OpenArchive sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <b>true</b>.
            <para>Call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive"/> to close the archive file.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens or creates an archive file with specified <paramref name="fileMode"/>  
            and <paramref name="fileAccess"/> parameters.
            </summary>
            <param name="fileMode">Specifies open mode constant like in <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)"/>.</param>
            <param name="fileAccess">Specifies file access mode like in <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)"/>.</param>
            <remarks>
            Call OpenArchive to open or create an archive file. If file specified by the <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property does not exists and <paramref name="fileMode"/> parameter is set to Create (this is by default) or <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InMemory"/> property is set to <b>true</b> then OpenArchive will create and open it. OpenArchive sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <b>true</b>.
            <para>Call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive"/> to close the archive file.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens or creates an archive file with specified <paramref name="fileMode"/>,
            <paramref name="fileAccess"/> and <paramref name="fileShare"/> parameters.
            </summary>
            <param name="fileMode">Specifies open mode constant like in TFileStream.Create or FileOpen function.</param>
            <param name="fileAccess">Specifies file access mode.</param>
            <param name="fileShare">Specifies file share mode.</param>
            <remarks>
            Call OpenArchive to open or create an archive file. If file specified by the <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property does not exists and <paramref name="fileMode"/> parameter is set to Create (this is by default) or <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InMemory"/> property is set to <b>true</b> then OpenArchive will create and open it. OpenArchive sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <b>true</b>.
            <para>Call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive"/> to close the archive file.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive(System.IO.Stream,System.Boolean)">
            <summary>
            Opens or creates an archive within a stream.
            </summary>
            <param name="stream">Specifies Stream descendant object with the archive contents.</param>
            <param name="create">Determines if file should be created.</param>
            <remarks>
            Call OpenArchive to open or create an archive in the stream. If <paramref name="create"/> parameter is set to <b>true</b> then OpenArchive will create and open it. OpenArchive sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <b>true</b>.
            <para>Call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive"/> to close the archive file.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles">
            <overloads>
            Tests files stored within the archive. 
            </overloads>
            <summary>
            Tests files stored within the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <example> The following example shows how to handle the archive file (note
            that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
            can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
            <code lang="C#">
             zipForge1.FileName = "C:\\TEST\\test.zip";
             // Create a new archive file
             zipForge1.OpenArchive(FileMode.Create);
             // Let's encrypt all files
             zipForge1.Password = "The password";
             // Set path to folder with some text files to BaseDir
             zipForge1.BaseDir = "Source";
             // Do not compress MPEG3 files
             zipForge1.NoCompressionMasks.Add("*.mp3");
             // Add all files and directories from Source excluding text files to the archive
             zipForge1.AddFiles("*.*", FileAttributes.Archive| 
             FileAttributes.Normal | FileAttributes.Directory, "*.txt");// Set path to compressedStream folder            
             zipForge1.BaseDir = "Dest";
             // Extract all files and directories from the archive to BaseDir
             // After extracting directory Dest should contain all files from folder
             // Source excluding *.txt files
             zipForge1.ExtractFiles("*.*");
             // Use full path
             zipForge1.Options.StorePath = StorePathMode.FullPath;
             // Set path to compressedStream folder
             zipForge1.BaseDir = "Source1";
             // Move all text files from Source1 to the archive
             // After moving directory Source1 should not contain any text files
             zipForge1.MoveFiles("*.txt", FileAttributes.Normal | FileAttributes.Archive);
             // Set path to current drive
             zipForge1.BaseDir = Directory.GetDirectoryRoot(Directory.GetCurrentDirectory());
             // Overwrite all files
             zipForge1.Options.Overwrite = OverwriteMode.Always;
             // Update all files excluding 1???.newDirItem* from Source1
             zipForge1.UpdateFiles(DemoFolder + "\\Source1\\*.*", FileAttributes.Archive | FileAttributes.Normal,       "2???.newDirItem*");
             // Set temporary directory
             zipForge1.TempDir = "Temp";
             // Test all files and directories in the archive
             try
             {
               zipForge1.TestFiles("*.*");
             }
             catch
             {
               MessageBox.Show("Archive is corrupted");
             }
             // Close archive
             zipForge1.CloseArchive();
            </code>
            <code lang="vbnet">
             zipForge1.FileName = "C:\TEST\test.zip";
             ' Create a new archive file
             ZipForge1.OpenArchive(System.IO.FileMode.Create)
             ' Let's encrypt all files
             ZipForge1.Password = "The password"
             ' Set path to folder with some text files to BaseDir
             ZipForge1.BaseDir = "Source"
             ' Do not compress MPEG3 files
             ZipForge1.NoCompressionMasks.Add("*.mp3")
             ' Add all files and directories from Source excluding text files to the archive
             ZipForge1.AddFiles("*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Directory, "*.txt")
             ' Set path to compressedStream folder            
             ZipForge1.BaseDir = "Dest"
             ' Extract all files and directories from the archive to BaseDir
             ' After extracting directory Dest should contain all files from folder
             ' Source excluding *.txt files
             ZipForge1.ExtractFiles("*.*")
             ' Use full path
             ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.FullPath
             ' Set path to compressedStream folder
             ZipForge1.BaseDir = "Source1"
             ' Move all text files from Source1 to the archive
             ' After moving directory Source1 should not contain any text files
             ZipForge1.MoveFiles("*.txt", System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Archive)
             ' Set path to current drive
             ZipForge1.BaseDir = System.IO.Directory.GetDirectoryRoot(System.IO.Directory.GetCurrentDirectory())
             ' Overwrite all files
             ZipForge1.Options.Overwrite = ComponentAce.Compression.ZipForge.OverwriteMode.Always
             ' Update all files excluding 1???.newDirItem* from Source1
             ZipForge1.UpdateFiles(DemoFolder + "\Source1\*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal, "2???.newDirItem*")
             ' Set temporary directory
             ZipForge1.TempDir = DemoFolder + "Temp"
             ' Test all files and directories in the archive
             Try
               ZipForge1.TestFiles("*.*")
             Catch
               MessageBox.Show("Archive is corrupted")
             End Try
             ' Use full path
             ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.RelativePath
             ZipForge1.BaseDir = "Dest1"
             ' Extract all files to Dest1
             ZipForge1.ExtractFiles("*.*")
             ' Close the archive
             ZipForge1.CloseArchive()
            </code>
            </example>
            <remarks>
            Use TestFiles to test files stored within the open archive file. TestFiles will delete these temporary files after testing. If errors occurs during test operation <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event will be triggered. If there is no event handler available then exception will be raised. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, TestFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles(System.String)">
            <summary>
            Tests files stored within the archive using <paramref name="fileMask"/> parameter.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <remarks>
            Use TestFiles to test files stored within the open archive file. TestFiles will delete these temporary files after testing. If errors occurs during test operation <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event will be triggered. If there is no event handler available then exception will be raised. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, TestFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles(System.String,System.IO.FileAttributes)">
            <summary>
            Tests files stored within the archive using <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
            <remarks>
            Use TestFiles to test files stored within the open archive file. TestFiles will delete these temporary files after testing. If errors occurs during test operation <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event will be triggered. If there is no event handler available then exception will be raised. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, TestFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles(System.String,System.IO.FileAttributes,System.String)">
            <summary>
            Tests files stored within the archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
            <param name="exclusionMask">Specifies files to be excluded from the test operation.</param>
            <remarks>
            Use TestFiles to test files stored within the open archive file. TestFiles will delete these temporary files after testing. If errors occurs during test operation <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event will be triggered. If there is no event handler available then exception will be raised. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, TestFiles will search files recursively.
            <para>TestFiles variant without parameters uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr to specify search conditions and to exclude files from test operation.</para>
            <para>The <paramref name="fileMask"/> parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. All files that meets FileMask and SearchAttr will be tested.</para>
            <para>The <paramref name="searchAttr"/> parameter specifies the special files to include in addition to all normal files.</para>
            <para>The <paramref name="exclusionMask"/> specifies files to be excluded from the test operation.</para>
            <para>Any transaction must be finished before calling TestFiles. Otherwise an exception will be raised. Also if some other errors occurs an exception will be raised. Write an <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event handler to perform your own error handling.</para>
            </remarks>          
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles">
             <overloads>
             Updates files stored within the archive.
             </overloads>
             <summary>
             Updates files stored within the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
             </summary>
             <example> The following example shows how to handle the archive file (note
             that this example uses <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see> class, however you
             can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see>):
             <code lang="C#">
              zipForge1.FileName = "C:\\TEST\\test.zip";
              // Create a new archive file
              zipForge1.OpenArchive(FileMode.Create);
              // Let's encrypt all files
              zipForge1.Password = "The password";
              // Set path to folder with some text files to BaseDir
              zipForge1.BaseDir = "Source";
              // Do not compress MPEG3 files
              zipForge1.NoCompressionMasks.Add("*.mp3");
              // Add all files and directories from Source excluding text files to the archive
              zipForge1.AddFiles("*.*", FileAttributes.Archive| 
              FileAttributes.Normal | FileAttributes.Directory, "*.txt");// Set path to compressedStream folder            
              zipForge1.BaseDir = "Dest";
              // Extract all files and directories from the archive to BaseDir
              // After extracting directory Dest should contain all files from folder
              // Source excluding *.txt files
              zipForge1.ExtractFiles("*.*");
              // Use full path
              zipForge1.Options.StorePath = StorePathMode.FullPath;
              // Set path to compressedStream folder
              zipForge1.BaseDir = "Source1";
              // Move all text files from Source1 to the archive
              // After moving directory Source1 should not contain any text files
              zipForge1.MoveFiles("*.txt", FileAttributes.Normal | FileAttributes.Archive);
              // Set path to current drive
              zipForge1.BaseDir = Directory.GetDirectoryRoot(Directory.GetCurrentDirectory());
              // Overwrite all files
              zipForge1.Options.Overwrite = OverwriteMode.Always;
              // Update all files excluding 1???.newDirItem* from Source1
              zipForge1.UpdateFiles(DemoFolder + "\\Source1\\*.*", FileAttributes.Archive | FileAttributes.Normal,       "2???.newDirItem*");
              // Set temporary directory
              zipForge1.TempDir = "Temp";
              // Test all files and directories in the archive
              try
              {
                zipForge1.TestFiles("*.*");
              }
              catch
              {
                MessageBox.Show("Archive is corrupted");
              }
              // Close archive
              zipForge1.CloseArchive();
             </code>
             <code lang="vbnet">
              zipForge1.FileName = "C:\TEST\test.zip";
              ' Create a new archive file
              ZipForge1.OpenArchive(System.IO.FileMode.Create)
              ' Let's encrypt all files
              ZipForge1.Password = "The password"
              ' Set path to folder with some text files to BaseDir
              ZipForge1.BaseDir = "Source"
              ' Do not compress MPEG3 files
              ZipForge1.NoCompressionMasks.Add("*.mp3")
              ' Add all files and directories from Source excluding text files to the archive
              ZipForge1.AddFiles("*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Directory, "*.txt")
              ' Set path to compressedStream folder            
              ZipForge1.BaseDir = "Dest"
              ' Extract all files and directories from the archive to BaseDir
              ' After extracting directory Dest should contain all files from folder
              ' Source excluding *.txt files
              ZipForge1.ExtractFiles("*.*")
              ' Use full path
              ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.FullPath
              ' Set path to compressedStream folder
              ZipForge1.BaseDir = "Source1"
              ' Move all text files from Source1 to the archive
              ' After moving directory Source1 should not contain any text files
              ZipForge1.MoveFiles("*.txt", System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Archive)
              ' Set path to current drive
              ZipForge1.BaseDir = System.IO.Directory.GetDirectoryRoot(System.IO.Directory.GetCurrentDirectory())
              ' Overwrite all files
              ZipForge1.Options.Overwrite = ComponentAce.Compression.ZipForge.OverwriteMode.Always
              ' Update all files excluding 1???.newDirItem* from Source1
              ZipForge1.UpdateFiles(DemoFolder + "\Source1\*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal, "2???.newDirItem*")
              ' Set temporary directory
              ZipForge1.TempDir = DemoFolder + "Temp"
              ' Test all files and directories in the archive
              Try
                ZipForge1.TestFiles("*.*")
              Catch
                MessageBox.Show("Archive is corrupted")
              End Try
              ' Use full path
              ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.RelativePath
              ZipForge1.BaseDir = "Dest1"
              ' Extract all files to Dest1
              ZipForge1.ExtractFiles("*.*")
              ' Close the archive
              ZipForge1.CloseArchive()
             </code>
             </example>
             <remarks>
             Use UpdateFiles to update files stored within the open archive file. UpdateFiles searches 
             for external files specified by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.BaseDir"/> property and synchronizes them 
             with files stored within the archive. UpdateFiles uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.OverwriteMode 
             to determine how to overwrite existing files inside the archive with external files from 
             BaseDir. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, UpdateFiles will search 
             files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles(System.String)">
             <summary>
             Updates files stored within the archive using <paramref name="fileMask"/> parameter.
             </summary>
             <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
             <remarks>
             Use UpdateFiles to update files stored within the open archive file. UpdateFiles searches for 
             external files specified by <paramref name="fileMask"/> parameter and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.BaseDir"/> property and 
             synchronizes them with files stored within the archive. UpdateFiles uses 
             <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.OverwriteMode to determine how to overwrite existing files 
             inside the archive with external files from BaseDir. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is 
             set to <b>true</b>, UpdateFiles will search files recursively.
            </remarks>           
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles(System.String,System.IO.FileAttributes)">
             <summary>
             Updates files stored within the archive using <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters.
             </summary>
             <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
             <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
             <remarks>
             Use UpdateFiles to update files stored within the open archive file. UpdateFiles searches for 
             external files specified by <paramref name="fileMask"/> and <paramref name="searchAttr"/> 
             parameters and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.BaseDir"/> property and synchronizes them with files stored within 
             the archive. UpdateFiles uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.OverwriteMode to determine how to 
             overwrite existing files inside the archive with external files from BaseDir. 
             If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, UpdateFiles will search 
             files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles(System.String,System.IO.FileAttributes,System.String)">
            <summary>
            Updates files stored within the archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
            <param name="exclusionMask">Specifies files to be excluded from the move operation.</param>
            <remarks>
            Use UpdateFiles to update files stored within the open archive file. UpdateFiles searches for external files specified by <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.BaseDir"/> property and synchronizes them with files stored within the archive. UpdateFiles uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.OverwriteMode to determine how to overwrite existing files inside the archive with external files from BaseDir. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, UpdateFiles will search files recursively.
            <para>UpdateFiles variant without parameters uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr to specify search conditions and to exclude files from update operation.</para>
            <para>The <paramref name="fileMask"/> parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. All files that meets FileMask and SearchAttr will be updated.</para>
            <para>The <paramref name="searchAttr"/> parameter specifies the special files to include in addition to all normal files.</para>
            <para>The <paramref name="exclusionMask"/> specifies files to be excluded from the update operation.</para>
            <para>If some errors occurs an exception will be raised. Write an <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event handler to perform your own error handling. </para>
            </remarks>          
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFromFileRest(System.Int32,System.IO.Stream,System.Int64,System.IO.Stream)">
            <summary>
            Saves changed item, specified by <paramref name="itemNo"/> to the <paramref name="compressedStream"/>.
            </summary>
            <param name="itemNo">Number of the item to save.</param>
            <param name="backupFileStream">The backup file stream.</param>
            <param name="backupOffset">Offset in the backup stream.</param>
            <param name="compressedStream">The compressed stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetItemNoInBackupArray(System.Int32)">
            <summary>
            Gets the item no in backup array.
            </summary>
            <param name="itemNo">The item no.</param>
            <returns>Number of the item in the ItemsArrayBackup which corresponds the item with the number specified by <paramref name="itemNo"/>. If such item can not be found, -1 returns.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.SaveRenamedItemToArchive(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Saves the renamed item from backup file stream to archive.
            </summary>
            <param name="backupFileStream">The backup file stream.</param>
            <param name="compressedStream">The compressed stream.</param>
            <param name="itemNo">Number of the item to save.</param>
            <param name="itemNoInBackupArray">Number of the item in backup array.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetEndOfTheDataStreamPosition(System.Int32)">
            <summary>
            Gets the offset of the end of the data in the archive stream.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <returns>Offset of the end of data stream.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFromNewSource(System.Int32,System.IO.Stream,ComponentAce.Compression.Archiver.FailureAction@)">
            <summary>
            Saves new item to the archive.
            </summary>
            <param name="itemNo">Number of the item to save.</param>
            <param name="compressedStream">Stream to save.</param>
            <param name="action">Action taken on error.</param>
            <returns><b>True</b> if everything is OK, otherwise <b>false</b></returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BackupFileRest(System.Int32,System.String@,System.IO.Stream@)">
            <summary>
            Backups from the beginning of the item specified with <paramref name="itemNo"/> to the very end.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="tempFileName">Name of the file where data were backed up.</param>
            <param name="backupFileStream">The backup file stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseStream(System.Int32,System.IO.Stream@,System.Int64)">
            <summary>
            Closes stream of the item specified with <paramref name="itemNo"/>.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="currentItemStream">Stream of the item specified with <paramref name="itemNo"/>.</param>
            <param name="oldPosition">The position to restore in case of stream for item specified with <paramref name="itemNo"/> not null and should not be destroyed.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFileRest(System.IO.Stream@,System.String)">
            <summary>
            Closes <paramref name="backupFileStream"/> and deletes the file specified with <paramref name="tempFileName"/>.
            </summary>
            <param name="backupFileStream">The backup file stream.</param>
            <param name="tempFileName">Name of the temporary file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFilesAfterMove">
            <summary>
            Deletes files after move.
            </summary>
            <returns><b>True</b> if everything is OK, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoCompress(System.Boolean,ComponentAce.Compression.Interfaces.IItem,System.Int32,System.IO.Stream,System.IO.Stream,System.Int64@,System.Int64@,System.UInt32@)">
            <summary>
            Performs compression.
            </summary>
            <param name="encrypted">Determines whether need to encrypt file in the archive.</param>
            <param name="item">The item to compress.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="streamCompressFrom">The stream to compress from.</param>
            <param name="streamCompressTo">The stream to compress to.</param>
            <param name="count">Count of processed bytes.</param>
            <param name="compSize">Compression size.</param>
            <param name="fcrc32">CRC32 of compressed data.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetIndexOfFirstChange">
            <summary>
            Gets the itemNo of the first item that was modified.
            </summary>
            <returns>Index of the item.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.InternalCompressFile(System.IO.Stream,System.IO.Stream,ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Performs <paramref name="item"/> compression.
            </summary>
            <param name="currentItemStream">The current item stream.</param>
            <param name="compressedStream">The compressed stream.</param>
            <param name="item">The item.</param>
            <returns><b>True</b> if all data was compressed successfully, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.RestoreFileRest(System.Int32,System.IO.Stream@,System.Int64,System.String)">
            <summary>
            Copies from <paramref name="backupFileStream"/> to archive the first <paramref name="backupOffset"/> bytes and closes <paramref name="backupFileStream"/> and removes <paramref name="tempFileName"/>.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="backupFileStream">The backup file stream.</param>
            <param name="backupOffset">The backup offset.</param>
            <param name="tempFileName">Name of the temporary file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.Rollback(System.IO.Stream@,System.Int32,System.Int64,System.String)">
            <summary>
            Rollbacks all changes and restores the item specified with <paramref name="chgItemNo"/>.
            </summary>
            <param name="backupFileStream">The backup file stream.</param>
            <param name="chgItemNo">Number of the item that changed.</param>
            <param name="backupOffset">The backup offset.</param>
            <param name="tempFileName">Name of the temporary file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddNewItemToArchive(ComponentAce.Compression.Archiver.BaseArchiveItem,System.Boolean)">
            <summary>
            Adds new item to the _itemsHandler and initializes it from <paramref name="item"/>.
            </summary>
            <param name="item">The item to add.</param>
            <param name="move">if set to <c>true</c> then operation for the item is move, otherwise - add.</param>
            <returns>Number of the added item. If add failed or process was not been confirmed -1 returns.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.InitializeNewItem(ComponentAce.Compression.Archiver.BaseArchiveItem)">
            <summary>
            Adds new item to the _itemsHandler and initializes it from <paramref name="item"/>. If _itemsHandler already contains item with <paramref name="item"/>.FullName, then execution determines by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Overwrite.
            </summary>
            <param name="item">The item to add.</param>
            <returns>Number of the added item. If add failed or process was not been confirmed -1 returns.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddNewItemToItemsHandler">
            <summary>
            Adds the new item to items handler.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CopyItem(ComponentAce.Compression.Archiver.BaseArchiveItem,ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Copies <paramref name="source"/> to <paramref name="destination"/>.
            </summary>
            <param name="source">The source item.</param>
            <param name="destination">The destination item.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetLastModificationDateTime(ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Gets the last modification date time for the <paramref name="item"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>Modification time.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CheckInactive">
            <summary>
            Checks whether archive is opened.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CheckInUpdate">
            <summary>
            Checks whether archive is updating.    
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CheckNameMatchInMaskList(System.String,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
            Checks whether the <paramref name="name"/> matches <paramref name="maskList"/>.
            </summary>
            <param name="name">The name to check for matching.</param>
            <param name="maskList">The masks list.</param>
            <param name="isDir">Determines whether <paramref name="name"/> specifies directory.</param>
            <returns><b>True</b> if <paramref name="name"/> matches, otherwise <b>false</b></returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CreateNewArchiveItem(System.String,System.String,ComponentAce.Compression.Archiver.StorePathMode)">
            <summary>
            Creates the new archive item.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="baseDir">The base directory.</param>
            <param name="storePathMode">The store path mode.</param>
            <returns>Archive item.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CreateNewItemsHandler(System.IO.Stream,System.Boolean)">
            <summary>
            Creates the new items handler.
            </summary>
            <param name="stream">The compressed stream.</param>
            <param name="create">If set to <c>false</c> then fill items handler from <paramref name="stream"/>.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteItem(System.Int32)">
            <summary>
            Deletes the item specified with <paramref name="itemNo"/>.
            </summary>
            <param name="itemNo">Number of the item to delete.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteTaggedFile(System.Int32)">
            <summary>
            Deletes the item specified with <paramref name="itemNo"/>.
            </summary>
            <param name="itemNo">Number of the item to delete.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoAfterOpen">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnAfterOpen"/> event.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoOnConfirmOverwrite(System.String,System.String@,System.Boolean@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnConfirmOverwrite"/> event if it has any subscribers or shows a dialog to choose an action.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the destination file.</param>
            <param name="confirm">Confirm determines if file is overwritten. 
            Set confirm to <b>false</b> if you want to cancel overwriting existing file. 
            Default value for confirm is <b>true</b>.</param>
            <param name="cancel">Cancel determines if the current operation should be canceled. 
            Set cancel to <b>true</b> to cancel the current operation.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoOnConfirmProcessFile(System.String,ComponentAce.Compression.Archiver.ProcessOperation,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnConfirmProcessFile"/> event if it has any subscribers, otherwise set <paramref name="confirm"/> to true.
            </summary>
            <param name="fileName">Indicates current file name.</param>
            <param name="operation">Indicates current archive operation.</param>
            <param name="confirm">Confirm determines if current operation on the current
            file is executed. Set Confirm to <b>false</b> if you want to cancel executing 
            of the current operation on the file. Default value for Confirm is <b>true</b>.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoOnExtractFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the OnExtractFile event if it has any subscribers.
            </summary>
            <param name="item">Specifies the archive item being extracted from the archive.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoOnFileProgress(System.String,System.Double,System.TimeSpan,System.TimeSpan,ComponentAce.Compression.Archiver.ProcessOperation,ComponentAce.Compression.Archiver.ProgressPhase,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnFileProgress"/> event if it has any subscribers, otherwise set <paramref name="cancel"/> to <b>false</b>.
            </summary>
            <param name="fileName">Indicates current file name.</param>
            <param name="progress">Indicates progress for the current group operation in percents.</param>
            <param name="timeElapsed">Indicates time elapsed from the beginning of the operation</param>
            <param name="timeLeft">Indicates time left for the operation to be finished</param>
            <param name="operation">Indicates current archive operation.</param>
            <param name="progressPhase">Indicates the progress <see cref="T:ComponentAce.Compression.Archiver.ProgressPhase">phase</see> of the operation.</param>
            <param name="cancel">Cancel determines if current operation on the current file should be cancelled. Set cancel parameter to <b>true</b> if you want to cancel executing of the current operation on the file. Default value for Cancel is <b>false</b>.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoOnOverallProgress(System.Double,System.TimeSpan,System.TimeSpan,ComponentAce.Compression.Archiver.ProcessOperation,ComponentAce.Compression.Archiver.ProgressPhase,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnOverallProgress"/> event if it has any subscribers, otherwise set <paramref name="cancel"/> to <b>false</b>.
            </summary>
            <param name="progress">Indicates progress for the current group operation in percents.</param>
            <param name="timeElapsed">Indicates time elapsed from the beginning of the operation</param>
            <param name="timeLeft">Indicates time left for the operation to be finished</param>
            <param name="operation">Indicates current archive operation.</param>
            <param name="progressPhase">Indicates the progress <see cref="T:ComponentAce.Compression.Archiver.ProgressPhase">phase</see> of the operation.</param>
            <param name="cancel">Cancel determines if current group operation should be cancelled. Set Cancel to <b>true</b> if you want to cancel executing of the current group operation. Default value for Cancel is <b>false</b>.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoOnProcessFileFailure(System.String,ComponentAce.Compression.Archiver.ProcessOperation,ComponentAce.Compression.Archiver.ErrorCode,System.Object[],System.String,System.Exception,ComponentAce.Compression.Archiver.FailureAction@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event if it has any subscribers, otherwise throws an exception.
            </summary>
            <param name="fileName">Indicates current file name.</param>
            <param name="operation">Indicates current archive operation.</param>
            <param name="errorCode">Indicates common type of the error. See the <see cref="T:ComponentAce.Compression.Archiver.ErrorCode"/> topic for details on error types.</param>
            <param name="args">Arguments for the exception.</param>
            <param name="errorMessage">Indicates error message text.</param>
            <param name="innerException">The inner exception.</param>
            <param name="action">Specifies whether the operation with the file should be retried, aborted or the error is to be ignored to process the next file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoOnStoreFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the OnStoreFile event if it has any subscribers.
            </summary>
            <param name="item">Specifies the archive item being added to the archive.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractItem(System.Int32,System.IO.Stream)">
            <summary>
            Extracts the item specified with <paramref name="itemNo"/> to the <paramref name="destStream"/>. This method is used by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractTaggedFile(System.Int32,System.String,System.String,System.Boolean@)"/>
            </summary>
            <param name="itemNo">Number of the item to extract.</param>
            <param name="destStream">Destination stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractTaggedFile(System.Int32,System.String,System.String,System.Boolean@)">
            <summary>
            Extracts the item specified with <paramref name="itemNo"/>.
            </summary>
            <param name="itemNo">Number of the item to be extracted.</param>
            <param name="fileName">Name of the file.</param>
            <param name="path">Directory to save file.</param>
            <param name="cancel">If set to <c>true</c> cancel extraction.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.SetFileLastWriteTime(System.Int32,System.IO.FileStream)">
            <summary>
            Sets the file last write time.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="fileStream">The file stream for which last write time will be set.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.FillDirItem(System.Int32,System.String)">
            <summary>
            Initializes the item specified with <paramref name="itemNo"/> by the file specified by <paramref name="fileName"/>.
            </summary>
            <param name="itemNo">Number of the item to initialize.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ForceUpdate">
            <summary>
            Saves all changes to the archive.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CalculateBackupOffset(System.Int32,System.Int64@)">
            <summary>
            Calculates the backup offset for the item specified with <paramref name="chgItemNo"/>.
            </summary>
            <param name="chgItemNo">Number of the item.</param>
            <param name="backupOffset">The backup offset.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CalculateTotalProcessFilesSize(System.Int32@)">
            <summary>
            Calculates total bytes to process and save to to _toProcessFilesTotalSize.
            </summary>
            <param name="firstItemNo">Number of the first modified item.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetBlockSize(ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Gets the size of the block.
            </summary>
            <param name="item">The item.</param>
            <returns>Size of the block.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetFullMask(System.String,System.String,System.Boolean@)">
            <summary>
            Gets the full mask.
            </summary>
            <param name="mask">The mask.</param>
            <param name="baseDir">The base directory.</param>
            <param name="recurse">Determines whether to process recursively.</param>
            <returns>Full mask</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetInUpdate">
            <summary>
            Determines if archive is updating.
            </summary>
            <returns><b>True</b> if archive is in update, otherwise - <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetTempFileName">
            <summary>
            Gets the name of the temporary file.
            </summary>
            <returns>Temporary file name.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.InitDirItem(System.Int32,System.Boolean)">
            <summary>
            Initializes item.
            </summary>
            <param name="itemNo">Number of the item to initialize.</param>
            <param name="isDirectory">Determines if item is directory.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.InternalAddFiles(System.Collections.Specialized.StringCollection,System.UInt32,System.Collections.Specialized.StringCollection,System.Boolean,System.Boolean)">
            <summary>
            Adds files to the archive.
            </summary>
            <param name="fileMasks">The masks specified files to add.</param>
            <param name="searchAttr">The search attributes.</param>
            <param name="exclusionMasks">The masks specifies the files not to add.</param>
            <param name="move">If set to <c>true</c> file will be moved (source file will be deleted after compress), otherwise source file will be remained.</param>
            <param name="recurse">If set to <c>true</c> operation will produce recursevely.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.RenameFile(System.String,System.String)">
            <summary>
            Renames file stored within the current archive file.
            </summary>
            <remarks>
            Call RenameFile to rename file stored in the open archive.
            </remarks>
            <param name="oldName">Specifies file to be renamed.</param>
            <param name="newName">Specifies new name for the file.</param>
            <example>
            Following example shows how to rename one file in the archive (note that this
            example uses <see cref="T:ComponentAce.Compression.Tar.TarForge">TarForge</see> class, however you can use <see cref="T:ComponentAce.Compression.GZip.GzipForge">GzipForge</see> or <see cref="T:ComponentAce.Compression.Tgz.TgzForge">TgzForge</see> or <see cref="N:ComponentAce.Compression.ZipForge">ZipForge</see>): 
            <code lang="vbnet">
            ' Create a new instance of tar archive object.
            Dim tarForge As New TarForge()
            ' Set the directory where files will be searched for add operation.
            tarForge.BaseDir = "Tests\Source\Files"
            ' Specify the name for the tar archive file.
            tarForge.FileName = "Tests\Temp\archive.tar"
            ' Create and open the new archive.
            tarForge.OpenArchive(FileMode.Create)
            ' The mask '*.*' specifies all files to add. To prevent adding several files
            ' you can specify any other file name mask, including wildcard characters.
            tarForge.AddFiles("*.*")
            ' Rename the file.
            ' The old name of the file to rename.
            ' The new name of the file.
            tarForge.RenameFile("test1.1", "newname.txt")
            ' Close the archive.
            tarForge.CloseArchive()</code>
            <code lang="C#">
            // Create a new instance of tar archive object.
            TarForge tarForge = new TarForge();
            // Set the directory where files will be searched for add operation.
            tarForge.BaseDir = @"..\..\..\..\..\Tests\Source\Files";
            // Specify the name for the tar archive file.
            tarForge.FileName = @"..\..\..\..\..\Tests\Temp\archive.tar";
            // Create and open the new archive.
            tarForge.OpenArchive(FileMode.Create);
            // The mask '*.*' specifies all files to add. To prevent adding several files
            // you can specify any other file name mask, including wildcard characters.
            tarForge.AddFiles("*.*");
            // Rename the file.
            tarForge.RenameFile(
            "test1.1",		// The old name of the file to rename.
            "newname.txt"	// The new name of the file.
            );
            // Close the archive.
            tarForge.CloseArchive();</code>
            </example>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.InternalCreateArchive">
            <summary>
            Creates _compressedStream and _itemsHandler.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.InternalOpenArchive">
            <summary>
            Opens the archive.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.IsExternalFileMatchMask(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether the file specified with <paramref name="fileName"/> matches to the <paramref name="fileMask"/>.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileMask">The file mask.</param>
            <param name="isDir">Determines if <paramref name="fileName"/> specifies directory.</param>
            <returns>
            	<c>true</c> if file specified with <paramref name="fileName"/> matches to the <paramref name="fileMask"/>, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenFileStream">
            <summary>
            Opens the _compressedStream with parameters specified by _fileName, _fileOpenMode, _fileOpenAccess, _fileOpenShare.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ProcessFile(System.String,System.Collections.Specialized.StringCollection,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Processes the file.
            </summary>
            <param name="paramFileName">Name of the file.</param>
            <param name="exclusionMasks">The exclusion masks.</param>
            <param name="startDir">The start directory.</param>
            <param name="baseDir">The base directory.</param>
            <param name="move">Determines whether to move file or simply add to the archive.</param>
            <param name="retrieveFileDate">Determines whether to retrieve file date and time or not.</param>
            <param name="retrieveAttributes">Determines whether to retrieve file attributes or not.</param>
            <returns><b>True</b> if file matches, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ProcessTaggedFile(ComponentAce.Compression.Archiver.ProcessOperation,System.Int32)">
            <summary>
            Processes the tagged file (extract, delete, test, update).
            </summary>
            <param name="operation">Operation that would be executed on the item specified with <paramref name="itemNo"/>.</param>
            <param name="itemNo">Number of the item.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ProcessTaggedFiles(ComponentAce.Compression.Archiver.ProcessOperation)">
            <summary>
            Processes the <paramref name="operation"/> on the tagged files.
            </summary>
            <param name="operation">Operation that would be executed on the item.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddItem(ComponentAce.Compression.Archiver.BaseArchiveItem)">
            <summary>
            Adds a file specified in the <paramref name="item"/> to the archive.
            </summary>
            <param name="item">Archive item to be added to the archive</param>
            <remarks>Use AddItem method to add file with the given properties, such as comments, attributes, modification date, etc.</remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.RecursiveProcess(System.String,System.String,System.String,System.Collections.Specialized.StringCollection,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Processes files recursively.
            </summary>
            <param name="startDir">The start directory.</param>
            <param name="baseDir">The base directory.</param>
            <param name="mask">The inclusion mask.</param>
            <param name="exclusionMasks">The exclusion masks.</param>
            <param name="searchAttr">The search attributes.</param>
            <param name="recurse">Determines whether to process directories recursively.</param>
            <param name="move">Determines whether to move file or simply add to the archive.</param>
            <param name="retrieveFileDate">Determines whether to retrieve file date and time or not.</param>
            <param name="retrieveAttributes">Determines whether to retrieve file attributes or not.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.SetActive(System.Boolean)">
            <summary>
            Opens or closes archive based on <paramref name="value"/> value.
            </summary>
            <param name="value">If set to <c>true</c> archive will be opened if it has not been already opened..</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.SetInMemory(System.Boolean)">
            <summary>
            Sets archive to memory or to the file based on <paramref name="value"/> value.
            </summary>
            <param name="value">If set to <c>true</c> archive will be stored to the memory if it has not been already done it.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TagFiles">
            <summary>
            Tags all items.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TagFiles(System.String,System.IO.FileAttributes,System.String)">
            <summary>
            Tags items based on <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The file mask.</param>
            <param name="searchAttr">The search attributes.</param>
            <param name="exclusionMask">The exclusion mask.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestTaggedFile(System.Int32,System.String)">
            <summary>
            Tests the tagged file.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="fileName">Name of the file where item will be extracted to.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateItem(System.Int32,System.String)">
            <summary>
            Updates the item with the file specified with <paramref name="srcFileName"/>.
            </summary>
            <param name="itemNo">Number of the item to update.</param>
            <param name="srcFileName">Name of the source file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateTaggedFile(System.Int32,System.String,System.String)">
            <summary>
            Updates the tagged file.
            </summary>
            <param name="itemNo">Number of the item to update.</param>
            <param name="fileName">Name of the file.</param>
            <param name="path">Path to the file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoOnWriteToStreamFailure(System.Exception,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnIOError"/> event if it has any subscribers, otherwise throws exception.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="cancel">Determines necessity of cancellation.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DoOnReadFromStreamFailure(System.Exception,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnReadFromStreamFailure"/> event if it has any subscribers, otherwise throws exception.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="cancel">Determines necessity of cancellation.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetExists">
            <summary>
            Checks if archive file exists.
            </summary>
            <returns><b>True</b> if file name specified with <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> exists, otherwise - <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <see cref="T:ComponentAce.Compression.Interfaces.IArchiveItem"/> in the archive.
            </summary>
            <seealso cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Current"/>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveNext"/>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.Reset"/>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveNext">
            <summary>
            Advances the enumerator to the next <see cref="T:ComponentAce.Compression.Interfaces.IArchiveItem"/>.
            </summary>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetEnumerator"/>
            <seealso cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Current"/>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.Reset"/>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; 
            <b>false</b> if the enumerator already points to the end of the collection.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.Reset">
            <summary>
            Sets the enumerator to its initial position, which is the first element.
            </summary>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetEnumerator"/>
            <seealso cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Current"/>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveNext"/>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnAfterOpen">
            <summary>
            Occurs after an application completes opening the archive file.
            </summary>
            <remarks>
            Write an AfterOpen event handler to take specific action immediately 
            after an application <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">opens</see> the archive file.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnConfirmOverwrite">
            <summary>
            Occurs before an application will have overwritten an existing file.
            </summary>
            <remarks>
            Write a OnConfirmOverwrite event handler to perform some specific actions 
            before overwriting the file or to cancel it. OnConfirmOverwrite event can 
            be triggered by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> before 
            overwriting the existing file if <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Overwrite = <see cref="T:ComponentAce.Compression.Archiver.OverwriteMode"/>.Prompt.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnConfirmProcessFile">
            <summary>
            Occurs before archive group operations.
            </summary>
            <remarks>
            Write an OnConfirmProcessFile event handler to perform some specific 
            actions before executing an archive operation or to cancel it. OnConfirmProcessFile 
            event can be triggered by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/>,
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> before executing 
            operation on the current file.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnFileProgress">
            <summary>
            Occurs when archive operation with a file updates a progress indication value.
            </summary>
            <remarks>
            Write an OnFileProgress event handler to display progress of the current 
            operation or to cancel it. OnFileProgress event is triggered by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> when current 
            archive operation with a file updates a progress indication value.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnOverallProgress">
            <summary>
            Occurs when archive operation with a group of files updates a 
            progress indication value.
            </summary>
            <remarks>
            Write an OnOverallProgress event handler to display progress of the 
            operation on a group of files or to cancel it. OnOverallProgress event 
            is triggered by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> when current 
            archive operation on a group of files updates a progress indication value.
            </remarks> 
        </member>
        <member name="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure">
            <summary>
            Occurs in case of failure of the current operation.
            </summary>
            <remarks>
            Write an OnProcessFileFailure event handler to perform some 
            specific actions when archive operation fails. OnProcessFileFailure 
            event is triggered by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> if any file error 
            occurs in the listed methods. If you will not specify event handler for 
            OnProcessFileFailure any error will raise an exception.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileCount">
            <summary>
            Indicates the number of files in the archive file.
            </summary>
            <remarks>
            Read FileCount at runtime to determine number of files within an archive file. The archive file must be opened before you can use this property. If the archive does not exist, create it using the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive"/> method. Archive file is specified by the <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property.
            <para>This property is read-only.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Size">
            <summary>
            Indicates the size in bytes of the opened archive file.
            </summary>
            <remarks>
            The archive file must be opened before you can use this property. If the archive does not exist, create it using the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive"/> method. Archive file is specified by the <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property.
            <para> This property is read-only.</para>
            </remarks> 
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InUpdate">
            <summary>
            Indicates if an archive file is being updated.
            </summary>
            <remarks>
            Use InUpdate property to determine if the archive file is being updated. Call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.EndUpdate"/> if you need to force transaction system to complete current operation immediately.
            <para> This property is read-only.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Exists">
            <summary>
            Indicates whether the archive file exists.
            </summary>
            <remarks>
            Read Exists at runtime to determine whether an archive file exists. If the archive does not exist, create it using the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive"/> method. Archive file is specified by the <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property.
            <Para>This property is read-only.</Para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active">
             <summary>
             Specifies whether or not an archive file is open.
             </summary>
             <remarks>Use Active to determine if archive file is opened or to open it. When Active is <b>false</b>, the archive is closed. When Active is <b>true</b>, archive file management is available.
             <para>Setting Active to <b>true</b>: </para>
             <li> Opens archive specified by the <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property</li>
             <li>Triggers the AfterOpen event handler if one is defined for this component.</li>
             <para>If an error occurs while opening the archive exception will be raised and archive file will be closed.</para>
             <para>An application must set Active to <b>false</b> before creating new archive by calling <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive(System.IO.FileMode)"/> with Create mode.</para>
             <para>Calling the OpenArchive method sets Active to <b>true</b>; calling the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive"/> method sets Active to <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.BaseDir">
            <summary>
            Specifies default path for archive operations.
            </summary>
            <remarks>
            When files are extracted from archive with <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> all files and directories will be extracted to path specified by BaseDir. Also <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/> and <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/> will use BaseDir as a default path to external files.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks">
            <summary>
            Specifies files to be excluded from archive operations.
            </summary>
            <remarks>
            ExclusionMasks are used for overloaded versions without parameters of <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/> and <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles"/> methods to exclude certain files for these operations. This property should contain list of excluded directories and file names including wildcard characters. For example, 'C:\TEST\*.*' specifies all files in the C:\TEST directory.
            <para>Three types of exclusion masks can be specified:
            <list type="number">
            <item>
            <description>A mask for the whole BaseDir and all its sub-folders.</description>
            </item>
            <item>
            <description>A mask for the BaseDir only.</description>
            </item>
            <item>
            <description>A mask for an exact full path.</description>
            </item>
            </list>
            </para>
            <para>For example:
            <list type="number">
            <item>
            <description>*.txt  - exclude *.txt in the BaseDir and its sub-folders</description>
            </item>
            <item>
            <description>\*.txt - exclude *.txt files in the BaseDir only</description>
            </item>
            <item>
            <description>C:\The\Full\Path\*.txt - exclude the *.txt files only in the C:\The\Full\Path folder.</description>
            </item>
            </list>
            </para>
            <para><see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> property specifies files that should be included into the operation, excluding files specified by ExclusionMasks.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks">
            <summary>
            Specifies files or wildcards for archiver operations.
            </summary>
            <remarks>
            FileMasks are used for overloaded versions without parameters of <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/> and <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles"/> methods to select certain files for these operations. This property should contain list of directories and file names including wildcard characters. For example, "C:\\TEST\\*.*" specifies all files in the C:\TEST directory.
            <para>FileMasks property specifies files that should be included into the operation, excluding files specified by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/>.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName">
            <summary>
            Specifies the archive file name.
            </summary>
            <remarks>
            Use FileName to specify the archive file before calling <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive"/> procedure.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InMemory">
            <summary>
            Indicates if an archive file is stored in memory.
            </summary>
            <remarks>
            Indicates whether the current archive file is stored in memory (RAM).
            Set this property to <b>true</b> when you want to <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">create</see> a new or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> an existing archive file in memory. If you set it to <b>false</b> file will be opened or created on disk, with the name defined by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property.
                Setting InMemory to <b>false</b> when archive file is opened will cause writing the content of the archive file to disk. Set this property to <b>true</b> when you need to load content of the archive file into memory.
                <para> It is not recommended to set InMemory to <b>true</b> with large archive files. ZipForge.NET includes transaction system that optimizes the speed of archives updating.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.OemCodePage">
            <summary>
            Gets the number of the OEM code page used to store and restore archive.
            </summary>
            <value>The OEM code page.</value>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options">
            <summary>
            Specifies the options for archiving operations.
            </summary>
            <remarks>
            Specify necessary <see cref="T:ComponentAce.Compression.Archiver.ArchiverOptions">Options</see> for archiving operations.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnIOError">
            <summary>
            Occurs in a case of failure of writing to stream operation.
            </summary>
            <remarks>
            Writes an OnIOError event handler to perform some specific actions when writing to stream
            archive operation fails. If you will not specify event handler for OnProcessFileFailure any error will
            raise an exception.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnReadFromStreamFailure">
            <summary>
            Occurs in a case of failure of reading from the stream operation.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Current">
            <summary>
            Gets the current <see cref="T:ComponentAce.Compression.Interfaces.IArchiveItem"/>.
            </summary>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.GetEnumerator"/>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveNext"/>
            <seealso cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.Reset"/>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnAfterOpenDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnAfterOpen"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="fileName">Indicates the current file name.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnConfirmOverwriteDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnConfirmOverwrite"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="sourceFileName">Indicates the name of the file that will overwrite the existing file.</param>
            <param name="destFileName">Indicates the name of the file being overwritten. Specify this parameter, if you 
            want to save this file with a different name instead of overwriting the existing file.</param>
            <param name="confirm">Confirmation of the file overwriting. Set this parameter to <c><b>false</b></c>, 
            if you want to cancel overwriting the existing file. The default value for the parameter is <c><b>true</b></c>.</param>
            <param name="cancel">This parameter determines if the current operation should be cancelled. Set it to 
            <c><b>true</b></c>, if you want to cancel the operation. The default value of <b>cancel</b> is <c><b>false</b></c>.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnConfirmProcessFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnConfirmProcessFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="fileName">Indicates the current file name.</param>
            <param name="operation">Indicates the current archive <see cref="T:ComponentAce.Compression.Archiver.ProcessOperation">operation</see>.</param>
            <param name="confirm">Confirms or cancels the execution of the current operation on the current file. Set 
            the parameter to <c><b>false</b></c>, if you want to cancel executing the current operation on the file. 
            The default value for <b>confirm</b> is <c><b>true</b></c>.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnFileProgressDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnFileProgress"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="fileName">Indicates the current file name.</param>
            <param name="progress">Indicates a progress for the current group operation in percent.</param>
            <param name="timeElapsed">Indicates the time elapsed from the beginning of the operation.</param>
            <param name="timeLeft">Indicates the time left to the end of the operation.</param>
            <param name="operation">Indicates the current archive <see cref="T:ComponentAce.Compression.Archiver.ProcessOperation">operation</see>.</param>
            <param name="progressPhase">Indicates the progress <see cref="T:ComponentAce.Compression.Archiver.ProgressPhase">phase</see> of the operation.</param>
            <param name="cancel">This parameter determines if the current operation should be cancelled. Set it to 
            <c><b>true</b></c>, if you want to cancel the operation. The default value of <b>cancel</b> is <c><b>false</b></c>.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnOverallProgressDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnOverallProgress"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="progress">Indicates a progress for the current group operation in percent.</param>
            <param name="timeElapsed">Indicates the time elapsed from the beginning of the operation.</param>
            <param name="timeLeft">Indicates the time left to the end of the operation.</param>
            <param name="operation">Indicates the current archive <see cref="T:ComponentAce.Compression.Archiver.ProcessOperation">operation</see>.</param>
            <param name="progressPhase">Indicates the progress <see cref="T:ComponentAce.Compression.Archiver.ProgressPhase">phase</see> of the operation.</param>
            <param name="cancel">This parameter determines if the current operation should be cancelled. Set it to 
            <c><b>true</b></c>, if you want to cancel the operation. The default value of <b>cancel</b> is <c><b>false</b></c>.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailureDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="fileName">Indicates the current file name.</param>
            <param name="operation">Indicates the current archive <see cref="T:ComponentAce.Compression.Archiver.ProcessOperation">operation</see>.</param>        
            <param name="errorCode">Indicates a common type of the error. See the <see cref="T:ComponentAce.Compression.Archiver.ErrorCode"/> topic for 
            details on error types.</param>
            <param name="errorMessage">Indicates the error message text.</param>
            <param name="exception">The exception which occurs.</param>
            <param name="action">Specifies whether the operation with the file should be retried, aborted or the error 
            should be ignored to process the next file. See the <see cref="T:ComponentAce.Compression.Archiver.FailureAction"/> topic for details.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnIOErrorDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnIOError"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="innerException">The exception which is being thrown.</param>
            <param name="cancel">This parameter determines if the current operation should be cancelled. Set it to 
            <c><b>true</b></c>, if you want to cancel the operation. The default value of <b>cancel</b> is <c><b>false</b></c>.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnReadFromStreamFailureDelegate">
            <summary>
             The delegate to handle the stream read failed event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="innerException">The exception which is being thrown.</param>
            <param name="cancel">This parameter determines if the current operation should be cancelled. Set it to 
             <c><b>true</b></c>, if you want to cancel the operation. The default value of <b>cancel</b> is <c><b>false</b></c>.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiveItem">
            <summary>
            Base class for items returned to the user.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Interfaces.IArchiveItem">
            <summary>
            Describes parameters of the file stored within the archive file.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:51
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IArchiveItem.Reset">
            <summary>
            Resets the archive item to the default empty state (no associated file).
            </summary>
            <remarks>Use this method to set the archive item to the its default state.</remarks>>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:51
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IArchiveItem.FullName">
            <summary>
            Gets full path name of the archive item.
            </summary>
            <value>The full file name.</value>
            <remarks>Full file name includes path in the archive to the file combined with the file name.</remarks>
            <seealso cref="P:ComponentAce.Compression.Interfaces.IArchiveItem.StoredPath"/>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:48
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IArchiveItem.SrcFileName">
            <summary>
            Gets or sets the name of the file to add to the archive.
            </summary>
            <value>Path to the source file.</value>
            <remarks>Source file used to set information about stored path in the archive for the file and its name.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:49
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IArchiveItem.FileName">
            <summary>
            Gets or sets the name of the file stored within the archive.
            </summary>
            <value>The name of the file.</value>
            <remarks>This field contains only file name with extension. Path to the file in the archive is stored with the <see cref="P:ComponentAce.Compression.Interfaces.IArchiveItem.StoredPath"/></remarks>
            <seealso cref="P:ComponentAce.Compression.Interfaces.IArchiveItem.StoredPath"/>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:49
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IArchiveItem.StoredPath">
            <summary>
            Gets or sets the path to the file which is stored in the archive.
            </summary>
            <value>The path to the file in the archive.</value>
            <remarks>If the archive contains a file stored in the directory for example 'Dir\file.txt', then StoredPath for the file will be 'Dir', <see cref="P:ComponentAce.Compression.Interfaces.IArchiveItem.FileName"/> will be 'file.txt' and <see cref="P:ComponentAce.Compression.Interfaces.IArchiveItem.FullName"/> will be 'Dir\file.txt'. In the other case if there are no directories in the archive, <see cref="P:ComponentAce.Compression.Interfaces.IArchiveItem.StoredPath"/> will be empty and <see cref="P:ComponentAce.Compression.Interfaces.IArchiveItem.FullName"/> will be equals to the FileName</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:49
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IArchiveItem.UncompressedSize">
            <summary>
            Gets the uncompressed file size in bytes.
            </summary>
            <value>The uncompressed size of the item.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:50
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IArchiveItem.ExternalFileAttributes">
            <summary>
            Gets the file attributes.
            </summary>
            <value>The file attributes.</value>
            <remarks>File attributes will be restored for the file during decompression operation.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:50
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IArchiveItem.FileModificationDateTime">
            <summary>
            Gets or sets the last modification file time.
            </summary>
            <value>The last modification time.</value>
            <remarks>File modification time is stored within the archive to restore it during decompression operation.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 26.04.2010  18:03
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiveItem._fileName">
            <summary>
            Name of the file stored within the archive.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiveItem.storedPath">
            <summary>
            Path to this file inside the archive. 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiveItem.Handle">
            <summary>
            Record used for search operations.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiveItem.Reset">
            <summary>
            Resets the archive item to the default empty state (no associated file).
            </summary>
            <remarks>Use this method to set the archive item to the its default state.</remarks>
            &gt;
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:51
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiveItem.#ctor">
            <overloads>Creates a new instance of the <see cref="T:ComponentAce.Compression.Archiver.BaseArchiveItem"/> class.</overloads>
            <summary>
            Creates a new, empty instance of the <see cref="T:ComponentAce.Compression.Archiver.BaseArchiveItem"/> class which does not refer to any file.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiveItem.FileName">
            <summary>
            Gets/Sets name of the file stored within the archive.
            </summary>
            <value>The name of the file.</value>
            <remarks>This field contains only file name with extension. Path to the file in the archive is stored with the <see cref="P:ComponentAce.Compression.Archiver.BaseArchiveItem.StoredPath"/></remarks>
            <seealso cref="P:ComponentAce.Compression.Archiver.BaseArchiveItem.StoredPath"/>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:49
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiveItem.SrcFileName">
            <summary>
            The name of the file to add to the archive.
            </summary>
            <value>Path to the source file.</value>
            <remarks>Source file used to set information about stored path in the archive for the file and its name.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:49
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiveItem.UncompressedSize">
            <summary>
            Gets the uncompressed file size in bytes.
            </summary>
            <value>The uncompressed size of the item.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:50
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiveItem.FileModificationDateTime">
            <summary>
            Gets or sets the last modification file time.
            </summary>
            <value>The last modification time.</value>
            <remarks>File modification time is stored within the archive to restore it during decompression operation.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 26.04.2010  18:03
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiveItem.FullName">
            <summary>
            Gets full path name of the archive item.
            </summary>
            <value>The full file name.</value>
            <remarks>Full file name includes path in the archive to the file combined with the file name.</remarks>
            <seealso cref="P:ComponentAce.Compression.Archiver.BaseArchiveItem.StoredPath"/>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:48
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiveItem.ExternalFileAttributes">
            <summary>
            Indicates external file attributes. 
            </summary>
            <remarks>
            If Options.SetAttributes is set to <b>true</b> then <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> will set these attributes to the extracted file.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiveItem.StoredPath">
            <summary>
            Gets or sets the path to the file which is stored in the archive.
            </summary>
            <value>The path to the file in the archive.</value>
            <remarks>If the archive contains a file stored in the directory for example 'Dir\file.txt', then StoredPath for the file will be 'Dir', <see cref="P:ComponentAce.Compression.Archiver.BaseArchiveItem.FileName"/> will be 'file.txt' and <see cref="P:ComponentAce.Compression.Archiver.BaseArchiveItem.FullName"/> will be 'Dir\file.txt'. In the other case if there are no directories in the archive, <see cref="P:ComponentAce.Compression.Archiver.BaseArchiveItem.StoredPath"/> will be empty and <see cref="P:ComponentAce.Compression.Archiver.BaseArchiveItem.FullName"/> will be equals to the FileName</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:49
        </member>
        <member name="T:ComponentAce.Compression.Interfaces.IItemsArray">
            <summary>
            Collection of the items.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:01
            <exclude />
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItemsArray.AddItem(ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Adds existing item.
            </summary>
            <param name="item">The item.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 26.04.2010  16:29
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItemsArray.FileExists(System.String,System.Int32@)">
            <summary>
            Files the exists.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="itemNo">The item no.</param>
            <returns></returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:01
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItemsArray.DeleteItem(System.Int32)">
            <summary>
            Deletes the item.
            </summary>
            <param name="index">The index.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:01
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItemsArray.ClearTags">
            <summary>
            Clears the tags.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:01
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItemsArray.Clear">
            <summary>
            Clears this instance.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 07.05.2010  16:52
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItemsArray.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value></value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:00
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItemsArray.Count">
            <summary>
            Gets the count of the items in the array.
            </summary>
            <value>The count.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:00
        </member>
        <member name="M:ComponentAce.Compression.Archiver.CompressionItemsArray.GetDirItemIndexByName(System.String)">
            <summary>
            Checks if the item with the 'name' name exists in the collection
            </summary>
            <returns>The index of the item in the collection if it exists, -1 - otherwise</returns>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.InternalSearchRec">
            <summary>
            Internal record for search info.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.bzip2.BZip2Constants_Fields">
            <summary> Base class for both the compress and decompress classes.
            Holds common arrays, and static data.
            
            </summary>
            <author>  <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            </author>
        </member>
        <member name="T:ComponentAce.Compression.Libs.bzip2.CBZip2InputStream">
            <summary> An input stream that decompresses from the BZip2 format (without the file
            header chars) to be read as any other stream.
            
            </summary>
            <author>  <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            </author>
        </member>
        <member name="T:ComponentAce.Compression.Libs.bzip2.CBZip2OutputStream">
            <summary> An output stream that compresses into the BZip2 format (without the file
            header chars) into another stream.
            
            </summary>
            <author>  <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            
            TODO:    Update to BZip2 1.0.1
            </author>
        </member>
        <member name="M:ComponentAce.Compression.Libs.bzip2.CBZip2OutputStream.WriteByte(System.Int32)">
            <summary> 
            modified by Oliver Merkel, 010128
            
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.bzip2.CRC">
            <summary> A simple class the hold and calculate the Crc for sanity checking
            of the data.
            
            </summary>
            <author>  <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            </author>
        </member>
        <member name="T:ComponentAce.Compression.Libs.bzip2.SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.bzip2.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.bzip2.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.bzip2.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.bzip2.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.bzip2.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.bzip2.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.bzip2.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.bzip2.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="T:ComponentAce.Compression.FileUtils">
            <summary>
            Used in ZipForge and ZipForge.CF for compatibility with CF
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.CompressionDirection">
            <summary>
            Enumeration representing the direction of the compression (compress, decompress)
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseCompressor">
            <summary>
            Abstract class representing compression algorithm
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseCompressor.Init(ComponentAce.Compression.Archiver.CompressionDirection,System.Byte)">
            <summary>
            Initializes the compressor to compress or decompress files
            </summary>
            <param name="direction">Specifies whether the data is compressed or decompressed</param>
            <param name="compressionMode">Specifices the compression mode, from 0 to 9</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseCompressor.CompressBlock(System.UInt32,System.Int64,System.Boolean,System.Byte[],System.Int64@,System.Byte[]@)">
            <summary>
            Compresses block of data
            </summary>
            <param name="blockSize">The size of the block used for compression</param>
            <param name="currentBlockSize">The size of the current block (can be less than blockSize if remaining data size is less than buffer size)</param>
            <param name="compressedDataSize">The size of the compressed data</param>
            <param name="isFinalBlock">True if the the current block is a final one</param>
            <param name="sourceBuffer">A buffer to compress</param>
            <param name="resultBuffer">Result buffer</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseCompressor.DecompressBlock(System.Int32,System.Boolean,System.Byte[],System.Int64@)">
            <summary>
            Decompresses block of data. Fires OnOut
            </summary>
            <param name="currentBlockSize">The size of the block used for decompression</param>
            <param name="sourceBuffer">A buffer to decompress</param>
            <param name="isFinalBlock">True if the the current block is a final one</param>
            <param name="decompressedDataSize">Total size of the decompressed data</param>        
            <returns>True - if operation succeeded and false otherwise</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseCompressor.Close">
            <summary>
            Performs finalization operations
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseCompressor.DecompressedBufferReady">
            <summary>
            Fired when output buffer is full or compression finished
            </summary>
            <param name="buffer">Decompressed buffer</param>
            <param name="outBytes">Actual decompressed bytes</param>
            <param name="stopDecompression">Assign True to stop decompression process</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.StoreCompressor">
            <summary>
            Represents compressor which just store file in archive (without compression)
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.DeflateCompressor">
            <summary>
            Deflate compression algorithm
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BZIP2Compressor">
            <summary>
            Bzip2 compression algorithm
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.PPMdCompressor">
            <summary>
            Ppmd compression algorithm
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ConfirmOverwriteDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ConfirmOverwriteDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ComponentAce.Compression.ConfirmOverwriteDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ErrorCode">
            <summary>
            Contains constants for different error types which can occur during ZipForge operations.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.UnknownError">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.IndexOutOfBounds">
            <summary>
            Index was out of bounds. Most likely an attempt to get the non-existent directory item occurred.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidCompressionMode">
            <summary>
            Invalid compression mode was specified.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.UnexpectedNull">
            <summary>
            Some inner object equals null.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidCheckSum">
            <summary>
            Invalid size or check sum of file or unsupported compression format. The error can be caused by the fact that archive data is corrupted.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.BlankFileName">
            <summary>
            File name is blank. You need to specify appropriate file name.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.FileNotFound">
            <summary>
            File was not found.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.ArchiveIsNotOpen">
            <summary>
            Archive is not open. You are attempting to perform some operation which requires the archive to be open. You need to call the ZipForge.Open method before.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.StubNotSpecified">
            <summary>
            SFXStub property is not specified.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CannotCreateFile">
            <summary>
            Cannot create file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CannotCreateDir">
            <summary>
            Cannot create directory.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.NotInUpdate">
            <summary>
            Internal error. Update is not started.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CannotOpenFile">
            <summary>
            Cannot open file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InUpdate">
            <summary>
            Cannot proceed when update is not ended. Preceding EndUpdate call is required.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CannotDeleteFile">
            <summary>
            Cannot delete file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InMemoryArchiveCanBeCreatedOnly">
            <summary>
            In-memory archive can be created only.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.FileIsInReadonlyMode">
            <summary>
            File is open in read-only mode.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidCompressedSize">
            <summary>
            Invalid compressed size is specified.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidFormat">
            <summary>
            Invalid archive file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CannotCreateOutputFile">
            <summary>
            Cannot create output file. Probably file is locked by another process.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.ArchiveIsOpen">
            <summary>
            Archive is open. You should close it before performing this operation.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.UnableToCreateDirectory">
            <summary>
            Unable to create directory.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.UnableToFindZip64DirEnd">
            <summary>
            Cannot find Zip64 directory end record.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.HugeFileModeIsNotEnabled">
            <summary>
            The file is to large, you have to enable Zip64 mode.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CannotOpenArchiveFile">
            <summary>
            Cannot open archive file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CannotWriteToStream">
            <summary>
            Write to stream error.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CannotFitSFXStubOnVolume">
            <summary>
            Cannot place SFX stub on volume. Volume size limit is too small.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.DamagedArchive">
            <summary>
            Archive is damaged. Open failed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.MakeSFXIsNotAllowed">
            <summary>
            MakeSFX is not allowed for splitted or spanned archives. Set SFXStub before archive creation instead of MakeSFX.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.ArchiveAlreadyHasSFXStub">
            <summary>
            Archive already has SFX stub.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.MultiVolumeArchiveIsNotAllowed">
            <summary>
            Multi-volume archive is not allowed for custom stream.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.SpanningModificationIsNotAllowed">
            <summary>
            Multi-spanned archive is not allowed for modification. Use BeginUpdate/EndUpdate methods to add files several times.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.IncorrectPassword">
            <summary>
            Incorrect password is specified for the encrypted archive.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidVolumeName">
            <summary>
            Invalid volume name.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidUnicodeExtraFieldSignature">
            <summary>
            The unicode extra field signature is incorrect.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidExtraFieldId">
            <summary>
            The extra field ID value is incorrect. Possibly the archive is damaged.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.NoOnRequestBlankVolumeHandler">
            <summary>
            The OnRequestBlankVolume event handler doesn't exists. You should handle this event to work with spanning archives.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.NoOnRequestFirstVolumeHandler">
            <summary>
            The OnRequestFirstVolume event handler doesn't exists. You should handle this event to work with spanning archives.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.NoOnRequestMiddleVolumeHandler">
            <summary>
            The OnRequestMiddleVolume event handler doesn't exists. You should handle this event to work with spanning archives.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.NoOnRequestLastVolumeHandler">
            <summary>
            The OnRequestLastVolume event handler doesn't exists. You should handle this event to work with spanning archives.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.DiskIsFull">
            <summary>
            The disk is full.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CompressionEngineIsNotInitialized">
            <summary>
            Compression engine is not initialized.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.UnknownCompressionMethod">
            <summary>
            Unknown compression method.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.UnknownEncryptionMethod">
            <summary>
            Unknown or not supported encryption algorithm.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidFileHeaderObject">
            <summary>
            File header oject incorect.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.StreamDoesNotSupportWriting">
            <summary>
            Stream doesn`t support writing.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.StreamDoesNotSupportReading">
            <summary>
            Stream doesn`t support reading.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.FileNameAlreadyExists">
            <summary>
            File name already exists
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.ErrorOccursDuringSavingFileStream">
            <summary>
            Error occur during trying to save stream
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CompressionFailed">
            <summary>
            Error occurs during file compression.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.UnexpectedNullPointer">
            <summary>
            Unexpected null pointer
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.IncorrectSignatureFound">
            <summary>
            Incorrect signature was found
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidReadedBytesCount">
            <summary>
            Read bytes count incorrect
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.ReadFromStreamFailed">
            <summary>
            Read from stream failed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.WriteToTheStreamFailed">
            <summary>
            Write to stream failed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.ShouldCreateSeparateArchivers">
            <summary>
            There are more than one file in the Gzip archive
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CanNotWriteToTheClosedWriter">
            <summary>
            Write to stream fails because of closed stream
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.NotAllPrevisiousDataWasRead">
            <summary>
            You are trying to change file while not all the data from the previous one was read. If you do want to skip files use skipData parameter set to true.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.NotAllHeaderBytesWasRead">
            <summary>
            Expected to read 512 bytes of header, but actual {0} bytes was read.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.InvalidTarArchive">
            <summary>
            Tar archive is broken.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.NameTooLong">
            <summary>
            Specified name '{0}' is too long. It must be less than {1} symbols.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.FileNameWasNotSpecified">
            <summary>
            File name was not specified. Set the file name before trying to store file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.SpecifiedFileNameIsNullOrEmpty">
            <summary>
            File name you are trying to set is null or empty.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.FileNameEmpty">
            <summary>
            File name can not be empty.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.CompressedStreamNotSpecified">
            <summary>
            Compressed stream should be specified by CompressedStream property or it should be initialized by constructor.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ErrorCode.OutputFilesDirNotSpecified">
            <summary>
            You should specify OutputFilesDir property.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.FailureAction">
            <summary>
            Specifies an action taken on error.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.FailureAction.Retry">
            <summary>Try again.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.FailureAction.Ignore">
            <summary>Ignore error and continue.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.FailureAction.Abort">
            <summary>Abort action.</summary>
        </member>
        <member name="T:ComponentAce.Compression.GZip.CompressionLevel">
            <summary>
            Compression level for gzip archive.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.GZip.CompressionLevel.Fastest">
            <summary>
            The fastest compression level and a low compression rate.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.GZip.CompressionLevel.Max">
            <summary>
            Slow compression and the maximum compression rate.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.GZip.GzipArchiveItem">
            <summary>
            Represents an item in the gzip archive.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:16
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipArchiveItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.GZip.GzipArchiveItem"/> class.
            </summary>
            <overloads>Creates a new instance of the <see cref="T:ComponentAce.Compression.Archiver.BaseArchiveItem"/> class.</overloads>
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipArchiveItem.Comment">
            <summary>
            Gets or sets the comment to the item.
            </summary>
            <value>The comment to store for the item in the archive.</value>
            <remarks>Use this field to store some important information for the item. Stored string doesn`t influence to the algorithm or file format, it is used only for human consumption.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:16
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipArchiveItem.ExternalFileAttributes">
            <summary>
            Indicates external file attributes.
            </summary>
            <value>File attributes.</value>
            <remarks>
            If Options.SetAttributes is set to <b>true</b> then <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> will set these attributes to the extracted file.
            </remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:17
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipArchiveItem.NeedToStoreHeaderCRC">
            <summary>
            Gets or sets a value indicating whether header crc would be calculated and saved to the archive.
            </summary>
            <value>
            	<c>true</c> if header crc value should be stored; otherwise, <c>false</c>.
            </value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:17
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipArchiveItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.GZip.GzipArchiveItem"/> class.
            </summary>
            <param name="fileName">Name of the source file for new item.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:19
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipArchiveItem.CompressedSize">
            <summary>
            Gets the compressed item size.
            </summary>
            <value>Compressed item size.</value>
            <remarks>This value is set by <see cref="M:ComponentAce.Compression.GZip.GzipForge.FindFirst(ComponentAce.Compression.GZip.GzipArchiveItem@)"/> or by <see cref="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)"/> methods and indicates.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:16
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipArchiveItem.CompressionRate">
            <summary>
            Gets the compression item rate.
            </summary>
            <value>The compression rate for the item.</value>
            <remarks>Compression rate calculate as percantage of saving because of compression file size to the uncompressed file size.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:16
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipArchiveItem.Crc">
            <summary>
            Gets the CRC for the data stream.
            </summary>
            <value>A cyclic redundancy check for the item.</value>
            <remarks>CRC value computed for the uncompressed data according to CRC-32 algorithm used in the ISO 3309 standard and stored immediatly after compressed data block.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:17
        </member>
        <member name="T:ComponentAce.Compression.GZip.GzipArchiveOptions">
            <summary>
            Specific options for gzip archive.
            </summary>
            <remarks>Since a gzip archive can contains only one file, to add more files to the archive set property <see cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/> to true. In that case all files adding to the archive will be stored in separate files in the directory specified with <see cref="P:ComponentAce.Compression.GZip.GzipArchiveOptions.OutputFilesDir"/>. So all properties specified by this class would be of value only if property <see cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/> is set to true.</remarks>
            <seealso cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:25
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipArchiveOptions.CreateDirs">
            <summary>
            Specifies whether to create folders when store gzipped files.
            </summary>
            <remarks>
            Set CreateDirs to <b>true</b> if you need to store gzipped files with creating all necessary folders.
            </remarks>
            <seealso cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/>
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipArchiveOptions.ReplaceReadOnly">
            <summary>
            Specifies whether to replace read-only files when store gzipped files.
            </summary>
            <remarks>
            If ReplaceReadOnly set to <b>true</b> it means that all existing read-only files will be replaced.
            </remarks>
            <seealso cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/>
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipArchiveOptions.Overwrite">
            <summary>
            Specifies whether stored gzipped files will overwrite existing files.
            </summary>
            <seealso cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipArchiveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.GZip.GzipArchiveOptions">GzipArchiveOptions</see> class.
            </summary>
            <remarks>
            During initialization default values are set. 
            <code>
                OutputFilesDir = string.Empty;
                CreateDirs = true;
                ReplaceReadOnly = true;
                Overwrite = OverwriteMode.Always;</code>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipArchiveOptions.OutputFilesDir">
            <summary>
            Specify the directory where <see cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers">separate GZip archives</see> will 
            be located.
            </summary>
            <seealso cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/>
        </member>
        <member name="T:ComponentAce.Compression.GZip.GzipForge">
            <summary>
            Contains all the routines to work with gzip-files.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:09
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.GZip.GzipForge"/> class.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:10
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipForge.CompressionLevel">
            <summary>
            Gets and sets the compression level used for archive update (Fastest, Max).
            </summary>
            <remarks>
            This property determines the compression level for adding, moving or updating files. Set <b>CompressionLevel</b> to the desired value before adding, moving or updating files.
            </remarks>
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipForge.StoreHeaderCRC">
            <summary>
            Gets or sets a value indicating whether to store header CRC.
            </summary>
            <value><c>true</c> if header CRC need to be stored; otherwise, <c>false</c>.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:10
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.SaveRenamedItemToArchive(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Saves the renamed item from backup file stream to archive.
            </summary>
            <param name="backupFileStream">The backup file stream.</param>
            <param name="compressedStream">The compressed stream.</param>
            <param name="itemNo">Number of the item to save.</param>
            <param name="itemNoInBackupArray">Number of the item in backup array.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:10
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.GetEndOfTheDataStreamPosition(System.Int32)">
            <summary>
            Gets the offset of the end of the data in the archive stream.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <returns>Offset of the end of data stream.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:11
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.ChangeFilesComment(System.String,System.String)">
            <summary>
            Changes file comment for the files stored within the current archive file.
            </summary>
            <param name="fileMask">The directory and the file name mask, including wildcard characters.</param>
            <param name="newComment">Specifies new file comment.</param>
            <remarks>
            Call <b>ChangeFilesComment</b> to change file attributes for the files stored within the current archive
            file.
            <para>The <paramref name="fileMask"/> parameter is the directory and the file name mask, including wildcard
            characters. For example, <b>"TEST\\*.*"</b> specifies all the files in the directory <b>"TEST"</b>,
            stored within the archive file. All the files that meet <paramref name="fileMask"/> will be processed.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.DoCompress(System.Boolean,ComponentAce.Compression.GZip.GzipItem,System.Int32,System.IO.Stream,System.IO.Stream,System.Int64@,System.Int64@,System.UInt32@)">
            <summary>
            Performs compression.
            </summary>
            <param name="encrypted">Determines whether need to encrypt file in the archive.</param>
            <param name="item">The item to compress.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="streamCompressFrom">The stream to compress from.</param>
            <param name="streamCompressTo">The stream to compress to.</param>
            <param name="processedBytesCount">Count of processed bytes.</param>
            <param name="compSize">Compression size.</param>
            <param name="fcrc32">CRC32 of compressed data.</param>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.GetLastModificationDateTime(ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Gets the last modification date time for the <paramref name="item"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>Modification time.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:13
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.CreateNewArchiveItem(System.String,System.String,ComponentAce.Compression.Archiver.StorePathMode)">
            <summary>
            Creates the new archive item.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="baseDir">The base directory.</param>
            <param name="storePathMode">The store path mode.</param>
            <returns>Archive item.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:13
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.CreateNewItemsHandler(System.IO.Stream,System.Boolean)">
            <summary>
            Creates the new items handler.
            </summary>
            <param name="stream">The compressed stream.</param>
            <param name="create">If set to <c>false</c> then fill items handler from <paramref name="stream"/>.</param>
            <returns></returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:13
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.ExtractItem(System.Int32,System.IO.Stream)">
            <summary>
            Extracts the item specified with <paramref name="itemNo"/> to the <paramref name="destStream"/>. This method is used by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractTaggedFile(System.Int32,System.String,System.String,System.Boolean@)"/>
            </summary>
            <param name="itemNo">Number of the item to extract.</param>
            <param name="destStream">Destination stream.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:13
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.InternalDecompressFile(System.IO.Stream,System.IO.Stream,ComponentAce.Compression.GZip.GzipItem)">
            <summary>
            Decompresses archive item.
            </summary>
            <param name="rfs">Stream to read compressed data from</param>
            <param name="wfs">Stream to write compressed data to</param>
            <param name="dirItem">Archive item to decompress</param>
            <returns><b>True</b> if everything is OK, otherwise - <b>false</b></returns>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.GzipDecompress(System.Int64@,System.IO.Stream@,System.IO.Stream,System.UInt32@,ComponentAce.Compression.GZip.GzipItem)">
            <summary>
            Decompresses a file within ZIP archive
            </summary>
            <param name="actualDecompressedSize">Size of decompressed archive item</param>
            <param name="rfs">Stream to read compressed data from</param>
            <param name="wfs">Stream to write compressed data to</param>
            <param name="crc32">Crc32 value, must be initialized</param>
            <param name="dirItem">Directory item to decompress</param>
            <returns>True if file was decompressed successfully. Otherwise returns false</returns>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.FillDirItem(System.Int32,System.String)">
            <summary>
            Initializes the item specified with <paramref name="itemNo"/> by the file specified by <paramref name="fileName"/>.
            </summary>
            <param name="itemNo">Number of the item to initialize.</param>
            <param name="fileName">Name of the file.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:15
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.FillDirItem(System.Int32,System.String,System.String,System.Boolean,System.IO.FileAttributes)">
            <summary>
            Fills the directory item.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="fileName">Name of the file.</param>
            <param name="arcFileName">Archive file name.</param>
            <param name="retrieveFileDate">If set to <c>true</c> file date will be retrives from the file.</param>
            <param name="attr">Attributes to set as ExternalAttriburtes for the item specified with <paramref name="itemNo"/>.</param>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.OpenArchive">
            <summary>
            Opens or creates (if it has not existed) an archive file specified with the <seealso cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> 
            property.
            </summary>
            <remarks>Call <see cref="M:ComponentAce.Compression.GZip.GzipForge.CloseArchive"/> to close the archive file.</remarks>
            <example>The following example shows how to add files to archive and extract them:
            <code lang="C#">
            GzipForge gzipForge = new GzipForge ();
            // Set the archive file name
            gzipForge.FileName ="C:\\TEST\\test.gz";
            // Create a new archive file
            gzipForge.OpenArchive();
            // Set the path to the folder with the files to archive
            gzipForge.BaseDir = "\\Source";
            // Add all files and directories from the folder specified above to the archive
            gzipForge.AddFiles("*.*");
            // Set path to the folder where the archive will be extracted to
            gzipForge.BaseDir = "\\Dest";
            // Extract all the files from the archive
            gzipForge.ExtractFiles("*.*");
            // Close the archive
            gzipForge.CloseArchive();
            </code>
            <code lang="vbnet">
            GzipForge gzipForge = New GzipForge
            ' Set the archive file name
            gzipForge.FileName = "C:\TEST\test.gz"
            ' Create a new archive file
            gzipForge.OpenArchive()
            ' Set the path to the folder with the files to archive
            gzipForge.BaseDir = DemoFolder + "\\Source"
            ' Add all files and directories from the folder specified above to the archive
            gzipForge.AddFiles("*.*")
            ' Set path to the folder where the archive will be extracted to
            gzipForge.BaseDir = DemoFolder + "\\Dest"
            ' Extract all the files from the archive
            gzipForge.ExtractFiles("*.*")
            ' Close the archive
            gzipForge.CloseArchive()
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.GZip.GzipForge.CloseArchive"/>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.OpenArchive(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens or creates an archive file with the specified file access and share modes
            </summary>
            <param name="fileMode">Specifies <seealso cref="T:System.IO.FileMode">a file open mode</seealso> like in the
            <seealso cref="M:System.IO.File.Create(System.String)"/> or <seealso cref="M:System.IO.File.Open(System.String,System.IO.FileMode)"/> functions.</param>
            <param name="fileAccess">Specifies <seealso cref="T:System.IO.FileAccess">a file access mode</seealso>.</param>
            <param name="fileShare">Specifies <seealso cref="T:System.IO.FileShare">a file share mode</seealso>.</param>
            <remarks>
            Call <b>OpenArchive</b> to open or create an archive file. If the file specified by the <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> 
            property does not exists and the <paramref name="fileMode"/> parameter is set to 
            <seealso cref="T:System.IO.FileMode"/>.Create (this is by default) or the
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InMemory"/> property is set to 
            <c><b>true</b></c>, then <b>OpenArchive</b> will create and open it. <b>OpenArchive</b> sets 
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <c><b>true</b></c>.
            <para>Call <see cref="M:ComponentAce.Compression.GZip.GzipForge.CloseArchive"/> to close the archive file.</para>
            </remarks>
            <example>The following example shows how to add files to archive and extract them:
            <code lang="C#">
            GzipForge gzipForge = new GzipForge ();
            // Set the archive file name
            gzipForge.FileName ="C:\\TEST\\test.gz";
            // Create a new archive file
            gzipForge.OpenArchive();
            // Set the path to the folder with the files to archive
            gzipForge.BaseDir = "\\Source";
            // Add all files and directories from the folder specified above to the archive
            gzipForge.AddFiles("*.*");
            // Set path to the folder where the archive will be extracted to
            gzipForge.BaseDir = "\\Dest";
            // Extract all the files from the archive
            gzipForge.ExtractFiles("*.*");
            // Close the archive
            gzipForge.CloseArchive();
            </code>
            <code lang="vbnet">
            TgzForge gzipForge = New TgzForge
            ' Set the archive file name
            gzipForge.FileName = "C:\TEST\test.gz"
            ' Create a new archive file
            gzipForge.OpenArchive()
            ' Set the path to the folder with the files to archive
            gzipForge.BaseDir = DemoFolder + "\\Source"
            ' Add all files and directories from the folder specified above to the archive
            gzipForge.AddFiles("*.*")
            ' Set path to the folder where the archive will be extracted to
            gzipForge.BaseDir = DemoFolder + "\\Dest"
            ' Extract all the files from the archive
            gzipForge.ExtractFiles("*.*")
            ' Close the archive
            gzipForge.CloseArchive()
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.GZip.GzipForge.CloseArchive"/>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.DeleteItem(System.Int32)">
            <summary>
            Deletes the item specified with <paramref name="itemNo"/>.
            </summary>
            <param name="itemNo">Number of the item to delete.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 16.07.2010  16:25
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.BackupFileRest(System.Int32,System.String@,System.IO.Stream@)">
            <summary>
            Backups from the beginning of the item specified with <paramref name="itemNo"/> to the very end.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="tempFileName">Name of the file where data were backed up.</param>
            <param name="backupFileStream">The backup file stream.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 29.06.2010  13:24
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.AddFromFileRest(System.Int32,System.IO.Stream,System.Int64,System.IO.Stream)">
            <summary>
            Saves changed item, specified by <paramref name="itemNo"/> to the <paramref name="compressedStream"/>.
            </summary>
            <param name="itemNo">Number of the item to save.</param>
            <param name="backupFileStream">The backup file stream.</param>
            <param name="backupOffset">Offset in the backup stream.</param>
            <param name="compressedStream">The compressed stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.AddFromNewSource(System.Int32,System.IO.Stream,ComponentAce.Compression.Archiver.FailureAction@)">
            <summary>
            Saves new item to the archive.
            </summary>
            <param name="itemNo">Number of the item to save.</param>
            <param name="compressedStream">Stream to save.</param>
            <param name="action">Action taken on error.</param>
            <returns>
            	<b>True</b> if everything is OK, otherwise <b>false</b>
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.CloseArchive">
            <summary>
            Closes the current archive file.
            </summary>
            <remarks>
            Call <b>CloseArchive</b> to close the current archive file. <b>CloseArchive</b> automatically finishes 
            the current transaction started by the 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BeginUpdate"/> method and sets 
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <c><b>false</b></c>.
            <para>Call <see cref="M:ComponentAce.Compression.GZip.GzipForge.OpenArchive"/> to create or open an archive file.</para>
            </remarks>
            <example>The following example shows how to add files to archive and extract them:
            <code lang="C#">
            GzipForge gzipForge = new GzipForge ();
            // Set the archive file name
            gzipForge.FileName ="C:\\TEST\\test.gz";
            // Create a new archive file
            gzipForge.OpenArchive();
            // Set the path to the folder with the files to archive
            gzipForge.BaseDir = "\\Source";
            // Add all files and directories from the folder specified above to the archive
            gzipForge.AddFiles("*.*");
            // Set path to the folder where the archive will be extracted to
            gzipForge.BaseDir = "\\Dest";
            // Extract all the files from the archive
            gzipForge.ExtractFiles("*.*");
            // Close the archive
            gzipForge.CloseArchive();
            </code>
            <code lang="vbnet">
            GzipForge gzipForge = New GzipForge
            ' Set the archive file name
            gzipForge.FileName = "C:\TEST\test.gz"
            ' Create a new archive file
            gzipForge.OpenArchive()
            ' Set the path to the folder with the files to archive
            gzipForge.BaseDir = DemoFolder + "\\Source"
            ' Add all files and directories from the folder specified above to the archive
            gzipForge.AddFiles("*.*")
            ' Set path to the folder where the archive will be extracted to
            gzipForge.BaseDir = DemoFolder + "\\Dest"
            ' Extract all the files from the archive
            gzipForge.ExtractFiles("*.*")
            ' Close the archive
            gzipForge.CloseArchive()
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.GZip.GzipForge.OpenArchive"/>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.DoOnConfirmOverwriteOutputFile(System.String,System.String@,System.Boolean@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnConfirmOverwriteOutputFile"/> event if it has any subscribers or shows a dialog to choose an action.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the destination file.</param>
            <param name="confirm">Confirm determines if file is overwritten. 
            Set confirm to <b>false</b> if you want to cancel overwriting existing file. 
            Default value for confirm is <b>true</b>.</param>
            <param name="cancel">Cancel determines if the current operation should be canceled. Set cancel to <b>true</b> to cancel the current operation.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 16.07.2010  16:25
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.DoOnArchiveSingleFile(ComponentAce.Compression.GZip.GzipArchiveItem@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnArchiveSingleFile"/> event if it has any subscribers.
            </summary>
            <param name="item">Processing item.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:06
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.AddNewItemToItemsHandler">
            <summary>
            Adds the new item to items handler.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:17
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.InitDirItem(System.Int32,System.Boolean)">
            <summary>
            Initializes item.
            </summary>
            <param name="itemNo">Number of the item to initialize.</param>
            <param name="isDirectory">Determines if item is directory.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:17
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.GetBlockSize(ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Gets the size of the block.
            </summary>
            <param name="item">The item.</param>
            <returns>Size of the block.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:17
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.InternalOpenArchive">
            <summary>
            Opens the archive.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:17
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.InternalCreateArchive">
            <summary>
            Creates _compressedStream and _itemsHandler.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 31.05.2010  15:07
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.DoOnSetNameForFilesWithoutName(System.Int32)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnSetNameForFilesWithoutName"/> event if it has any subscribers, otherwise item name would be set as 'file'.
            </summary>
            <param name="itemNo">Number of the item.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:16
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.CreateNewArchiveItem">
            <summary>
            Creates the new archive item.
            </summary>
            <returns>New GzipArchiveItem instance.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 16.07.2010  16:27
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.AddItem(ComponentAce.Compression.GZip.GzipArchiveItem)">
            <summary>
            Adds a file specified with the <paramref name="item"/> to the archive.
            </summary>
            <param name="item">Archive item to be added to the archive.</param>
            <remarks>Use AddItem method to add file with the given properties, such as comments, attributes, modification date, etc.</remarks>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.FindFirst(ComponentAce.Compression.GZip.GzipArchiveItem@)">
            <overloads>
            Finds files stored within the archive.
            </overloads>
            <summary>
            Finds files stored within the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <example> The following example shows how to search files stored within the archive:
            <code lang="C#">
             gzipForge1.FileName = "C:\\TEST\\test.gz";
             gzipForge1.OpenArchive();
             GzipArchiveItem archiveItem = new GzipArchiveItem();
             if (gzipForge1.FindFirst("*.*", ref archiveItem))
             {
               do
               {
                 ListViewItem listItem = new ListViewItem();
                 listItem.Text = archiveItem.FileName;
                 listView1.Items.Add(listItem);
               }
               while (gzipForge1.FindNext(ref archiveItem));
             }
             gzipForge1.CloseArchive();
             </code>
             <code lang="vbnet">
             gzipForge1.FileName = "C:\TEST\test.gz";
             gzipForge1.OpenArchive()
             Dim archiveItem As GzipArchiveItem = New GzipArchiveItem()
             If GZipForge1.FindFirst("*.*", archiveItem) Then
               Do                
                 Dim listItem As ListViewItem = New ListViewItem()
                 listItem.Text = archiveItem.FileName
                 listView1.Items.Add(listItem)
               Loop While GZipForge1.FindNext(archiveItem)
             End If
             gzipForge1.CloseArchive()
            </code>
            </example>
            <remarks>
            Use <see cref="M:ComponentAce.Compression.GZip.GzipForge.FindFirst(ComponentAce.Compression.GZip.GzipArchiveItem@)"/> and <see cref="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.GZip.GzipForge.OpenArchive">opened</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            <para>FindFirst variant with single parameter uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr to specify search conditions and to exclude files from delete operation.</para>
            </remarks>          
            <param name="archiveItem">Gzipclass.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <seealso cref="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.FindFirst(System.String,ComponentAce.Compression.GZip.GzipArchiveItem@)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> parameter.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">GzipArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.GZip.GzipForge.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.FindFirst(System.String,ComponentAce.Compression.GZip.GzipArchiveItem@,System.IO.FileAttributes)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">GzipArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.GZip.GzipForge.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            <para>The <paramref name="searchAttr"/> parameter specifies the special files to include in addition to all normal files</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.FindFirst(System.String,ComponentAce.Compression.GZip.GzipArchiveItem@,System.IO.FileAttributes,System.String)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">GzipArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <param name="exclusionMask">Specifies files to be excluded from the search operation.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns>  
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.GZip.GzipForge.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            <para>The <paramref name="searchAttr"/> parameter specifies the special files to include in addition to all normal files</para>
            <para>The <paramref name="exclusionMask"/> specifies files to be excluded from the delete operation.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.FindNext(ComponentAce.Compression.GZip.GzipArchiveItem@)">
             <summary>
             Finds files stored within the archive.
             </summary>
             <example> The following example shows how to search files stored within the archive:
             <code lang="C#">
              gzipForge1.FileName = "C:\\TEST\\test.gz";
              gzipForge1.OpenArchive();
              GzipArchiveItem archiveItem = new GzipArchiveItem();
              if (gzipForge1.FindFirst("*.*", ref archiveItem))
              {
                do
                {
                  ListViewItem listItem = new ListViewItem();
                  listItem.Text = archiveItem.FileName;
                  listView1.Items.Add(listItem);
                }
                while (gzipForge1.FindNext(ref archiveItem));
              }
              gzipForge1.CloseArchive();
              </code>
              <code lang="vbnet">
              gzipForge1.FileName = "C:\TEST\test.gz";
              gzipForge1.OpenArchive()
              Dim archiveItem As GzipArchiveItem = New GzipArchiveItem()
              If GZipForge1.FindFirst("*.*", archiveItem) Then
                Do                
                  Dim listItem As ListViewItem = New ListViewItem()
                  listItem.Text = archiveItem.FileName
                  listView1.Items.Add(listItem)
                Loop While GZipForge1.FindNext(archiveItem)
              End If
              gzipForge1.CloseArchive()
             </code>
             </example> 
             <param name="archiveItem">GzipArchiveItem class.</param>
             <returns>FindNext returns <b>true</b> if there is at least one file meets search conditions, otherwise it returns <b>false</b>.</returns>
            <remarks>
             Use FindNext to find files stored inside the open archive file. Use FindNext after calling <see cref="M:ComponentAce.Compression.GZip.GzipForge.FindFirst(ComponentAce.Compression.GZip.GzipArchiveItem@)"/> only.
             <para>Pass ArchiveItem class found by previous calling of FindFirst or FindNext to the FindNext.
             After calling FindNext archiveItem parameter will contain parameters of the next found file.
             </para>
            </remarks>
            <seealso cref="M:ComponentAce.Compression.GZip.GzipForge.FindFirst(ComponentAce.Compression.GZip.GzipArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.DoOnExtractFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnExtractFile"/> event if it has any subscribers.
            </summary>
            <param name="baseItem">Specifies the archive item being extracted from the archive.</param>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipForge.DoOnStoreFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnStoreFile"/> event if it has any subscribers.
            </summary>
            <param name="baseItem">Specifies the archive item being added to the archive.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 27.06.2010  13:49
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers">
            <summary>
            Gets or sets a value indicating whether to create separate archivers for each file.
            </summary>
            <value>
            <c><b>true</b></c> if you need to store each file in a separate archive; otherwise <c><b>false</b></c>.
            </value>
            <remarks>
            Since GZip format doesn’t support adding more than one file into archive, there can be some specific 
            problems if you use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> method. If this property is set to <c><b>false</b></c> and you 
            try to add more than one file by calling <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> method, an exception will be thrown. But if 
            you don’t want the exception to be thrown, you can set the property to <c><b>true</b></c>. In that case the 
            archiver will create several separate GZip archives, one per file each being archived.
            <para>The directory, where these separate archives will be located, is specified with the property 
            <seealso cref="P:ComponentAce.Compression.GZip.GzipForge.GzipArchiveOptions"/>.</para>
            </remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 04.05.2010  14:13
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipForge.GzipArchiveOptions">
            <summary>
            Gets the gzip archive options.
            </summary>
            <value>Specifies the gzip options for archiving operations.</value>
            <remarks>Properties specified with the <see cref="P:ComponentAce.Compression.GZip.GzipForge.GzipArchiveOptions"/> class would be of value only if <see cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/> is set to true.</remarks>
            <seealso cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:10
        </member>
        <member name="E:ComponentAce.Compression.GZip.GzipForge.OnConfirmOverwriteOutputFile">
            <summary>
            Occurs before an application overwrites the existing file.
            </summary>
            <remarks>
            Write the OnConfirmOverwriteOutputFile event handler to perform some specific actions 
            before overwriting the file or to cancel it. The <seealso cref="E:ComponentAce.Compression.GZip.GzipForge.OnConfirmOverwriteOutputFile"/> event can 
            be triggered by any operation if the property <see cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/> is set to 
            <c><b>true</b></c> and before overwriting the existing file if 
            <see cref="P:ComponentAce.Compression.GZip.GzipForge.GzipArchiveOptions"/>.Overwrite = <see cref="T:ComponentAce.Compression.Archiver.OverwriteMode"/>.Prompt.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.GZip.GzipForge.OnSetNameForFilesWithoutName">
            <summary>
            Occurs if a file in the archive doesn`t contain a name.
            </summary>
            <remarks>Since gzip file format is oriented on the real-time process, there may be no file name in the gzip archive. There is no original file name if the data was compressed from a source other than a named file; for example, if the source was stdin on a Unix system, there is no file name.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 15.05.2010  17:01
        </member>
        <member name="E:ComponentAce.Compression.GZip.GzipForge.OnArchiveSingleFile">
            <summary>
            Occurs before a new gzipped file in <see cref="P:ComponentAce.Compression.GZip.GzipForge.GzipArchiveOptions"/>.OutputFilesDir is created.
            </summary>
            <remarks>If <see cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/> is set to <c><b>false</b></c>, then 
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> will be used as a name for 
            the archive file. In that case the archive can contain only one item. In the other case, if 
            <see cref="P:ComponentAce.Compression.GZip.GzipForge.CreateSeparateArchivers"/> is set to <c><b>true</b></c>, 
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> will be ignored and each item 
            in the archive will be stored in a separate file in the directory specified with 
            <see cref="P:ComponentAce.Compression.GZip.GzipForge.GzipArchiveOptions"/>.OutputFilesDir. In that case the name of the archive file would be set as 
            a name of the item in the archive plus '.gz'.</remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:07
        </member>
        <member name="E:ComponentAce.Compression.GZip.GzipForge.OnExtractFile">
            <summary>
            Occurs when file is being extracted from archive.
            </summary>
            <remarks>
            Write an OnExtractFile event handler to override default file name 
            or change its attributes before extracting.
            The event is called when <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> is called.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.GZip.GzipForge.OnStoreFile">
            <summary>
            Occurs when file is being stored into the archive.
            </summary>
            <remarks>
            Write an OnStoreFile event handler to override default file name or 
            change its attributes before storing this file into the archive. 
            The event is fired when <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> is called.
            </remarks>
        </member>
        <member name="T:ComponentAce.Compression.GZip.GzipForge.OnArchiveSingleFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnArchiveSingleFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="item">The item that will be archived.</param>
            <seealso cref="E:ComponentAce.Compression.GZip.GzipForge.OnArchiveSingleFile"/>
        </member>
        <member name="T:ComponentAce.Compression.GZip.GzipForge.OnSetNameForFilesWithoutNameDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnSetNameForFilesWithoutName"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="fileName">Indicates the current file name.</param>
            <param name="cancel">If is set to <c><b>true</b></c>, the current operation will be canceled.</param>
            <param name="removeItem">Indicates whether to remove the current item.</param>
            <seealso cref="E:ComponentAce.Compression.GZip.GzipForge.OnSetNameForFilesWithoutName"/>
        </member>
        <member name="T:ComponentAce.Compression.GZip.GzipForge.OnExtractFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnExtractFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="item">Specifies the archive item being extracted from the archive.</param>
            <seealso cref="E:ComponentAce.Compression.GZip.GzipForge.OnExtractFile"/>
        </member>
        <member name="T:ComponentAce.Compression.GZip.GzipForge.OnStoreFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.GZip.GzipForge.OnStoreFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="item">Specifies the archive item being added to the archive.</param>
            <seealso cref="E:ComponentAce.Compression.GZip.GzipForge.OnStoreFile"/>
        </member>
        <member name="T:ComponentAce.Compression.GZip.GzipItem">
            <summary>
            Inner archive item for gzip archiver.
            </summary>
            <exclude/>
            <exclude />
        </member>
        <member name="T:ComponentAce.Compression.Interfaces.IItem">
            <summary>
            Item for the archive.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:59
            <exclude />
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItem.WriteLocalHeaderToStream(System.IO.Stream,System.Int32)">
            <summary>
            Writes the local header to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:59
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItem.GetDataOffset">
            <summary>
            Returns an offset of the compressed file data relative to the item local header position
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItem.Reset">
            <summary>
            Resets this instance.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:59
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItem.GetArchiveItem(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Gets the archive item.
            </summary>
            <param name="archiveItem">The archive item.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:59
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItem.CopyFrom(ComponentAce.Compression.Archiver.BaseArchiveItem)">
            <summary>
            Copies from.
            </summary>
            <param name="archiveItem">The archive item.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:59
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItem.IsDirectory">
            <summary>
            Determines whether this instance is directory.
            </summary>
            <returns>
            	<c>true</c> if this instance is directory; otherwise, <c>false</c>.
            </returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:59
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItem.GetLocalHeaderSize">
            <summary>
            Gets the size of the local header.
            </summary>
            <returns></returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 26.04.2010  16:39
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.OldName">
            <summary>
            Gets the old name.
            </summary>
            <value>The old name.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:58
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:58
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.SrcFileName">
            <summary>
            Gets/Sets the source file name used to add/move/update
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.Operation">
            <summary>
            Gets/Sets the operation that should be applied to the current directory item
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.Stream">
            <summary>
            Get/Sets source data stream (when there is no file)
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.IsModified">
            <summary>
            If the item was updated or added (that is modified)
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.IsTagged">
            <summary>
            Is the current directory item was tagged for group operations
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.StreamPosition">
            <summary>
            Gets/Sets starting position of the dir item in this stream
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.NeedDestroyStream">
            <summary>
            If we need to destroy stream
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.UncompressedSize">
            <summary>
            Gets/Sets the uncompSize value for the Central dir object if the value is less than 0xFFFFFFFF and 
            from the Zip64ExtraField otherwise
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.RelativeLocalHeaderOffset">
            <summary>
            Gets/Sets the relOffsetLH value for the Central dir object if the value is less than 0xFFFFFFFF or 
            from the Zip64Extra Field otherwise
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.LastFileModificationTime">
            <summary>
            Gets/Sets the lastModTime value for the Central dir object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItem.ExternalAttributes">
            <summary>
            Gets the external attributes.
            </summary>
            <value>The external attributes.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:59
        </member>
        <member name="E:ComponentAce.Compression.Interfaces.IItem.ItemNameChanged">
            <summary>
            The event is fired when the DirItem name is changed.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 27.04.2010  11:32
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.#ctor(ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.GZip.GzipItem"/> class.
            </summary>
            <param name="writeToStreamFailureDelegate">The write to stream failure delegate.</param>
            <param name="readFromStreamFailureDelegate">The read from stream failure delegate.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:51
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.#ctor(System.String,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.GZip.GzipItem"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="writeToStreamFailureDelegate">The write to stream failure delegate.</param>
            <param name="readFromStreamFailureDelegate">The read from stream failure delegate.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:51
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipItem.ExtraFlags">
            <summary>
            Gets or sets value of the extra flag.
            </summary>
            <value>The extra flag value.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:51
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipItem.Flag">
            <summary>
            Gets or sets the flag value.
            </summary>
            <value>The flag value.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:52
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipItem.Id1">
            <summary>
            Gets or sets the id1 signature.
            </summary>
            <value>The id1 signature.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:52
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipItem.Id2">
            <summary>
            Gets or sets the id2 signature.
            </summary>
            <value>The id2 signature.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:52
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipItem.OperationSystem">
            <summary>
            Gets or sets the destination operation system.
            </summary>
            <value>The destination operation system.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:53
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipItem.HeaderCrc">
            <summary>
            Gets or sets the header CRC.
            </summary>
            <value>The header CRC.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:53
        </member>
        <member name="F:ComponentAce.Compression.GZip.GzipItem._backupFileName">
            <summary>
            Name of the file where ma
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:54
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.WriteLocalHeaderToStream(System.IO.Stream,System.Int32)">
            <summary>
            Writes the local header to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:59
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.GetDataOffset">
            <summary>
            Returns an offset of the compressed file data relative to the item local header position
            </summary>
            <returns></returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:00
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.ReCalculateHeaderCRC">
            <summary>
            Calculate header crc once again.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:00
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.Reset">
            <summary>
            Resets this instance.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:00
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.GetArchiveItem(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Gets the archive item.
            </summary>
            <param name="baseArchiveItem">The archive item.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:00
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.CopyFrom(ComponentAce.Compression.Archiver.BaseArchiveItem)">
            <summary>
            Copies from.
            </summary>
            <param name="baseArchiveItem">The archive item.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:00
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.IsDirectory">
            <summary>
            Determines whether this instance is directory.
            </summary>
            <returns>
            	<c>true</c> if this instance is directory; otherwise, <c>false</c>.
            </returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:00
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.GetLocalHeaderSize">
            <summary>
            Gets the size of the local header.
            </summary>
            <returns></returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:02
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.IsFlagBitSet(System.Int32)">
            <summary>
            Determines whether flag bit with the specified bit index is set.
            </summary>
            <param name="bitIndex">Index of the bit.</param>
            <returns>
            	<c>true</c> if flag bit with the specified bit index is set; otherwise, <c>false</c>.
            </returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:01
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.SetFlagFlagBit(System.Int32)">
            <summary>
            Sets the flag flag bit.
            </summary>
            <param name="bitIndex">Index of the bit.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:01
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItem.RemoveFlagBit(System.Int32)">
            <summary>
            Removes the flag bit.
            </summary>
            <param name="bitIndex">Index of the bit.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:01
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.CompressionMethod">
            <summary>
            Gets or sets the compression method.
            </summary>
            <value>The compression method.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:52
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.ExtraFieldLenToRead">
            <summary>
            Gets or sets the extra field length to read.
            </summary>
            <value>The extra field length to read.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:53
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.Comment">
            <summary>
            Gets or sets the comment to the item.
            </summary>
            <value>The comment to the item.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:53
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.ExtraFieldData">
            <summary>
            Gets or sets the extra field data.
            </summary>
            <value>The extra field data.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:53
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.CompressedSize">
            <summary>
            Gets or sets compressed size of the item.
            </summary>
            <value>Compressed size.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:53
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.Crc32">
            <summary>
            Gets or sets the CRC32 for compressed data.
            </summary>
            <value>Compressed data CRC32.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:54
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.OldName">
            <summary>
            Gets the old name.
            </summary>
            <value>The old name.</value>
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.SrcFileName">
            <summary>
            Gets/Sets the source file name used to add/move/update
            </summary>
            <value>Source file name</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:55
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.Operation">
            <summary>
            Gets/Sets the operation that should be applied to the current directory item
            </summary>
            <value>Operation.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:55
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.Stream">
            <summary>
            Get/Sets source data stream (when there is no file)
            </summary>
            <value>Stream.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:55
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.IsModified">
            <summary>
            If the item was updated or added (that is modified)
            </summary>
            <value>Modified status.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:55
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.IsTagged">
            <summary>
            Is the current directory item was tagged for group operations
            </summary>
            <value>Tagged status.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:55
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.NeedToStoreHeaderCRC">
            <summary>
            Gets or sets a value indicating whether header crc would be stored.
            </summary>
            <value>
            	<c>true</c> if header crc need to be stored; otherwise, <c>false</c>.
            </value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:56
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.StreamPosition">
            <summary>
            Gets/Sets starting position of the item in this stream
            </summary>
            <value>Position in the stream.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:56
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.NeedDestroyStream">
            <summary>
            If we need to destroy stream
            </summary>
            <value>Destroy stream value.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:56
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.UncompressedSize">
            <summary>
            Gets/Sets the uncompressed size value.
            </summary>
            <value>Uncompressed size.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:56
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.RelativeLocalHeaderOffset">
            <summary>
            Gets/Sets the relative header offset.
            </summary>
            <value>Local header offset.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:57
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.LastFileModificationTime">
            <summary>
            Gets/Sets the last modification time value.
            </summary>
            <value>Last modification time.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:58
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.ExternalAttributes">
            <summary>
            Gets the external attributes.
            </summary>
            <value>The external attributes.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:59
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.CompressionMode">
            <summary>
            Gets or sets the compression mode.
            </summary>
            <value>The compression mode.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:59
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.DestinationStream">
            <summary>
            Gets or sets the destination stream.
            </summary>
            <value>The destination stream.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:59
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItem.NeedToDestroyDestinationStream">
            <summary>
            Gets or sets a value indicating whether need to destroy destination stream.
            </summary>
            <value>
            	<c>true</c> if need to destroy destination stream; otherwise, <c>false</c>.
            </value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:59
        </member>
        <member name="E:ComponentAce.Compression.GZip.GzipItem.ItemNameChanged">
            <summary>
            The event is fired when the DirItem name is changed.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:02
        </member>
        <member name="T:ComponentAce.Compression.GZip.GzipItemsHandler">
            <summary>
            Items handler for gzip archive.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:37
            <exclude/>
        </member>
        <member name="T:ComponentAce.Compression.Interfaces.IItemsHandler">
            <summary>
            Manages items in the archive.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:53
            <exclude />
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItemsHandler.LoadItemsArray">
            <summary>
            Loads the items array.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:56
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItemsHandler.SaveItemsArray">
            <summary>
            Saves the items array.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:56
        </member>
        <member name="M:ComponentAce.Compression.Interfaces.IItemsHandler.SaveItemsArray(System.IO.Stream)">
            <summary>
            Saves the items array to the <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream that will be used to save items array.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:56
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItemsHandler.ItemsArray">
            <summary>
            Gets or sets the items array.
            </summary>
            <value>The items array.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:53
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IItemsHandler.ItemsArrayBackup">
            <summary>
            Gets or sets backup of the items array.
            </summary>
            <value>The items array backup.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:55
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItemsHandler.#ctor(System.IO.Stream,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.GZip.GzipItemsHandler"/> class.
            </summary>
            <param name="gzipStream">The gzip stream.</param>
            <param name="writeToStreamFailureDelegate">The write to stream failure delegate.</param>
            <param name="readFromStreamFailureDelegate">The read from stream failure delegate.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:38
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItemsHandler.LoadItemsArray">
            <summary>
            Loads the items array.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:38
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItemsHandler.SaveItemsArray">
            <summary>
            Saves the items array.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:38
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItemsHandler.SaveItemsArray(System.IO.Stream)">
            <summary>
            Saves the items array to the <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream that will be used to save items array.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:38
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipItemsHandler.SaveItemToStream(System.IO.Stream,System.Int32)">
            <summary>
            Saves the item to stream.
            </summary>
            <param name="stream">The stream that will be used to save item.</param>
            <param name="itemNo">Number of the item to save.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:38
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItemsHandler.ItemsArray">
            <summary>
            Gets or sets the items array.
            </summary>
            <value>The items array.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:38
        </member>
        <member name="P:ComponentAce.Compression.GZip.GzipItemsHandler.ItemsArrayBackup">
            <summary>
            Gets or sets backup of the items array.
            </summary>
            <value>The items array backup.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 19.05.2010  13:38
        </member>
        <member name="M:ComponentAce.Compression.GZip.GzipReader.DoOnReadFromStreamFailure(System.Exception,System.Boolean@)">
            <summary>
            Occurs in a case of failure of reading from the stream operation.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 21.04.2010  13:15
        </member>
        <member name="T:ComponentAce.Compression.InputPasswordForm">
            <summary>
            Summary description for InputPasswordForm.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.InputPasswordForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.InputPasswordForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.InputPasswordForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Interfaces.IInternalSearchRec">
            <summary>
            Internal record for search info.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:42
            <exclude />
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IInternalSearchRec.ItemNo">
            <summary>
            Current item No.
            </summary>
            <value>The item no.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:39
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IInternalSearchRec.CFindMask">
            <summary>
            Gets or sets the mask for FindNext.
            </summary>
            <value>The mask for FindNext.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:39
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IInternalSearchRec.FWildCards">
            <summary>
            Gets or sets a value indicating whether to use wildcards in Find mask.
            </summary>
            <value><c>true</c> if use wildcards in Find mask; otherwise, <c>false</c>.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:40
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IInternalSearchRec.FFindAttr">
            <summary>
            Gets or sets the attributes for FinidFirst/Next.
            </summary>
            <value>The find attributes.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:40
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IInternalSearchRec.ExclusionMask">
            <summary>
            Gets or sets the files exclusion mask.
            </summary>
            <value>The files exclusion mask.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:41
        </member>
        <member name="P:ComponentAce.Compression.Interfaces.IInternalSearchRec.UseProperties">
            <summary>
            Gets or sets a value indicating whether to use FileMasks, ExclusionMasks properties.
            </summary>
            <value><c>true</c> if use FileMasks, ExclusionMasks properties; otherwise, <c>false</c>.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:41
        </member>
        <member name="T:ComponentAce.Compression.Archiver.OverwriteMode">
            <summary>
            Specifies behavior when extracting over already existing files.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.OverwriteMode.Prompt">
            <summary>
            <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnConfirmOverwrite"></see> event will be triggered each time before overwriting existing file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.OverwriteMode.Always">
            <summary>
            All existing files will be replaced with extracted files.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.OverwriteMode.Never">
            <summary>
            Files will not be replaced.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.OverwriteMode.IfNewer">
            <summary>
            Older versions of files will be replaced with extracted newer files.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.OverwriteMode.IfOlder">
            <summary>
            Newer versions of files will be replaced with extracted older files.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ProcessOperation">
            <summary>
            Specifies type of an operation being performed over an archive item.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProcessOperation.Add">
            <summary>Adds the item to the archive.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProcessOperation.Move">
            <summary>Moves the item into the archive.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProcessOperation.Delete">
            <summary>Deletes the item from the archive.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProcessOperation.Update">
            <summary>Updates the item in the archive.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProcessOperation.Extract">
            <summary>Extracts an item from the archive.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProcessOperation.Test">
            <summary>Tests an archive item.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProcessOperation.Rename">
            <summary>Rename an archive item.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProcessOperation.ChangeAttr">
            <summary>Changes attributes of an archive item.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProcessOperation.ChangeComment">
            <summary>Changes comments of an archive item.</summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ProgressPhase">
            <summary>
            Specifies a phase of the current archive operation.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProgressPhase.Start">
            <summary>
            This value corresponds to the end phase of the operation.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProgressPhase.Process">
            <summary>
            This value corresponds to the middle phase of the operation.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ProgressPhase.End">
            <summary>
            This value corresponds to the start phase of the operation.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.StorePathMode">
             <summary>
             Specifies how path information will be stored for the file or directory within the archive file.
             </summary>
            <remarks>
             StorePathMode value defines how path information will be stored for the file or directory within the archive file. If you need to store all files and directories without path you should use NoPath value. For example, AddFiles("C:\TEST\test.txt") adds file test.txt to the archive. If you will extract it by ExtractFiles("*.*") and BaseDir will be "C:\", file test.txt will be extracted to "C\":, not to "C:\TEST". 
             <para>If you need to store path relative to certain directory you should set BaseDir before adding file to archive and set Options.StorePath to Relative. In this case if you will set BaseDir to "C:\" and call AddFiles("C:\TEST\test.txt") the file test.txt will be stored as "TEST\test.txt" within the archive. If you will extract it by ExtractFiles("*.*") it will be extracted to "C:\TEST\test.txt", not to "C:\" as in previous example.</para>
             <para>If you need to store full path you should set Options.StorePath to FullPath. Previous example will store test.txt within the archive file as "\TEST\test.txt" and file will be extracted to disk specified by BaseDir.</para>
             <para>If you need to store absolute path with drive you should set Options.StorePath to FullPathWithDrive. Previous AddFiles example will store test.txt within the archive file as "C:\TEST\test.txt" and the file will be extracted to disk using stored absolute path regardless of BaseDir.</para>
             </remarks>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.StorePathMode.NoPath">
            <summary>
            No path information stored.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.StorePathMode.RelativePath">
            <summary>
            Path information stored relatively BaseDir.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.StorePathMode.FullPath">
            <summary>
            Path information stored relatively disk specified by BaseDir.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.StorePathMode.FullPathWithDrive">
            <summary>
            Absolute path with drive letter stored. Non-standard extension of PKZip format.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.Allocator">
            <summary>
            Allocate a single, large array and then provide sections of this array to callers.  Callers are provided with
            instances of <see cref="T:ComponentAce.Compression.Libs.PPMd.Pointer"/> (which simply contain a single address value, representing a location
            in the large array).
            </summary>
            <remarks>
            Note that in most cases fields are used rather than properties for performance reasons (for example,
            <see cref="F:ComponentAce.Compression.Libs.PPMd.Allocator.AllocatorSize"/> is a field rather than a property).
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.#cctor">
            <summary>
            Initializes static read-only arrays used by the <see cref="T:ComponentAce.Compression.Libs.PPMd.Allocator"/>.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.Initialize">
            <summary>
            Initialize or reset the memory allocator (so that the single, large array can be re-used without destroying
            and re-creating it).
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.Start(System.Int32)">
            <summary>
            Start the allocator (create a single, large array of bytes).
            </summary>
            <remarks>
            Note that .NET will create that array on the large object heap (because it is so large).
            </remarks>
            <param name="allocatorSize"></param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.Stop">
            <summary>
            Stop the allocator (free the single, large array of bytes).  This can safely be called multiple times (without
            intervening calls to <see cref="M:ComponentAce.Compression.Libs.PPMd.Allocator.Start(System.Int32)"/>).
            </summary>
            <remarks>
            Because the array is on the large object heap it may not be freed immediately.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.GetMemoryUsed">
            <summary>
            Determine how much memory (from the single, large array) is currenly in use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.AllocateUnits(System.UInt32)">
            <summary>
            Allocate a given number of units from the single, large array.  Each unit is <see cref="F:ComponentAce.Compression.Libs.PPMd.Allocator.UnitSize"/> bytes
            in size.
            </summary>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.AllocateContext">
            <summary>
            Allocate enough space for a <see cref="T:ComponentAce.Compression.Libs.PPMd.Model.PpmContext"/> instance in the single, large array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.ExpandUnits(ComponentAce.Compression.Libs.PPMd.Pointer,System.UInt32)">
            <summary>
            Increase the size of an existing allocation (represented by a <see cref="T:ComponentAce.Compression.Libs.PPMd.Pointer"/>).
            </summary>
            <param name="oldPointer"></param>
            <param name="oldUnitCount"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.ShrinkUnits(ComponentAce.Compression.Libs.PPMd.Pointer,System.UInt32,System.UInt32)">
            <summary>
            Decrease the size of an existing allocation (represented by a <see cref="T:ComponentAce.Compression.Libs.PPMd.Pointer"/>).
            </summary>
            <param name="oldPointer"></param>
            <param name="oldUnitCount"></param>
            <param name="newUnitCount"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.FreeUnits(ComponentAce.Compression.Libs.PPMd.Pointer,System.UInt32)">
            <summary>
            Free previously allocated space (the location and amount of space to free must be specified by using
            a <see cref="T:ComponentAce.Compression.Libs.PPMd.Pointer"/> to indicate the location and a number of units to indicate the amount).
            </summary>
            <param name="pointer"></param>
            <param name="unitCount"></param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Allocator.ExpandText">
            <summary>
            Expand the space allocated (in the single, large array) for the bytes of the data (ie. the "text") that is
            being encoded or decoded.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.Coder">
            <summary>
            A simple range coder.
            </summary>
            <remarks>
            Note that in most cases fields are used rather than properties for performance reasons (for example,
            <see cref="F:ComponentAce.Compression.Libs.PPMd.Coder.Scale"/> is a field rather than a property).
            </remarks>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.MemoryNode">
            <summary>
            A structure containing a single address.  The address represents a location in the <see cref="F:ComponentAce.Compression.Libs.PPMd.MemoryNode.Memory"/>
            array.  That location in the <see cref="F:ComponentAce.Compression.Libs.PPMd.MemoryNode.Memory"/> array contains information itself describing a section
            of the <see cref="F:ComponentAce.Compression.Libs.PPMd.MemoryNode.Memory"/> array (ie. a block of memory).
            </summary>
            <remarks>
            <para>
            This must be a structure rather than a class because several places in the associated code assume that
            <see cref="T:ComponentAce.Compression.Libs.PPMd.MemoryNode"/> is a value type (meaning that assignment creates a completely new copy of
            the instance rather than just copying a reference to the same instance).
            </para>
            <para>
            MemoryNode
                4 Stamp
                4 Next
                4 UnitCount
            </para>
            <para>
            Note that <see cref="F:ComponentAce.Compression.Libs.PPMd.MemoryNode.Address"/> is a field rather than a property for performance reasons.
            </para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Libs.PPMd.MemoryNode"/> structure.
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.Link(ComponentAce.Compression.Libs.PPMd.MemoryNode)">
            <summary>
            Link in the provided memory node.
            </summary>
            <param name="memoryNode"></param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.Unlink">
            <summary>
            Unlink this memory node.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.Insert(ComponentAce.Compression.Libs.PPMd.MemoryNode,System.UInt32)">
            <summary>
            Insert the memory node into the linked list.
            </summary>
            <param name="memoryNode"></param>
            <param name="unitCount"></param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.Remove">
            <summary>
            Remove this memory node from the linked list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.op_Implicit(ComponentAce.Compression.Libs.PPMd.Pointer)~ComponentAce.Compression.Libs.PPMd.MemoryNode">
            <summary>
            Allow a pointer to be implicitly converted to a memory node.
            </summary>
            <param name="pointer"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.op_Addition(ComponentAce.Compression.Libs.PPMd.MemoryNode,System.Int32)">
            <summary>
            Allow pointer-like addition on a memory node.
            </summary>
            <param name="memoryNode"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.op_Addition(ComponentAce.Compression.Libs.PPMd.MemoryNode,System.UInt32)">
            <summary>
            Allow pointer-like addition on a memory node.
            </summary>
            <param name="memoryNode"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.op_Subtraction(ComponentAce.Compression.Libs.PPMd.MemoryNode,System.Int32)">
            <summary>
            Allow pointer-like subtraction on a memory node.
            </summary>
            <param name="memoryNode"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.op_Subtraction(ComponentAce.Compression.Libs.PPMd.MemoryNode,System.UInt32)">
            <summary>
            Allow pointer-like subtraction on a memory node.
            </summary>
            <param name="memoryNode"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.op_Equality(ComponentAce.Compression.Libs.PPMd.MemoryNode,ComponentAce.Compression.Libs.PPMd.MemoryNode)">
            <summary>
            Compare two memory nodes.
            </summary>
            <param name="memoryNode1"></param>
            <param name="memoryNode2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.op_Inequality(ComponentAce.Compression.Libs.PPMd.MemoryNode,ComponentAce.Compression.Libs.PPMd.MemoryNode)">
            <summary>
            Compare two memory nodes.
            </summary>
            <param name="memoryNode1"></param>
            <param name="memoryNode2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>true if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
            <param name="obj">Another object to compare to.</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.MemoryNode.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.MemoryNode.Stamp">
            <summary>
            Gets or sets the stamp.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.MemoryNode.Next">
            <summary>
            Gets or sets the next memory node.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.MemoryNode.UnitCount">
            <summary>
            Gets or sets the unit count.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.MemoryNode.Available">
            <summary>
            Gets whether there is a next memory node available.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.Model">
            <summary>
            The model.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.Encode(System.IO.Stream,System.IO.Stream,System.Int32,ComponentAce.Compression.Libs.PPMd.ModelRestorationMethod)">
            <summary>
            Encode (ie. compress) a given source stream, writing the encoded result to the target stream.
            </summary>
            <param name="target"></param>
            <param name="source"></param>
            <param name="modelOrder"></param>
            <param name="modelRestorationMethod"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.Decode(System.IO.Stream,System.IO.Stream,System.Int32,ComponentAce.Compression.Libs.PPMd.ModelRestorationMethod)">
            <summary>
            Dencode (ie. decompress) a given source stream, writing the decoded result to the target stream.
            </summary>
            <param name="target"></param>
            <param name="source"></param>
            <param name="modelOrder"></param>
            <param name="modelRestorationMethod"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.StartModel(System.Int32,ComponentAce.Compression.Libs.PPMd.ModelRestorationMethod)">
            <summary>
            Initialise the model (unless the model order is set to 1 in which case the model should be cleared so that
            the statistics are carried over, allowing "solid" mode compression).
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.Model.PpmContext">
            <summary>
            The structure which represents the current PPM context.  This is 12 bytes in size.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Libs.PPMd.Model.PpmContext"/> structure.
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.op_Implicit(ComponentAce.Compression.Libs.PPMd.Pointer)~ComponentAce.Compression.Libs.PPMd.Model.PpmContext">
            <summary>
            Allow a pointer to be implicitly converted to a PPM context.
            </summary>
            <param name="pointer"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.op_Addition(ComponentAce.Compression.Libs.PPMd.Model.PpmContext,System.Int32)">
            <summary>
            Allow pointer-like addition on a PPM context.
            </summary>
            <param name="context"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.op_Subtraction(ComponentAce.Compression.Libs.PPMd.Model.PpmContext,System.Int32)">
            <summary>
            Allow pointer-like subtraction on a PPM context.
            </summary>
            <param name="context"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.op_LessThanOrEqual(ComponentAce.Compression.Libs.PPMd.Model.PpmContext,ComponentAce.Compression.Libs.PPMd.Model.PpmContext)">
            <summary>
            Compare two PPM contexts.
            </summary>
            <param name="context1"></param>
            <param name="context2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.op_GreaterThanOrEqual(ComponentAce.Compression.Libs.PPMd.Model.PpmContext,ComponentAce.Compression.Libs.PPMd.Model.PpmContext)">
            <summary>
            Compare two PPM contexts.
            </summary>
            <param name="context1"></param>
            <param name="context2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.op_Equality(ComponentAce.Compression.Libs.PPMd.Model.PpmContext,ComponentAce.Compression.Libs.PPMd.Model.PpmContext)">
            <summary>
            Compare two PPM contexts.
            </summary>
            <param name="context1"></param>
            <param name="context2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.op_Inequality(ComponentAce.Compression.Libs.PPMd.Model.PpmContext,ComponentAce.Compression.Libs.PPMd.Model.PpmContext)">
            <summary>
            Compare two PPM contexts.
            </summary>
            <param name="context1"></param>
            <param name="context2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>true if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
            <param name="obj">Another object to compare to.</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.NumberStatistics">
            <summary>
            Gets or sets the number statistics.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.SummaryFrequency">
            <summary>
            Gets or sets the summary frequency.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.Statistics">
            <summary>
            Gets or sets the statistics.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.FirstState">
            <summary>
            The first PPM state associated with the PPM context.
            </summary>
            <remarks>
            <para>
            The first PPM state overlaps this PPM context instance (the SummaryFrequency and Statistics members
            of PpmContext use 6 bytes and so can therefore fit into the space used by the Symbol, Frequency and
            Successor members of PpmState, since they also add up to 6 bytes).
            </para>
            <para>
            PpmContext (SummaryFrequency and Statistics use 6 bytes)
                1 NumberStatistics
                1 Flags
                2 SummaryFrequency
                4 Statistics (pointer to PpmState)
                4 Suffix (pointer to PpmContext)
            </para>
            <para>
            PpmState (total of 6 bytes)
                1 Symbol
                1 Frequency
                4 Successor (pointer to PpmContext)
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.FirstStateSymbol">
            <summary>
            Gets or sets the symbol of the first PPM state.  This is provided for convenience.  The same
            information can be obtained using the Symbol property on the PPM state provided by the
            <see cref="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.FirstState"/> property.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.FirstStateFrequency">
            <summary>
            Gets or sets the frequency of the first PPM state.  This is provided for convenience.  The same
            information can be obtained using the Frequency property on the PPM state provided by the
            <see cref="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.FirstState"/> property.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.FirstStateSuccessor">
            <summary>
            Gets or sets the successor of the first PPM state.  This is provided for convenience.  The same
            information can be obtained using the Successor property on the PPM state provided by the
            <see cref="P:ComponentAce.Compression.Libs.PPMd.Model.PpmContext.FirstState"/> property.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.ModelRestorationMethod">
            <summary>
            The method used to adjust the model when the memory limit is reached.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.PPMd.ModelRestorationMethod.Restart">
            <summary>
            Restart the model from scratch (this is the default).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.PPMd.ModelRestorationMethod.CutOff">
            <summary>
            Cut off the model (nearly twice as slow).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.PPMd.ModelRestorationMethod.Freeze">
            <summary>
            Freeze the context tree (in some cases may result in poor compression).
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.Options">
            <summary>
            Command line options that modify the manner in which the command line action is performed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.PPMd.Options.None">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.PPMd.Options.Checksum">
            <summary>
            Calculate the Crc (ie. checksum) for files.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.PPMd.Options.Delete">
            <summary>
            Delete files (if encoding then delete the file after it has been compressed into the archive; otherwise,
            if decoding then delete the archive after all files have been decompressed from the archive).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.PPMd.Options.Quiet">
            <summary>
            Do not prompt for files to be deleted or overwritten.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.PPMd.Options.Solid">
            <summary>
            Compress files based on the content of other files (typically produces smaller archives).
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.Pointer">
            <summary>
            A structure containing a single address representing a position in the <see cref="F:ComponentAce.Compression.Libs.PPMd.Pointer.Memory"/> array.  This
            is intended to mimic the behaviour of a pointer in C/C++.
            </summary>
            <remarks>
            <para>
            This must be a structure rather than a class because several places in the associated code assume that
            <see cref="T:ComponentAce.Compression.Libs.PPMd.Pointer"/> is a value type (meaning that assignment creates a completely new copy of the
            instance rather than just copying a reference to the same instance).
            </para>
            <para>
            Note that <see cref="F:ComponentAce.Compression.Libs.PPMd.Pointer.Address"/> is a field rather than a property for performance reasons.
            </para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Libs.PPMd.Pointer"/> structure.
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Implicit(ComponentAce.Compression.Libs.PPMd.MemoryNode)~ComponentAce.Compression.Libs.PPMd.Pointer">
            <summary>
            Allow a <see cref="T:ComponentAce.Compression.Libs.PPMd.MemoryNode"/> to be implicitly converted to a <see cref="T:ComponentAce.Compression.Libs.PPMd.Pointer"/>.
            </summary>
            <param name="memoryNode"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Implicit(ComponentAce.Compression.Libs.PPMd.Model.PpmContext)~ComponentAce.Compression.Libs.PPMd.Pointer">
            <summary>
            Allow a <see cref="T:ComponentAce.Compression.Libs.PPMd.Model.PpmContext"/> to be implicitly converted to a <see cref="T:ComponentAce.Compression.Libs.PPMd.Pointer"/>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Implicit(ComponentAce.Compression.Libs.PPMd.PpmState)~ComponentAce.Compression.Libs.PPMd.Pointer">
            <summary>
            Allow a <see cref="T:ComponentAce.Compression.Libs.PPMd.PpmState"/> to be implicitly converted to a <see cref="T:ComponentAce.Compression.Libs.PPMd.Pointer"/>.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Addition(ComponentAce.Compression.Libs.PPMd.Pointer,System.Int32)">
            <summary>
            Increase the address of a pointer by the given number of bytes.
            </summary>
            <param name="pointer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Addition(ComponentAce.Compression.Libs.PPMd.Pointer,System.UInt32)">
            <summary>
            Increase the address of a pointer by the given number of bytes.
            </summary>
            <param name="pointer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Increment(ComponentAce.Compression.Libs.PPMd.Pointer)">
            <summary>
            Increment the address of a pointer.
            </summary>
            <param name="pointer"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Subtraction(ComponentAce.Compression.Libs.PPMd.Pointer,System.Int32)">
            <summary>
            Decrease the address of a pointer by the given number of bytes.
            </summary>
            <param name="pointer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Subtraction(ComponentAce.Compression.Libs.PPMd.Pointer,System.UInt32)">
            <summary>
            Decrease the address of a pointer by the given number of bytes.
            </summary>
            <param name="pointer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Decrement(ComponentAce.Compression.Libs.PPMd.Pointer)">
            <summary>
            Decrement the address of a pointer.
            </summary>
            <param name="pointer"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Subtraction(ComponentAce.Compression.Libs.PPMd.Pointer,ComponentAce.Compression.Libs.PPMd.Pointer)">
            <summary>
            Subtract two pointers.
            </summary>
            <param name="pointer1"></param>
            <param name="pointer2"></param>
            <returns>The number of bytes between the two pointers.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_LessThan(ComponentAce.Compression.Libs.PPMd.Pointer,ComponentAce.Compression.Libs.PPMd.Pointer)">
            <summary>
            Compare pointers.
            </summary>
            <param name="pointer1"></param>
            <param name="pointer2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_LessThanOrEqual(ComponentAce.Compression.Libs.PPMd.Pointer,ComponentAce.Compression.Libs.PPMd.Pointer)">
            <summary>
            Compare two pointers.
            </summary>
            <param name="pointer1"></param>
            <param name="pointer2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_GreaterThan(ComponentAce.Compression.Libs.PPMd.Pointer,ComponentAce.Compression.Libs.PPMd.Pointer)">
            <summary>
            Compare two pointers.
            </summary>
            <param name="pointer1"></param>
            <param name="pointer2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_GreaterThanOrEqual(ComponentAce.Compression.Libs.PPMd.Pointer,ComponentAce.Compression.Libs.PPMd.Pointer)">
            <summary>
            Compare two pointers.
            </summary>
            <param name="pointer1"></param>
            <param name="pointer2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Equality(ComponentAce.Compression.Libs.PPMd.Pointer,ComponentAce.Compression.Libs.PPMd.Pointer)">
            <summary>
            Compare two pointers.
            </summary>
            <param name="pointer1"></param>
            <param name="pointer2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.op_Inequality(ComponentAce.Compression.Libs.PPMd.Pointer,ComponentAce.Compression.Libs.PPMd.Pointer)">
            <summary>
            Compare two pointers.
            </summary>
            <param name="pointer1"></param>
            <param name="pointer2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>true if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
            <param name="obj">Another object to compare to.</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.Pointer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.Pointer.Item(System.Int32)">
            <summary>
            Gets or sets the byte at the given <paramref name="offset"/>.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.PpmState">
            <summary>
            PPM state.
            </summary>
            <remarks>
            <para>
            This must be a structure rather than a class because several places in the associated code assume that
            <see cref="T:ComponentAce.Compression.Libs.PPMd.PpmState"/> is a value type (meaning that assignment creates a completely new copy of the
            instance rather than just copying a reference to the same instance).
            </para>
            <para>
            Note that <see cref="F:ComponentAce.Compression.Libs.PPMd.PpmState.Address"/> is a field rather than a property for performance reasons.
            </para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Libs.PPMd.PpmState"/> structure.
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.op_Implicit(ComponentAce.Compression.Libs.PPMd.Pointer)~ComponentAce.Compression.Libs.PPMd.PpmState">
            <summary>
            Allow a pointer to be implicitly converted to a PPM state.
            </summary>
            <param name="pointer"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.op_Addition(ComponentAce.Compression.Libs.PPMd.PpmState,System.Int32)">
            <summary>
            Allow pointer-like addition on a PPM state.
            </summary>
            <param name="state"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.op_Increment(ComponentAce.Compression.Libs.PPMd.PpmState)">
            <summary>
            Allow pointer-like incrementing on a PPM state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.op_Subtraction(ComponentAce.Compression.Libs.PPMd.PpmState,System.Int32)">
            <summary>
            Allow pointer-like subtraction on a PPM state.
            </summary>
            <param name="state"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.op_Decrement(ComponentAce.Compression.Libs.PPMd.PpmState)">
            <summary>
            Allow pointer-like decrementing on a PPM state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.op_LessThanOrEqual(ComponentAce.Compression.Libs.PPMd.PpmState,ComponentAce.Compression.Libs.PPMd.PpmState)">
            <summary>
            Compare two PPM states.
            </summary>
            <param name="state1"></param>
            <param name="state2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.op_GreaterThanOrEqual(ComponentAce.Compression.Libs.PPMd.PpmState,ComponentAce.Compression.Libs.PPMd.PpmState)">
            <summary>
            Compare two PPM states.
            </summary>
            <param name="state1"></param>
            <param name="state2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.op_Equality(ComponentAce.Compression.Libs.PPMd.PpmState,ComponentAce.Compression.Libs.PPMd.PpmState)">
            <summary>
            Compare two PPM states.
            </summary>
            <param name="state1"></param>
            <param name="state2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.op_Inequality(ComponentAce.Compression.Libs.PPMd.PpmState,ComponentAce.Compression.Libs.PPMd.PpmState)">
            <summary>
            Compare two PPM states.
            </summary>
            <param name="state1"></param>
            <param name="state2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>true if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
            <param name="obj">Another object to compare to.</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.PPMd.PpmState.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.PpmState.Symbol">
            <summary>
            Gets or sets the symbol.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.PpmState.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.PpmState.Successor">
            <summary>
            Gets or sets the successor.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.PPMd.PpmState.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ComponentAce.Compression.Libs.PPMd.PpmState"/> at the <paramref name="offset"/> relative to this
            <see cref="T:ComponentAce.Compression.Libs.PPMd.PpmState"/>.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentAce.Compression.Libs.PPMd.See2Context">
            <summary>
            SEE2 (secondary escape estimation) contexts for PPM contexts with masked symbols.
            </summary>
            <remarks>
            <para>
            This must be a class rather than a structure because MakeEscapeFrequency returns a See2Context
            instance from the see2Contexts array.  The caller (for example, EncodeSymbol2) then updates the
            returned See2Context instance and expects the updates to be reflected in the see2Contexts array.
            This would not happen if this were a structure.
            </para>
            <remarks>
            Note that in most cases fields are used rather than properties for performance reasons (for example,
            <see cref="F:ComponentAce.Compression.Libs.PPMd.See2Context.Shift"/> is a field rather than a property).
            </remarks>
            </remarks>
        </member>
        <member name="T:ComponentAce.Compression.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Tar.TarBaseForge">
            <summary>
            Contains all the routines to work with tar- and tgz-files.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:28
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.SaveRenamedItemToArchive(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Saves the renamed item from backup file stream to archive.
            </summary>
            <param name="backupFileStream">The backup file stream.</param>
            <param name="compressedStream">The compressed stream.</param>
            <param name="itemNo">Number of the item to save.</param>
            <param name="itemNoInBackupArray">Number of the item in backup array.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:40
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.GetEndOfTheDataStreamPosition(System.Int32)">
            <summary>
            Gets the offset of the end of the data in the archive stream.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <returns>Offset of the end of data stream.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:41
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.GetLastModificationDateTime(ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Gets the last modification date time for the <paramref name="item"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>Modification time.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:41
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.CreateNewArchiveItem(System.String,System.String,ComponentAce.Compression.Archiver.StorePathMode)">
            <summary>
            Creates the new archive item.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="baseDir">The base directory.</param>
            <param name="storePathMode">The store path mode.</param>
            <returns>Archive item.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:41
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.CreateNewArchiveItem">
            <summary>
            Creates the new archive item.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.CreateNewItemsHandler(System.IO.Stream,System.Boolean)">
            <summary>
            Creates the new items handler.
            </summary>
            <param name="stream">The compressed stream.</param>
            <param name="create">If set to <c>false</c> then fill items handler from <paramref name="stream"/>.</param>
            <returns></returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:41
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.ExtractItem(System.Int32,System.IO.Stream)">
            <summary>
            Extracts the item specified with <paramref name="itemNo"/> to the <paramref name="destStream"/>. This method is used by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractTaggedFile(System.Int32,System.String,System.String,System.Boolean@)"/>
            </summary>
            <param name="itemNo">Number of the item to extract.</param>
            <param name="destStream">Destination stream.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:41
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.FillDirItem(System.Int32,System.String)">
            <summary>
            Initializes the item specified with <paramref name="itemNo"/> by the file specified by <paramref name="fileName"/>.
            </summary>
            <param name="itemNo">Number of the item to initialize.</param>
            <param name="fileName">Name of the file.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:41
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.FillDirItem(System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.IO.FileAttributes)">
            <summary>
            Initializes the item specified with <paramref name="itemNo"/>.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="fileName">Name of the file.</param>
            <param name="arcFileName">Archive file name.</param>
            <param name="isDirectory">If set to <c>true</c> item reprtesents directory.</param>
            <param name="retrieveFileDate">If set to <c>true</c> file date will be retrives from the file.</param>
            <param name="attr">Attributes to set as ExternalAttriburtes for the item specified with <paramref name="itemNo"/>.</param>
            <exclude/>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:41
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.GetBlockSize(ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Gets the size of the block.
            </summary>
            <param name="item">The item.</param>
            <returns>Size of the block.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:43
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.DoOnIncorrectFileNameDelegate(System.String,System.String@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Tar.TarBaseForge.OnIncorrectFileName"/> event if it has any subscribers, otherwise replace all unicode characters with '_'.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Destination file name.</param>
            <param name="cancel">If set to <c>true</c> cancel the operation.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:43
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.DoOnIncorrectStoredPathDelegate(System.String,System.String@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Tar.TarBaseForge.OnIncorrectStoredPath"/> event if it has any subscribers, otherwise replace all unicode characters with '_'.
            </summary>
            <param name="sourceStoredPath">The source stored path.</param>
            <param name="destStoredPath">The destination stored path.</param>
            <param name="cancel">if set to <c>true</c> cancel the operation.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:45
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.AddNewItemToItemsHandler">
            <summary>
            Adds the new item to items handler.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:46
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarBaseForge.InitializeNewItem(ComponentAce.Compression.Archiver.BaseArchiveItem)">
            <summary>
            Adds new item to the _itemsHandler and initializes it from <paramref name="baseItem"/>. If _itemsHandler already contains item with <paramref name="baseItem"/>.FullName, then execution determines by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Overwrite.
            </summary>
            <param name="baseItem">The item to add.</param>
            <returns>
            Number of the added item. If add failed or process was not been confirmed -1 returns.
            </returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:46
        </member>
        <member name="E:ComponentAce.Compression.Tar.TarBaseForge.OnIncorrectFileName">
            <summary>
            Occurs when the name of the file can not be presented in the current encoding (Unicode characters).
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:46
        </member>
        <member name="E:ComponentAce.Compression.Tar.TarBaseForge.OnIncorrectStoredPath">
            <summary>
            Occurs when the stored path can not be presented in the current encoding (Unicode characters).
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:48
        </member>
        <member name="T:ComponentAce.Compression.Tar.OnIncorrectFileNameDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Tar.TarBaseForge.OnIncorrectFileName"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="sourceFileName">The source file name.</param>
            <param name="destFileName">The destination file name.</param>
            <param name="cancel">If is set to <c><b>true</b></c>, the current operation will be canceled.</param>
            <seealso cref="E:ComponentAce.Compression.Tar.TarBaseForge.OnIncorrectFileName"/>
        </member>
        <member name="T:ComponentAce.Compression.Tar.OnIncorrectStorePathDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Tar.TarBaseForge.OnIncorrectStoredPath"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="sourceFileName">The source file name.</param>
            <param name="destFileName">The destination file name.</param>
            <param name="cancel">If is set to <c><b>true</b></c>, the current operation will be canceled.</param>
            <seealso cref="E:ComponentAce.Compression.Tar.TarBaseForge.OnIncorrectStoredPath"/>
        </member>
        <member name="T:ComponentAce.Compression.Tar.LegacyTarWriter">
            <summary>
            An old-style Tar archive writer.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 21.04.2010  17:01
        </member>
        <member name="F:ComponentAce.Compression.Tar.LegacyTarWriter.DefaultUserId">
            <summary>
            Default value for user id (61).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Tar.LegacyTarWriter.DefaultGroupId">
            <summary>
            Default value for group id (61).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Tar.LegacyTarWriter.DefaultMode">
            <summary>
            Default value for mode (511).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Tar.LegacyTarWriter._codePage">
            <summary>
            Code page number to use for strings values encoding.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Tar.LegacyTarWriter._buffer">
            <summary>
            Buffer that uses for reading and writing operations.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Tar.LegacyTarWriter._writeToStreamFailureDelegate">
            <summary>
            The write to stream failure delegate.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Tar.LegacyTarWriter._readFromStreamFailureDelegate">
            <summary>
            The read from stream failure delegate.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Tar.LegacyTarWriter.#ctor(System.IO.Stream,System.Int32,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Writes tar (see GNU tar) archive to a stream.
            </summary>
            <param name="writeStream">Stream to write archive to.</param>
            <param name="codepage">Code page used to store file header fields.</param>
            <param name="writeToStreamFailureDelegate">The write to stream failure delegate.</param>
            <param name="readFromStreamFailureDelegate">The read from stream failure delegate.</param>
            <exception cref="T:System.ArgumentNullException">Throws if stream object is null.</exception>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Throws if stream doesn`t support writing.</exception>
        </member>
        <member name="M:ComponentAce.Compression.Tar.LegacyTarWriter.Write(System.IO.Stream,System.Int64,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.Char)">
            <summary>
            Writes <paramref name="dataSizeInBytes"/> bytes of the <paramref name="data"/> to the tar archive
            with the specified <paramref name="name"/>, <paramref name="userId"/>, <paramref name="groupId"/>,
            <paramref name="mode"/> and <paramref name="lastModificationTime"/>.
            </summary>
            <param name="data">Stream contains data.</param>
            <param name="dataSizeInBytes">Count of bytes needed to be read from <paramref name="data"/>.</param>
            <param name="name">Name that will be used for <paramref name="data"/> stored in the tar archive.</param>
            <param name="userId">The user id of owner.</param>
            <param name="groupId">The group id of owner.</param>
            <param name="mode">The file mode.</param>
            <param name="lastModificationTime">The last modification time.</param>
            <param name="typeFlag">Indicates type of content that would be stored with an archive.</param>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="data"/> is null.</exception>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Throws if <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> had been closed or stream <paramref name="data"/> doesn`t support reading.</exception>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  17:11
        </member>
        <member name="M:ComponentAce.Compression.Tar.LegacyTarWriter.WriteContent(System.Int64,System.IO.Stream)">
            <summary>
            Writes <paramref name="count"/> bytes read from <paramref name="data"/> to the <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/>.
            </summary>
            <param name="count">Number of bytes that needs to be read from the <paramref name="data"/> and wrote to the <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/>.</param>
            <param name="data">Stream contains data.</param>
            <exception cref="T:System.IO.IOException">Throws if an I/O error occurs during reading from <paramref name="data"/> operation.</exception>
            <exception cref="T:System.ObjectDisposedException">Throws if <paramref name="data"/> was closed.</exception>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Throws if write to the <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> failed or <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> doesn`t support writting. The case of thrown an exception is read from stream <paramref name="data"/> failed or <paramref name="data"/> doesn`t support reading.</exception>
            <exception cref="T:System.IO.IOException">Throws if writeToStreamFailureDelegate (<see cref="T:ComponentAce.Compression.Tar.LegacyTarWriter"/>) is null and write to stream <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> throw an <see cref="T:System.IO.IOException"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Throws if <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> is null.</exception>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  17:30
        </member>
        <member name="M:ComponentAce.Compression.Tar.LegacyTarWriter.WriteHeader(System.String,System.DateTime,System.Int64,System.Int32,System.Int32,System.Int32,System.Char)">
            <summary>
            Writes the file header to the <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/>.
            </summary>
            <param name="name">Name of the file to sore it in the tar archive.</param>
            <param name="lastModificationTime">The last modification time of the file.</param>
            <param name="count">Size of the file.</param>
            <param name="userId">Owner's numeric user ID.</param>
            <param name="groupId">Group's numeric user ID.</param>
            <param name="mode">The file mode.</param>
            <param name="typeFlag">Indicates type of content that would be stored with an archive.</param>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Throws if write to the <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> failed or <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> doesn`t support writting.</exception>
            <exception cref="T:System.IO.IOException">Throws if writeToStreamFailureDelegate (<see cref="T:ComponentAce.Compression.Tar.LegacyTarWriter"/>) is null and write to stream <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> throw an <see cref="T:System.IO.IOException"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Throws if <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> is null.</exception>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  18:41
        </member>
        <member name="M:ComponentAce.Compression.Tar.LegacyTarWriter.AlignTo512(System.Int64,System.Boolean)">
            <summary>
            Aligns stored content to the 512 bytes.
            </summary>
            <param name="size">The size of the data that already has been written to the <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/>.</param>
            <param name="acceptZero">If set to <c>true</c> writes 512 bytes despite size % 512 == 0. Uses to write last 2 block that defines end of tar archive.</param>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Throws if write to the <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> failed or <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> doesn`t support writting.</exception>
            <exception cref="T:System.IO.IOException">Throws if  writeToStreamFailureDelegate (<see cref="T:ComponentAce.Compression.Tar.LegacyTarWriter"/>) is null and write to stream <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> throw an <see cref="T:System.IO.IOException"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Throws if <see cref="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream"/> is null.</exception>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  16:32
        </member>
        <member name="P:ComponentAce.Compression.Tar.LegacyTarWriter.OutStream">
            <summary>
            Gets the out stream.
            </summary>
            <value>The out stream.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  16:54
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiverOptions">
            <summary>
            Specifies the ArchiverForgeBase options.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverOptions.Assign(System.Object)">
            <summary>
            Allows to copy all options from another <see cref="T:ComponentAce.Compression.Archiver.ArchiverOptions"/> object in one operation.
            </summary>
            <param name="source">The <see cref="T:ComponentAce.Compression.Archiver.ArchiverOptions"/> object to copy settings from.</param>
            <remarks>
            <para>You have to use it because <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/> property is readonly.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiverOptions.#ctor">
             <summary>
            Creates a new instance of the ArchiverOptions class with default parameters.
             </summary>                          
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverOptions.Recurse">
            <summary>
            Specifies if archive operation will search files recursively.
            </summary>
            <remarks>
            Recurse specifies if <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/> 
            and <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles"/> methods will search files recursively. 
            This means that if some folder meets search conditions then all files and directories 
            within this folder will be scanned. For example, if you set Recurse to true and call 
            AddFiles("C:\\*.*",FileAttributes.Normal) all files and folders 
            located on disk C: will be added to the archive.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverOptions.StorePath">
            <summary>
            Defines how path information will be stored for the file or directory within the archive file.
            </summary>
            <remarks>
            This option applies to <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/> methods.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverOptions.ShareMode">
            <summary>
            Specifies how the files being added to the archive will be opened for simultaneous access.
            </summary>
            <remarks>
            Set this option before calling <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/>.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverOptions.Overwrite">
            <summary>
            Specifies whether extracted files will overwrite existing files.
            </summary>
            <remarks>
            Set this option before calling <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>
            or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/>.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverOptions.CreateDirs">
            <summary>
            Specifies whether to create folders when extracting an archive.
            </summary>
            <remarks>
            Set CreateDirs to <b>true</b> if you need to extract files with creating all necessary folders.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverOptions.ReplaceReadOnly">
            <summary>
            Specifies whether to replace read-only files when extracting files from archive.
            </summary>
            <remarks>
            If ReplaceReadOnly set to <b>true</b> it means that all existing read-only files will be replaced with the files being extracted by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/>.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverOptions.SetAttributes">
            <summary>
            Determines whether attributes stored within the archive will be applied to extracted files.
            </summary>
            <remarks>
            SetAttributes determines whether attributes stored within the archive will be applied to files being extracted by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/>.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverOptions.SearchAttr">
            <summary>
            Specifies the special files to include in addition to all normal files.
            </summary>
            <remarks>
            SearchAttr specifies the special files to include in addition to all normal files for 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/>, 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/> and 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles"/> methods variant without parameters.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiverOptions.FlushBuffers">
            <summary>
            Specifies whether the file buffers are flushed after archive file modification and after extracting files from archive.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Tar.ITarHeader">
            <summary>
            File header for individual file in the tar archive.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.FileName">
            <summary>
            Pathname, stored as a null-terminated string.  Early tar implementations only stored regular files 
            (including hardlinks to those files).  One common early convention used a trailing "/" character to 
            indicate a directory name, allowing directory permissions and owner information to be archived and restored.
            </summary>
            <value>The name of the file.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.GroupId">
            <summary>
            Group id of owner, as octal numbers in ASCII.
            </summary>
            <value>The group id.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.GroupName">
            <summary>
            Group name, as null-terminated ASCII strings.  These should be used in preference 
            to the gid values when they are set and the corresponding names exist on the system.
            </summary>
            <value>The name of the group.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.HeaderSize">
            <summary>
            Gets the size of the header in bytes.
            </summary>
            <value>The size of the header.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.LastModification">
            <summary>
            Gets or sets the last modification time.
            </summary>
            <value>The last modification.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.Mode">
            <summary>
            File mode, stored as an octal number in ASCII.
            </summary>
            <value>The mode.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.SizeInBytes">
            <summary>
            Size of file, as octal number in ASCII.  For regular files only, this indicates the 
            amount of data that follows the header.  In particular, this field was ignored by early tar 
            implementations when extracting hardlinks.  Modern writers should always store a zero length for hardlink entries.
            </summary>
            <value>The size in bytes.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.UserId">
            <summary>
            User id of owner, as octal numbers in ASCII.
            </summary>
            <value>The user id.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.UserName">
            <summary>
            User name, as null-terminated ASCII strings.  These should be used in preference 
            to the uid value when they are set and the corresponding names exist on the system.
            </summary>
            <value>The name of the user.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  15:44
        </member>
        <member name="P:ComponentAce.Compression.Tar.ITarHeader.TypeFlag">
            <summary>
            Gets or sets the type flag.
            </summary>
            <value>The type flag.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 13.05.2010  14:25
        </member>
        <member name="T:ComponentAce.Compression.Tar.OldStyleHeader">
            <summary>
            Class represents old-style header for file in the tar archive.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:06
        </member>
        <member name="M:ComponentAce.Compression.Tar.OldStyleHeader.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Tar.OldStyleHeader"/> class.
            Set default values for mode group and user identifier.
            </summary>
            <param name="codepage">The codepage that will be used to encode string values.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:07
        </member>
        <member name="M:ComponentAce.Compression.Tar.OldStyleHeader.GetBytes">
            <summary>
            Gets the header bytes setted by <see cref="M:ComponentAce.Compression.Tar.OldStyleHeader.GetHeaderValue"/>
            </summary>
            <returns>Bytes of the header.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  14:19
        </member>
        <member name="M:ComponentAce.Compression.Tar.OldStyleHeader.GetHeaderValue">
            <summary>
            Compose all header values according to documentation <a target="_blank" href="http://www.freebsd.org/cgi/man.cgi?query=tar&amp;sektion=5&amp;manpath=FreeBSD+8-current">Tar format specification</a>. See ' Old-Style Archive' format.
            </summary>
            <returns>Bytes of the header.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  14:10
        </member>
        <member name="M:ComponentAce.Compression.Tar.OldStyleHeader.UpdateHeaderFromBytes">
            <summary>
            Updates the header from bytes stored in the internal variable _buffer. Only one place where _buffer sets is <see cref="M:ComponentAce.Compression.Tar.OldStyleHeader.GetHeaderValue"/>.
            </summary>
            <returns></returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  14:17
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">In case of file name length grater than 100 symbols.</exception>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:08
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.GroupId">
            <summary>
            Gets or sets the group's numeric user ID.
            </summary>
            <value>The group id.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:11
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.GroupIdString">
            <summary>
            Gets the group ID string encoded in octal numbers using ASCII digits, with leading zeroes.
            </summary>
            <value>The encoded group ID string.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:11
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.GroupName">
            <summary>
            Gets or sets the group ID simply converted to string.
            </summary>
            <value>String representation of the group ID.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:11
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.HeaderChecksumString">
            <summary>
            Gets the checksum for the header block encoded in octal numbers using ASCII digits, with leading zeroes.
            </summary>
            <value>The encoded header checksum.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:12
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.HeaderSize">
            <summary>
            Gets constant value 512 of the size of the header.
            </summary>
            <value>The size of the header.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:12
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.LastModification">
            <summary>
            Gets or sets the last modification time of the file.
            </summary>
            <value>Time of the last file modification.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:11
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.LastModificationString">
            <summary>
            Gets string representation of the last modification time in numeric Unix time format encoded in octal numbers using ASCII digits, with leading zeroes.
            </summary>
            <value>The encoded last modification string.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:12
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.Mode">
            <summary>
            Gets or sets the file mode.
            </summary>
            <value>Mode for the file.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:10
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.ModeString">
            <summary>
            Gets the mode string encoded in octal numbers using ASCII digits, with leading zeroes.
            </summary>
            <value>The encoded mode string.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:10
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.SizeInBytes">
            <summary>
            Gets or sets the file size in bytes.
            </summary>
            <value>The size in bytes.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:11
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.SizeString">
            <summary>
            Gets the file size string encoded in octal numbers using ASCII digits, with leading zeroes.
            </summary>
            <value>The encoded file size string.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:11
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.UserId">
            <summary>
            Gets or sets the owner's numeric user ID.
            </summary>
            <value>The user id.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:10
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.TypeFlag">
            <summary>
            Gets or sets the type flag.
            </summary>
            <value>The link indicator (file type).</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 12.05.2010  18:20
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.UserIdString">
            <summary>
            Gets the user ID string encoded in octal numbers using ASCII digits, with leading zeroes.
            </summary>
            <value>The encoded user ID string.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:10
        </member>
        <member name="P:ComponentAce.Compression.Tar.OldStyleHeader.UserName">
            <summary>
            Gets or sets the user ID simply converted to string.
            </summary>
            <value>String representation of the user ID.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:10
        </member>
        <member name="M:ComponentAce.Compression.Tar.ReadWriteHelper.WriteToStream(System.Byte[],System.Int32,System.Int32,System.IO.Stream,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Writes a sequence of bytes to the current stream.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <param name="stream">The stream where the buffer will be written.</param>
            <param name="writeToStreamFailureDelegate">Delegate that call if write to stream <paramref name="stream"/> throw an <see cref="T:System.IO.IOException"/>.</param>
            <exception cref="T:System.ArgumentNullException">Throws if buffer or stream is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws if offset or count less than zero or if offset is greater than zero or if sum of the offset and the count is greater than zero.</exception>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Throws if stream doesn`t support writting</exception>
            <exception cref="T:System.IO.IOException">Throws if <paramref name="writeToStreamFailureDelegate"/> is null and write to stream <paramref name="stream"/> throw an <see cref="T:System.IO.IOException"/>.</exception>
            <returns><c>True</c> if all data has been written successfully; otherwise, <c>false</c>.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  18:21
        </member>
        <member name="M:ComponentAce.Compression.Tar.ReadWriteHelper.ReadFromStream(System.Byte[],System.Int32,System.Int32,System.Int32@,System.IO.Stream,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Reads a sequence of bytes from the <paramref name="stream"/>.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be reading from the current <paramref name="stream"/>.</param>
            <param name="readedBytesCount">Number bytes that was read from <paramref name="stream"/>.</param>
            <param name="stream">The stream where the buffer will be read from.</param>
            <param name="readFromStreamFailureDelegate">Delegate that call if read from stream <paramref name="stream"/> throw an <see cref="T:System.IO.IOException"/>.</param>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="buffer"/> or <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws if offset or count less than zero or if offset is greater than zero or if sum of the offset and the count is greater than zero.</exception>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Throws if stream doesn`t support reading or read bytes count not equals to <paramref name="count"/>.</exception>
            <exception cref="T:System.IO.IOException">Throws if <paramref name="readFromStreamFailureDelegate"/> is null and read from stream <paramref name="stream"/> throw an <see cref="T:System.IO.IOException"/>.</exception>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 21.04.2010  10:08
        </member>
        <member name="T:ComponentAce.Compression.Tar.TarArchiveItem">
            <summary>
            Describes parameters of the file stored within an archive file.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:09
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarArchiveItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Tar.TarArchiveItem"/> class.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:19
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarArchiveItem.#ctor(System.String)">
            <summary>
            Creates a new instance of the ArchiveItem class and fills its properties with the properties of the file with the name '<paramref name="fileName"/>'.
            </summary>
            <param name="fileName">A full name of the file to create archive item from.</param>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarArchiveItem.#ctor(System.String,System.String,ComponentAce.Compression.Archiver.StorePathMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Tar.TarArchiveItem"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="baseDir">The base dir.</param>
            <param name="storePathMode">The store path mode.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 27.04.2010  14:28
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarArchiveItem.FullName">
            <summary>
            Gets full path name of the archive item.
            </summary>
            <value>The full file name.</value>
            <remarks>Full file name includes path in the archive to the file combined with the file name.</remarks>
            <seealso cref="P:ComponentAce.Compression.Archiver.BaseArchiveItem.StoredPath"/>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  17:48
        </member>
        <member name="T:ComponentAce.Compression.Tar.TarForge">
            <summary>
            Contains all the routines to work with tar-files.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  13:28
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarForge.AddItem(ComponentAce.Compression.Tar.TarArchiveItem)">
            <summary>
            Adds a file specified in the <paramref name="item"/> to the archive.
            </summary>
            <param name="item">Archive item to be added to the archive</param>
            <remarks>Use AddItem method to add file with the given properties.</remarks>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarForge.FindFirst(ComponentAce.Compression.Tar.TarArchiveItem@)">
            <overloads>
            Finds files stored within the archive.
            </overloads>
            <summary>
            Finds files stored within the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <example> The following example shows how to search files stored within the archive:
            <code lang="C#">
             TarForge1.FileName = "C:\\TEST\\test.tar";
             TarForge1.OpenArchive();
             TarArchiveItem archiveItem = new TarArchiveItem();
             if (tarForge1.FindFirst("*.*", ref archiveItem))
             {
               do
               {
                 ListViewItem listItem = new ListViewItem();
                 listItem.Text = archiveItem.FileName;
                 listView1.Items.Add(listItem);
               }
               while (tarForge1.FindNext(ref archiveItem));
             }
             tarForge1.CloseArchive();
             </code>
             <code lang="vbnet">
             tarForge1.FileName = "C:\TEST\test.tar"
             tarForge1.OpenArchive()
             Dim archiveItem As TarArchiveItem = New TarArchiveItem()
             If TarForge1.FindFirst("*.*", archiveItem) Then
               Do                
                 Dim listItem As ListViewItem = New ListViewItem()
                 listItem.Text = archiveItem.FileName
                 listView1.Items.Add(listItem)
               Loop While TarForge1.FindNext(archiveItem)
             End If
             tarForge1.CloseArchive()
            </code>
            </example>
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Tar.TarForge.FindNext(ComponentAce.Compression.Tar.TarArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            <para>FindFirst variant with single parameter uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr to specify search conditions and to exclude files from delete operation.</para>
            </remarks>          
            <param name="archiveItem">TarArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <seealso cref="M:ComponentAce.Compression.Tar.TarForge.FindNext(ComponentAce.Compression.Tar.TarArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarForge.FindFirst(System.String,ComponentAce.Compression.Tar.TarArchiveItem@)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> parameter.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">TarArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Tar.TarForge.FindNext(ComponentAce.Compression.Tar.TarArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Tar.TarForge.FindNext(ComponentAce.Compression.Tar.TarArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarForge.FindFirst(System.String,ComponentAce.Compression.Tar.TarArchiveItem@,System.IO.FileAttributes)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">TarArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Tar.TarForge.FindNext(ComponentAce.Compression.Tar.TarArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            <para>The searchAttributes parameter specifies the special files to include in addition to all normal files</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Tar.TarForge.FindNext(ComponentAce.Compression.Tar.TarArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarForge.FindFirst(System.String,ComponentAce.Compression.Tar.TarArchiveItem@,System.IO.FileAttributes,System.String)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">TarArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <param name="exclusionMask">Specifies files to be excluded from the search operation.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns>  
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Tar.TarForge.FindNext(ComponentAce.Compression.Tar.TarArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            <para>The searchAttributes parameter specifies the special files to include in addition to all normal files</para>
            <para>The exclusionMask specifies files to be excluded from the delete operation.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Tar.TarForge.FindNext(ComponentAce.Compression.Tar.TarArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarForge.FindNext(ComponentAce.Compression.Tar.TarArchiveItem@)">
             <summary>
             Finds files stored within the archive.
             </summary>
             <example> The following example shows how to search files stored within the archive:
             <code lang="C#">
              tarForge1.FileName = "C:\\TEST\\test.tar";
              tarForge1.OpenArchive();
              TarArchiveItem archiveItem = new TarArchiveItem();
              if (tarForge1.FindFirst("*.*", ref archiveItem))
              {
                do
                {
                  ListViewItem listItem = new ListViewItem();
                  listItem.Text = archiveItem.FileName;
                  listView1.Items.Add(listItem);
                }
                while (tarForge1.FindNext(ref archiveItem));
              }
              tarForge1.CloseArchive();
              </code>
              <code lang="vbnet">
              tarForge1.FileName = "C:\TEST\test.tar"
              tarForge1.OpenArchive()
              Dim archiveItem As TarArchiveItem = New TarArchiveItem()
              If TarForge1.FindFirst("*.*", archiveItem) Then
                Do                
                  Dim listItem As ListViewItem = New ListViewItem()
                  listItem.Text = archiveItem.FileName
                  listView1.Items.Add(listItem)
                Loop While TarForge1.FindNext(archiveItem)
              End If
              tarForge1.CloseArchive()
             </code>
             </example> 
             <param name="archiveItem">TarArchiveItem class.</param>
             <returns>FindNext returns <b>true</b> if there is at least one file meets search conditions, otherwise it returns <b>false</b>.</returns>
            <remarks>
             Use FindNext to find files stored inside the open archive file. Use FindNext after calling <see cref="M:ComponentAce.Compression.Tar.TarForge.FindFirst(ComponentAce.Compression.Tar.TarArchiveItem@)"/> only.
             <para>Pass ArchiveItem class found by previous calling of FindFirst or FindNext to the FindNext.
             After calling FindNext archiveItem parameter will contain parameters of the next found file.
             </para>
            </remarks>
            <seealso cref="M:ComponentAce.Compression.Tar.TarForge.FindFirst(ComponentAce.Compression.Tar.TarArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarForge.DoOnExtractFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Tar.TarForge.OnExtractFile"/> event if it has any subscribers.
            </summary>
            <param name="baseItem">Specifies the archive item being extracted from the archive.</param>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarForge.DoOnStoreFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Tar.TarForge.OnStoreFile"/> event if it has any subscribers.
            </summary>
            <param name="baseItem">Specifies the archive item being added to the archive.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 27.06.2010  13:49
        </member>
        <member name="E:ComponentAce.Compression.Tar.TarForge.OnExtractFile">
            <summary>
            Occurs when file is being extracted from archive.
            </summary>
            <remarks>
            Write an OnExtractFile event handler to override default file name 
            or change its attributes before extracting.
            The event is called when <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> is called.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Tar.TarForge.OnStoreFile">
            <summary>
            Occurs when file is being stored into the archive.
            </summary>
            <remarks>
            Write an OnStoreFile event handler to override default file name or 
            change its attributes before storing this file into the archive. 
            The event is fired when <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> is called.
            </remarks>
        </member>
        <member name="T:ComponentAce.Compression.Tar.OnExtractFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Tar.TarForge.OnExtractFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="item">Specifies the archive item being extracted from the archive.</param>
            <seealso cref="E:ComponentAce.Compression.Tar.TarForge.OnExtractFile"/>
        </member>
        <member name="T:ComponentAce.Compression.Tar.OnStoreFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Tar.TarForge.OnStoreFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="item">Specifies the archive item being added to the archive.</param>
            <seealso cref="E:ComponentAce.Compression.Tar.TarForge.OnStoreFile"/>
        </member>
        <member name="T:ComponentAce.Compression.Tar.TarItem">
            <summary>
            An inner archive item for tar archiver.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:39
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.#ctor(ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Tar.TarItem"/> class.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  11:57
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.#ctor(System.String,System.Int32,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Tar.TarItem"/> class.
            </summary>
            <param name="name">The name for new item.</param>
            <param name="codepage">The codepage for encoding strings operations.</param>
            <param name="writeToStreamFailureDelegate">The write to stream failure delegate.</param>
            <param name="readFromStreamFailureDelegate">The read from stream failure delegate.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  11:57
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.#ctor(System.Int32,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Tar.TarItem"/> class.
            </summary>
            <param name="codepage">The codepage for encoding strings operations.</param>
            <param name="writeToStreamFailureDelegate">The write to stream failure delegate.</param>
            <param name="readFromStreamFailureDelegate">The read from stream failure delegate.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  11:58
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 23.04.2010  18:39
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.WriteLocalHeaderToStream(System.IO.Stream,System.Int32)">
            <summary>
            Writes the local header to stream.
            </summary>
            <param name="stream">The stream write to.</param>
            <param name="offset">Zero-based offset in the local header indicates start positions for bytes copy.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:12
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.GetDataOffset">
            <summary>
            Returns an offset of the compressed file data relative to the item local header position.
            </summary>
            <returns>Compressed file data offset.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:15
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.Reset">
            <summary>
            Resets this instance.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:15
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.GetArchiveItem(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Gets the archive item.
            </summary>
            <param name="baseArchiveItem">The archive item.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:15
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.CopyFrom(ComponentAce.Compression.Archiver.BaseArchiveItem)">
            <summary>
            Copies from archive item.
            </summary>
            <param name="baseArchiveItem">The archive item copy from.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:16
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.IsDirectory">
            <summary>
            Determines whether this instance is directory.
            </summary>
            <returns>
            	<c>true</c> if this instance is directory; otherwise, <c>false</c>.
            </returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:16
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.GetLocalHeaderSize">
            <summary>
            Gets the size of the local header.
            </summary>
            <returns>Local header size.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:16
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItem.SetLongPathExtraHeader(ComponentAce.Compression.Tar.LongPathExtraHeader)">
            <summary>
            Sets the extra header that uses for store paths longer than 100 symbols.
            </summary>
            <param name="extraHeader">The long path extra header.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:17
        </member>
        <member name="E:ComponentAce.Compression.Tar.TarItem.ItemNameChanged">
            <summary>
            The event is fired when the TarItem name is changed.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:01
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.OldName">
            <summary>
            Gets the old name for item.
            </summary>
            <value>The old name.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  11:58
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.ShortName">
            <summary>
            Gets first 100 symbols of the item name.
            </summary>
            <value>The short name.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  11:59
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.Name">
            <summary>
            Gets or sets the name for the item.
            </summary>
            <value>The name.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:00
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.SrcFileName">
            <summary>
            Gets/Sets the source file name used to add/move/update.
            </summary>
            <value>Source file name.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:02
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.Operation">
            <summary>
            Gets/Sets the operation that should be applied to the current item.
            </summary>
            <value>Operation to perform.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:02
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.Stream">
            <summary>
            Get/Sets source data stream (when there is no file).
            </summary>
            <value>Source stream.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:03
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.IsModified">
            <summary>
            Determines if the item was updated or added (that is modified).
            </summary>
            <value>Modified status of the item.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:03
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.IsTagged">
            <summary>
            Is the current directory item was tagged for group operations.
            </summary>
            <value>Tagged status for the item.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:04
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.Crc32">
            <summary>
            Gets or sets the CRC32 for tar header.
            </summary>
            <value>Header CRC32 value.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:04
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.StreamPosition">
            <summary>
            Gets/Sets starting position of the item in the <see cref="P:ComponentAce.Compression.Tar.TarItem.Stream"/>.
            </summary>
            <value>Stream position.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:05
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.NeedDestroyStream">
            <summary>
            Determines whether we need to destroy <see cref="P:ComponentAce.Compression.Tar.TarItem.Stream"/>.
            </summary>
            <value></value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:06
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.GroupId">
            <summary>
            Group id of owner, as octal numbers in ASCII.
            </summary>
            <value>The group id.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:06
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.GroupName">
            <summary>
            Group name, as null-terminated ASCII strings.  These should be used in preference 
            to the gid values when they are set and the corresponding names exist on the system.
            </summary>
            <value>The name of the group.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:07
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.UserId">
            <summary>
            User id of owner, as octal numbers in ASCII.
            </summary>
            <value>The user id.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:08
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.UserName">
            <summary>
            User name, as null-terminated ASCII strings.  These should be used in preference 
            to the uid value when they are set and the corresponding names exist on the system.
            </summary>
            <value>The name of the user.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:08
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.UncompressedSize">
            <summary>
            Gets/Sets the uncompressed size value for the tar item.
            </summary>
            <value>Real size of the item`s data.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:08
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.RelativeLocalHeaderOffset">
            <summary>
            Gets/Sets the offset of the item start position in the archive.
            </summary>
            <value>Item`s start position.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:09
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.LastFileModificationTime">
            <summary>
            Gets/Sets the last modification time for the tar item.
            </summary>
            <value>Last modification time.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:10
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.ExternalAttributes">
            <summary>
            Gets the external attributes.
            </summary>
            <value>The external attributes.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:11
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItem.TypeFlag">
            <summary>
            Gets or sets type of content that would be stored with an archive..
            </summary>
            <value>Contents type flag.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:12
        </member>
        <member name="T:ComponentAce.Compression.Tar.TarItemsHandler">
            <summary>
            Items handler for tar archive.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:38
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItemsHandler.#ctor(System.IO.Stream,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Tar.TarItemsHandler"/> class.
            </summary>
            <param name="tarredStream">The tarred stream.</param>
            <param name="writeToStreamFailureDelegate">The write to stream failure delegate.</param>
            <param name="readFromStreamFailureDelegate">The read from stream failure delegate.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  20:39
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItemsHandler.LoadItemsArray">
            <summary>
            Loads the items array.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItemsHandler.SaveItemsArray">
            <summary>
            Saves the items array.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarItemsHandler.SaveItemsArray(System.IO.Stream)">
            <summary>
            Saves the items array to the <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream that will be used to save items array.</param>
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItemsHandler.ItemsArray">
            <summary>
            Gets or sets the items array.
            </summary>
            <value>The items array.</value>
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarItemsHandler.ItemsArrayBackup">
            <summary>
            Gets or sets backup of the items array.
            </summary>
            <value>The items array backup.</value>
        </member>
        <member name="T:ComponentAce.Compression.Tar.TarReader">
            <summary>
            Extract contents of a tar file represented by a stream for the TarReader constructor
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  19:39
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarReader.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Constructs TarReader object to read data from `tarredData` stream.
            </summary>
            <param name="tarredData">A stream to read tar archive from.</param>
            <param name="codepage">Codepage to use for data file name encoding.</param>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarReader.Read(System.IO.Stream)">
            <summary>
            Read data from a current file to a Stream.
            </summary>
            <param name="dataDestanation">A stream to read data to</param>
            
            <seealso cref="M:ComponentAce.Compression.Tar.TarReader.MoveNext(System.Boolean)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarReader.Read(System.Byte[]@)">
            <summary>
            Reads the specified buffer.
            </summary>
            <param name="buffer">The buffer contains readed bytes. <c>null</c> in case of all bytes was read.</param>
            <returns>Count of bytes readed from the <see cref="F:ComponentAce.Compression.Tar.TarReader._inStream"/>, if there all bytes was read '-1' returns.</returns>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Throws if read from stream failed.</exception>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 21.04.2010  13:30
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarReader.IsEmpty(System.Array)">
            <summary>
            Check if all bytes in buffer are zeroes
            </summary>
            <param name="buffer">buffer to check</param>
            <returns>true if all bytes are zeroes, otherwise false</returns>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarReader.MoveNext(System.Boolean)">
            <summary>
            Move internal pointer to a next file in archive.
            </summary>
            <param name="skipData">Should be true if you want to read a header only, otherwise false</param>
            <returns>false on End Of File otherwise true</returns>
            
            Example:
            while(MoveNext())
            { 
                Read(dataDestStream); 
            }
            <seealso cref="M:ComponentAce.Compression.Tar.TarReader.Read(System.IO.Stream)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarReader.DoOnReadFromStreamFailure(System.Exception,System.Boolean@)">
            <summary>
            Occurs in a case of failure of reading from the stream operation.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 21.04.2010  13:15
        </member>
        <member name="P:ComponentAce.Compression.Tar.TarReader.FileInfo">
            <summary>
            Gets the info about last readed file.
            </summary>
            <value>The file info.</value>
        </member>
        <member name="T:ComponentAce.Compression.Tar.TarWriter">
            <summary>
            Unix-standard tar archive writer.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 21.04.2010  17:02
        </member>
        <member name="M:ComponentAce.Compression.Tar.TarWriter.#ctor(System.IO.Stream,System.Int32,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate,ComponentAce.Compression.Archiver.DoOnStreamOperationFailureDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Tar.TarWriter"/> class.
            </summary>
            <param name="writeStream">stream to write archive to</param>
            <param name="codepage">Code page used to store file header fields.</param>
            <param name="writeToStreamFailureDelegate">The write to stream failure delegate.</param>
            <param name="readFromStreamFailureDelegate">The read from stream failure delegate.</param>
            <exception cref="T:System.ArgumentNullException">Throws if stream object is null.</exception>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Throws if stream doesn`t support writing.</exception>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 21.04.2010  17:04
        </member>
        <member name="M:ComponentAce.Compression.Tar.UnixStandartHeader.GetHeaderValue">
            <summary>
            Compose all header values according to documentation <a target="_blank" href="http://www.freebsd.org/cgi/man.cgi?query=tar&amp;sektion=5&amp;manpath=FreeBSD+8-current">Tar format specification</a>. See 'POSIX ustar Archives' format.
            </summary>
            <returns>Bytes of the header.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  14:41
        </member>
        <member name="M:ComponentAce.Compression.Tar.UnixStandartHeader.UpdateHeaderFromBytes">
            <summary>
            Updates the header from bytes stored in the internal variable _buffer. Only one place where _buffer sets is <see cref="M:ComponentAce.Compression.Tar.UnixStandartHeader.GetHeaderValue"/>.
            </summary>
            <returns></returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  14:38
        </member>
        <member name="P:ComponentAce.Compression.Tar.UnixStandartHeader.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">In case of file name length grater than 255 symbols.</exception>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  14:36
        </member>
        <member name="P:ComponentAce.Compression.Tar.UnixStandartHeader.GroupName">
            <summary>
            Gets or sets the group name, as null-terminated ASCII strings. These value is used in 
            preference to the gid value when it is set and the corresponding names exist on the system.
            </summary>
            <value>Group name as it is specified in the system.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  14:34
        </member>
        <member name="P:ComponentAce.Compression.Tar.UnixStandartHeader.UserName">
            <summary>
            Gets or sets the user name, as null-terminated ASCII strings. These value is used in 
            preference to the uid value when it is set and the corresponding names exist on the system.
            </summary>
            <value>User name as it is specified in the system.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 20.04.2010  14:28
        </member>
        <member name="T:ComponentAce.Compression.Tgz.TgzArchiveItem">
            <summary>
            Describes parameters of the file stored within an archive file.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Tgz.TgzForge">
            <summary>
            Contains all the routines to work with tgz-files.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:07
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.Tgz.TgzForge"/> class.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:07
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.OpenArchive">
            <summary>
            Opens or creates (if it has not existed) an archive file specified with the <seealso cref="P:ComponentAce.Compression.Tgz.TgzForge.FileName"/> 
            property.
            </summary>
            <remarks>File access mode is set to FileAccess.ReadWrite/&gt;. 
            <para>Call <see cref="M:ComponentAce.Compression.Tgz.TgzForge.CloseArchive"/> to close the archive file.</para></remarks>
            <example>The following example shows how to add files to archive and extract them:
            <code lang="C#">
            TgzForge tgzForge = new TgzForge ();
            // Set the archive file name
            tgzForge.FileName ="C:\\TEST\\test.tgz";
            // Create a new archive file
            tgzForge.OpenArchive();
            // Set the path to the folder with the files to archive
            tgzForge.BaseDir = "\\Source";
            // Add all files and directories from the folder specified above to the archive
            tgzForge.AddFiles("*.*");
            // Set path to the folder where the archive will be extracted to
            tgzForge.BaseDir = "\\Dest";
            // Extract all the files from the archive
            tgzForge.ExtractFiles("*.*");
            // Close the archive
            tgzForge.CloseArchive();
            </code>
            <code lang="vbnet">
            Dim tgzForge As New TgzForge()
            ' Set the archive file name
            tgzForge.FileName = "C:\TEST\test.tgz"
            ' Create a new archive file
            tgzForge.OpenArchive()
            ' Set the path to the folder with the files to archive
            tgzForge.BaseDir = DemoFolder + "\\Source"
            ' Add all files and directories from the folder specified above to the archive
            tgzForge.AddFiles("*.*")
            ' Set path to the folder where the archive will be extracted to
            tgzForge.BaseDir = DemoFolder + "\\Dest"
            ' Extract all the files from the archive
            tgzForge.ExtractFiles("*.*")
            ' Close the archive
            tgzForge.CloseArchive()
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.Tgz.TgzForge.CloseArchive"/>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.OpenArchive(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens or creates an archive file with the specified file access and share modes
            </summary>
            <param name="fileMode">Specifies a file open mode.</param>
            <param name="fileAccess">Specifies a file access mode.</param>
            <param name="fileShare">Specifies a file share mode.</param>
            <remarks>
            Call <b>OpenArchive</b> to open or create an archive file. If the file specified by the <see cref="P:ComponentAce.Compression.Tgz.TgzForge.FileName"/> 
            property does not exists and the <paramref name="fileMode"/> parameter is set to 
            FileMode.Create (this is by default) or the
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.InMemory"/> property is set to 
            <c><b>true</b></c>, then <b>OpenArchive</b> will create and open it. <b>OpenArchive</b> sets 
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <c><b>true</b></c>.
            <para>Call <see cref="M:ComponentAce.Compression.Tgz.TgzForge.CloseArchive"/> to close the archive file.</para>
            </remarks>
            <example>The following example shows how to add files to archive and extract them:
            <code lang="C#">
            TgzForge tgzForge = new TgzForge ();
            // Set the archive file name
            tgzForge.FileName ="C:\\TEST\\test.tgz";
            // Create a new archive file
            tgzForge.OpenArchive();
            // Set the path to the folder with the files to archive
            tgzForge.BaseDir = "\\Source";
            // Add all files and directories from the folder specified above to the archive
            tgzForge.AddFiles("*.*");
            // Set path to the folder where the archive will be extracted to
            tgzForge.BaseDir = "\\Dest";
            // Extract all the files from the archive
            tgzForge.ExtractFiles("*.*");
            // Close the archive
            tgzForge.CloseArchive();
            </code>
            <code lang="vbnet">
            Dim tgzForge As New TgzForge()
            ' Set the archive file name
            tgzForge.FileName = "C:\TEST\test.tgz"
            ' Create a new archive file
            tgzForge.OpenArchive()
            ' Set the path to the folder with the files to archive
            tgzForge.BaseDir = DemoFolder + "\\Source"
            ' Add all files and directories from the folder specified above to the archive
            tgzForge.AddFiles("*.*")
            ' Set path to the folder where the archive will be extracted to
            tgzForge.BaseDir = DemoFolder + "\\Dest"
            ' Extract all the files from the archive
            tgzForge.ExtractFiles("*.*")
            ' Close the archive
            tgzForge.CloseArchive()
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.Tgz.TgzForge.CloseArchive"/>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.OpenArchive(System.IO.Stream,System.Boolean)">
            <summary>
            Opens or creates an archive within a stream.
            </summary>
            <param name="stream">Specifies a stream descendant object with archive contents.</param>
            <param name="create">Determines if the corresponding file should be created.</param>
            <remarks>
            Call <b>OpenArchive</b> to open or create an archive file within a stream. If the <paramref name="create"/> 
            parameter is set to <c><b>true</b></c>, then <b>OpenArchive</b> will create and open it. <b>OpenArchive</b> 
            sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <c><b>true</b></c>.
            <para>Call <see cref="M:ComponentAce.Compression.Tgz.TgzForge.CloseArchive"/> to close the archive file.</para>
            </remarks>
            <example>The following example shows how to add files to archive and extract them:
            <code lang="C#">
            TgzForge tgzForge = new TgzForge ();
            // Set the archive file name
            tgzForge.FileName ="C:\\TEST\\test.tgz";
            // Create a new archive file
            tgzForge.OpenArchive();
            // Set the path to the folder with the files to archive
            tgzForge.BaseDir = "\\Source";
            // Add all files and directories from the folder specified above to the archive
            tgzForge.AddFiles("*.*");
            // Set path to the folder where the archive will be extracted to
            tgzForge.BaseDir = "\\Dest";
            // Extract all the files from the archive
            tgzForge.ExtractFiles("*.*");
            // Close the archive
            tgzForge.CloseArchive();
            </code>
            <code lang="vbnet">
            Dim tgzForge As New TgzForge()
            ' Set the archive file name
            tgzForge.FileName = "C:\TEST\test.tgz"
            ' Create a new archive file
            tgzForge.OpenArchive()
            ' Set the path to the folder with the files to archive
            tgzForge.BaseDir = DemoFolder + "\\Source"
            ' Add all files and directories from the folder specified above to the archive
            tgzForge.AddFiles("*.*")
            ' Set path to the folder where the archive will be extracted to
            tgzForge.BaseDir = DemoFolder + "\\Dest"
            ' Extract all the files from the archive
            tgzForge.ExtractFiles("*.*")
            ' Close the archive
            tgzForge.CloseArchive()
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.Tgz.TgzForge.CloseArchive"/>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.CloseArchive">
            <summary>
            Closes the current archive file.
            </summary>
            <remarks>
            Call <b>CloseArchive</b> to close the current archive file. <b>CloseArchive</b> automatically finishes 
            the current transaction started by the 
            <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BeginUpdate"/> method and sets 
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <c><b>false</b></c>.
            <para>Call <see cref="M:ComponentAce.Compression.Tgz.TgzForge.OpenArchive"/> to create or open an archive file.</para>
            </remarks>
            <example>The following example shows how to add files to archive and extract them:
            <code lang="C#">
            TgzForge tgzForge = new TgzForge ();
            // Set the archive file name
            tgzForge.FileName ="C:\\TEST\\test.tgz";
            // Create a new archive file
            tgzForge.OpenArchive();
            // Set the path to the folder with the files to archive
            tgzForge.BaseDir = "\\Source";
            // Add all files and directories from the folder specified above to the archive
            tgzForge.AddFiles("*.*");
            // Set path to the folder where the archive will be extracted to
            tgzForge.BaseDir = "\\Dest";
            // Extract all the files from the archive
            tgzForge.ExtractFiles("*.*");
            // Close the archive
            tgzForge.CloseArchive();
            </code>
            <code lang="vbnet">
            Dim tgzForge As New TgzForge()
            ' Set the archive file name
            tgzForge.FileName = "C:\TEST\test.tgz"
            ' Create a new archive file
            tgzForge.OpenArchive()
            ' Set the path to the folder with the files to archive
            tgzForge.BaseDir = DemoFolder + "\\Source"
            ' Add all files and directories from the folder specified above to the archive
            tgzForge.AddFiles("*.*")
            ' Set path to the folder where the archive will be extracted to
            tgzForge.BaseDir = DemoFolder + "\\Dest"
            ' Extract all the files from the archive
            tgzForge.ExtractFiles("*.*")
            ' Close the archive
            tgzForge.CloseArchive()
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.Tgz.TgzForge.OpenArchive"/>        
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.AddItem(ComponentAce.Compression.Tgz.TgzArchiveItem)">
            <summary>
            Adds a file specified in the <paramref name="item"/> to the archive.
            </summary>
            <param name="item">Archive item to be added to the archive</param>
            <remarks>Use AddItem method to add file with the given properties.</remarks>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.FindFirst(ComponentAce.Compression.Tgz.TgzArchiveItem@)">
            <overloads>
            Finds files stored within the archive.
            </overloads>
            <summary>
            Finds files stored within the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <example> The following example shows how to search files stored within the archive:
            <code lang="C#">
             TgzForge1.FileName = "C:\\TEST\\test.tgz";
             TgzForge1.OpenArchive();
             TgzArchiveItem archiveItem = new TgzArchiveItem();
             if (tgzForge1.FindFirst("*.*", ref archiveItem))
             {
               do
               {
                 ListViewItem listItem = new ListViewItem();
                 listItem.Text = archiveItem.FileName;
                 listView1.Items.Add(listItem);
               }
               while (tgzForge1.FindNext(ref archiveItem));
             }
             tgzForge1.CloseArchive();
             </code>
             <code lang="vbnet">
             tgzForge1.FileName = "C:\TEST\test.tgz"
             tgzForge1.OpenArchive()
             Dim archiveItem As TgzArchiveItem = New TgzArchiveItem()
             If TgzForge1.FindFirst("*.*", archiveItem) Then
               Do                
                 Dim listItem As ListViewItem = New ListViewItem()
                 listItem.Text = archiveItem.FileName
                 listView1.Items.Add(listItem)
               Loop While TgzForge1.FindNext(archiveItem)
             End If
             tgzForge1.CloseArchive()
            </code>
            </example>
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Tgz.TgzForge.FindNext(ComponentAce.Compression.Tgz.TgzArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            <para>FindFirst variant with single parameter uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr to specify search conditions and to exclude files from delete operation.</para>
            </remarks>          
            <param name="archiveItem">TgzArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <seealso cref="M:ComponentAce.Compression.Tgz.TgzForge.FindNext(ComponentAce.Compression.Tgz.TgzArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.FindFirst(System.String,ComponentAce.Compression.Tgz.TgzArchiveItem@)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> parameter.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">TgzArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Tgz.TgzForge.FindNext(ComponentAce.Compression.Tgz.TgzArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Tgz.TgzForge.FindNext(ComponentAce.Compression.Tgz.TgzArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.FindFirst(System.String,ComponentAce.Compression.Tgz.TgzArchiveItem@,System.IO.FileAttributes)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">TgzArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Tgz.TgzForge.FindNext(ComponentAce.Compression.Tgz.TgzArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            <para>The searchAttributes parameter specifies the special files to include in addition to all normal files</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Tgz.TgzForge.FindNext(ComponentAce.Compression.Tgz.TgzArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.FindFirst(System.String,ComponentAce.Compression.Tgz.TgzArchiveItem@,System.IO.FileAttributes,System.String)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">TgzArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <param name="exclusionMask">Specifies files to be excluded from the search operation.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns>  
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Tgz.TgzForge.FindNext(ComponentAce.Compression.Tgz.TgzArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            <para>The searchAttributes parameter specifies the special files to include in addition to all normal files</para>
            <para>The exclusionMask specifies files to be excluded from the delete operation.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Tgz.TgzForge.FindNext(ComponentAce.Compression.Tgz.TgzArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.FindNext(ComponentAce.Compression.Tgz.TgzArchiveItem@)">
             <summary>
             Finds files stored within the archive.
             </summary>
             <example> The following example shows how to search files stored within the archive:
             <code lang="C#">
              tgzForge1.FileName = "C:\\TEST\\test.tgz";
              tgzForge1.OpenArchive();
              TgzArchiveItem archiveItem = new TgzArchiveItem();
              if (tgzForge1.FindFirst("*.*", ref archiveItem))
              {
                do
                {
                  ListViewItem listItem = new ListViewItem();
                  listItem.Text = archiveItem.FileName;
                  listView1.Items.Add(listItem);
                }
                while (tgzForge1.FindNext(ref archiveItem));
              }
              tgzForge1.CloseArchive();
              </code>
              <code lang="vbnet">
              tgzForge1.FileName = "C:\TEST\test.tgz"
              tgzForge1.OpenArchive()
              Dim archiveItem As TgzArchiveItem = New TgzArchiveItem()
              If TgzForge1.FindFirst("*.*", archiveItem) Then
                Do                
                  Dim listItem As ListViewItem = New ListViewItem()
                  listItem.Text = archiveItem.FileName
                  listView1.Items.Add(listItem)
                Loop While TgzForge1.FindNext(archiveItem)
              End If
              tgzForge1.CloseArchive()
             </code>
             </example> 
             <param name="archiveItem">TgzArchiveItem class.</param>
             <returns>FindNext returns <b>true</b> if there is at least one file meets search conditions, otherwise it returns <b>false</b>.</returns>
            <remarks>
             Use FindNext to find files stored inside the open archive file. Use FindNext after calling <see cref="M:ComponentAce.Compression.Tgz.TgzForge.FindFirst(ComponentAce.Compression.Tgz.TgzArchiveItem@)"/> only.
             <para>Pass ArchiveItem class found by previous calling of FindFirst or FindNext to the FindNext.
             After calling FindNext archiveItem parameter will contain parameters of the next found file.
             </para>
            </remarks>
            <seealso cref="M:ComponentAce.Compression.Tgz.TgzForge.FindFirst(ComponentAce.Compression.Tgz.TgzArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.DoOnExtractFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Tgz.TgzForge.OnExtractFile"/> event if it has any subscribers.
            </summary>
            <param name="baseItem">Specifies the archive item being extracted from the archive.</param>
        </member>
        <member name="M:ComponentAce.Compression.Tgz.TgzForge.DoOnStoreFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Tgz.TgzForge.OnStoreFile"/> event if it has any subscribers.
            </summary>
            <param name="baseItem">Specifies the archive item being added to the archive.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 27.06.2010  13:49
        </member>
        <member name="P:ComponentAce.Compression.Tgz.TgzForge.FileName">
            <summary>
            Gets and sets the archive file name.
            </summary>
            <remarks>
            Use the <b>FileName</b> property to specify the archive file before calling the <see cref="M:ComponentAce.Compression.Tgz.TgzForge.OpenArchive"/> 
            procedure.
            </remarks>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  21:07
        </member>
        <member name="E:ComponentAce.Compression.Tgz.TgzForge.OnExtractFile">
            <summary>
            Occurs when file is being extracted from archive.
            </summary>
            <remarks>
            Write an OnExtractFile event handler to override default file name 
            or change its attributes before extracting.
            The event is called when <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> is called.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Tgz.TgzForge.OnStoreFile">
            <summary>
            Occurs when file is being stored into the archive.
            </summary>
            <remarks>
            Write an OnStoreFile event handler to override default file name or 
            change its attributes before storing this file into the archive. 
            The event is fired when <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> is called.
            </remarks>
        </member>
        <member name="T:ComponentAce.Compression.Tgz.OnExtractFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Tgz.TgzForge.OnExtractFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="item">Specifies the archive item being extracted from the archive.</param>
        </member>
        <member name="T:ComponentAce.Compression.Tgz.OnStoreFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Tgz.TgzForge.OnStoreFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="item">Specifies the archive item being added to the archive.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.CompressionUtils.RemoveEscapeSequences(System.String)">
            <summary>
            Removes \r, \n, \f, \t, \v escape sequences from the string
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters">
            <summary>
            Parameters to pass to a real time archiver constructor.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters"/> class.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters.CommentsToArchive">
            <summary>
            Specifies the comment of the archive file.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters.CompressionLevel">
            <summary>
            Specifies the compression level used for archive updating (Fastest, Normal, Max).
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters.CompressionMethod">
            <summary>
            Specifies the compression algorithm to use to compress archive items.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters.EncryptionAlgorithm">
            <summary>
             Specifies the archive encryption algorithm.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters.EncryptionPassword">
            <summary>
            Specifies the password for files stored in the archive.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters.UseUnicodeFileNameExtraField">
            <summary>
            Specifies whether to use xCeed unicode extra field to store filename in the unicode format.
            </summary>
            <remarks>Not all programs can read this field correctly.</remarks>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.RealTimeArchiverParameters.UseZip64">
            <summary>
            Specifies whether to use Zip64 format to create archives over 4GB.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.RealTimeCompressionLevel">
            <summary>
            Specifies the compression level used for a real-time archive.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeCompressionLevel.Fastest">
            <summary>
            The fastest compression level and a low compression rate.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeCompressionLevel.Normal">
            <summary>
            Normal compression level. Slower compression and better compression rate than Fastest.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeCompressionLevel.Max">
            <summary>
            Slow compression and the maximum compression rate.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.RealTimeCompressionMethod">
            <summary>
            Specifies the compression method used for archive.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeCompressionMethod.Deflate">
            <summary>
            Deflate compression algorithm (see <a target="_blank" href="http://en.wikipedia.org/wiki/DEFLATE">Wikipedia article</a> about it).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeCompressionMethod.Bzip2">
            <summary>
            (Professional edition only) Bzip2 compression algorithm (see <a target="_blank" href="http://en.wikipedia.org/wiki/Bzip2">Wikipedia article</a> about it).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeCompressionMethod.Ppmd">
            <summary>
            (Professional edition only) Ppmd compression algorithm (see <a target="_blank" href="http://en.wikipedia.org/wiki/Prediction_by_Partial_Matching">general description</a>,
            and <a target="_blank" href="http://www.compression.ru/ds/">Ppmd library home page (russian)</a>.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.RealTimeEncryptionAlgorithm">
            <summary>
            Specifies encryption algorithms that can be used in a real-time archive.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeEncryptionAlgorithm.Aes128">
            <summary>
            (Professional edition only) Strong AES Encryption with 128-bit keys.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeEncryptionAlgorithm.Aes192">
            <summary>
            (Professional edition only) Strong AES Encryption with 192-bit keys.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeEncryptionAlgorithm.Aes256">
            <summary>
            (Professional edition only) Strong AES Encryption with 256-bit keys.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForgeRealTime.RealTimeEncryptionAlgorithm.None">
            <summary>
            No encryption
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime">
            <summary>
            Contains all the routines to work with real-time zip archives.
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 15.07.2010  19:51
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime"/> class.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime"/> class.
            </summary>
            <param name="stream">The stream used to operates on compressed data.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OpenArchive(System.IO.Stream,System.Boolean)">
            <summary>
            Opens or creates an archive within a stream.
            </summary>
            <param name="stream">Specifies Stream descendant object with the archive contents.</param>
            <param name="createArchive">Determines if archive should be created.</param>
            <remarks>
            Call OpenArchive to open or create an real-time archive. If <paramref name="createArchive"/> parameter is set to <b>true</b> then OpenArchive will create it. OpenArchive sets <see cref="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.Active"/> to <b>true</b>.
            <para>Call <see cref="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.CloseArchive"/> to close the archive file.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OpenArchive(System.Boolean)">
            <summary>
            Opens or creates an archive within a stream.
            </summary>
            <param name="createArchive">Determines if archive should be created.</param>
            <remarks>
            Call OpenArchive to open or create an real-time archive. If <paramref name="createArchive"/> parameter is set to <b>true</b> then OpenArchive will create it. OpenArchive sets <see cref="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.Active"/> to <b>true</b>.
            <para>Call <see cref="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.CloseArchive"/> to close the archive file.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.FindFirst(ComponentAce.Compression.Archiver.ArchiveItem@)">
            <summary>
            Finds files stored within the archive.
            </summary>
            <param name="f">ArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.FindFirst(System.String,ComponentAce.Compression.Archiver.ArchiveItem@)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> parameter.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="f">ArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)">
            <summary>
            Finds files stored within the archive.
            </summary>
            <param name="f">ArchiveItem class.</param>
            <returns>FindNext returns <b>true</b> if there is at least one file meets search conditions, otherwise it returns <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.AddFromStream(System.String,System.IO.Stream)">
            <summary>
            Saves a new file from input stream to the zip compressed output stream.
            </summary>
            <param name="fileName">Name is to be used as a file name for the current file stream saved in the zip compressed output stream.</param>
            <param name="fileStream">Input stream for saving in the zip compressed output stream.</param>
            <example>Following example shows how to create real-time zip archive and add files in it:
            <code lang="C#">
            // Create a new instance of a real-time zip object.
            ZipForgeRealTime zipForge = new ZipForgeRealTime();
            // Specify the stream where the being compressed file will be saved.
            zipForge.CompressedStream = new FileStream(@"Tests\Temp\archive.zip",FileMode.Create);
            // Open the archive and set creating a new one.
            zipForge.OpenArchive(true);
            // Add a file to the archive.
            using(FileStream fileStream = 
            new FileStream(@"Tests\Source\Files\test1.1", FileMode.Open))
            {
                zipForge.AddFromStream("file.txt", fileStream);
            }
            // Save the central directory to the archive.
            zipForge.CloseArchive();
            // Note that the method CloseArchive just 
            // writes content to the stream and do not close it. 
            // So, the stream has to be closed manually.
            zipForge.CompressedStream.Close();
            </code>
            <code lang="vbnet">
            ' Create a new instance of a real-time zip object.
            Dim zipForge As New ZipForgeRealTime()
            ' Specify the stream where the being compressed file will be saved.
            zipForge.CompressedStream = New FileStream("Tests\Temp\archive.zip", FileMode.Create)
            ' Open the archive and set creating a new one.
            zipForge.OpenArchive(True)
            ' Add a file to the archive.
            Using fileStream As New FileStream("Tests\Source\Files\test1.1", FileMode.Open)
                zipForge.AddFromStream("file.txt", fileStream)
            End Using
            ' Save the central directory to the archive.
            zipForge.CloseArchive()
            ' Note that the method CloseArchive just 
            ' writes content to the stream and do not close it. 
            ' So, the stream has to be closed manually.
            zipForge.CompressedStream.Close()
            </code>
            </example>
            <returns>true if the file stream has been saved successfully, otherwise - false.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.AddFromStream(System.String,System.IO.Stream,System.String)">
            <summary>
            Saves a new file and its comment from input stream to the zip compressed output stream.
            </summary>
            <param name="fileName">Name is to be used as a file name for the current file stream saved in the zip compressed output stream.</param>
            <param name="fileStream">Input stream for saving in the zip compressed output stream.</param>
            <param name="fileComment">The comment for the file.</param>
            <example>Following example shows how to create real-time zip archive and add files in it:
            <code lang="C#">
            // Create a new instance of a real-time zip object.
            ZipForgeRealTime zipForge = new ZipForgeRealTime();
            // Specify the stream where the being compressed file will be saved.
            zipForge.CompressedStream = new FileStream(@"Tests\Temp\archive.zip",FileMode.Create);
            // Open the archive and set creating a new one.
            zipForge.OpenArchive(true);
            // Add a file to the archive.
            using(FileStream fileStream = 
            new FileStream(@"Tests\Source\Files\test1.1", FileMode.Open))
            {
                zipForge.AddFromStream("file.txt", fileStream);
            }
            // Save the central directory to the archive.
            zipForge.CloseArchive();
            // Note that the method CloseArchive just 
            // writes content to the stream and do not close it. 
            // So, the stream has to be closed manually.
            zipForge.CompressedStream.Close();
            </code>
            <code lang="vbnet">
            ' Create a new instance of a real-time zip object.
            Dim zipForge As New ZipForgeRealTime()
            ' Specify the stream where the being compressed file will be saved.
            zipForge.CompressedStream = New FileStream("Tests\Temp\archive.zip", FileMode.Create)
            ' Open the archive and set creating a new one.
            zipForge.OpenArchive(True)
            ' Add a file to the archive.
            Using fileStream As New FileStream("Tests\Source\Files\test1.1", FileMode.Open)
                zipForge.AddFromStream("file.txt", fileStream)
            End Using
            ' Save the central directory to the archive.
            zipForge.CloseArchive()
            ' Note that the method CloseArchive just 
            ' writes content to the stream and do not close it. 
            ' So, the stream has to be closed manually.
            zipForge.CompressedStream.Close()
            </code>
            </example>
            <returns>true if the file stream has been saved successfully, otherwise - false.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.CloseArchive">
            <summary>
            Closes the archive.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.DoOnFileProgress(System.String,System.Int64,System.TimeSpan,ComponentAce.Compression.Archiver.ProgressPhase,System.Boolean@)">
            <summary>
            Performs OnFileProgress.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="bytesProcessed">The number of bytes processed.</param>
            <param name="timeElapsed">The time elapsed from the begining of operation of the specified file compression.</param>
            <param name="progressPhase">The progress phase.</param>
            <param name="cancel">Determines if we need to stop the file compression.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.DoOnFileRename(System.String,System.String@,System.Boolean@)">
            <summary>
            Performs OnFileRename.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="newFileName">New name of the file.</param>
            <param name="cancel">Determines if we need to cancel the operation of adding the file to the zip compressed output stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.DoOnProcessFileFailure(System.String,System.String,System.Exception)">
            <summary>
            Performs OnProcessFileFailure. If there are no delegates for OnProcessFileFailure event,
            inner exception is thrown.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="errorMessage">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.DoOnWriteToStreamFailed(System.Exception,System.Boolean@)">
            <summary>
            Performs OnWriteToStreamFailed. If there are no delegates for OnProcessFileFailure event,
            inner exception is thrown.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="cancel">Determines if we need to stop trials of writting to the zip compressed output stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.AddItemToCentralDirectory(System.String,System.IO.Stream,System.String)">
            <summary>
            Adds an item to the central directory.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileStream">The file stream.</param>
            <param name="fileComment">The file comment.</param>
            <returns>Index of the item in the central directory</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.DoCompress(System.Boolean,ComponentAce.Compression.ZipForge.DirItem,System.Int32,System.IO.Stream,System.IO.Stream,System.Int32,System.Int64@,System.Int64@,System.UInt32@)">
            <summary>
            Performs compression.
            </summary>
            <param name="isEncrypted">Deteremines whether to encrypt or not.</param>
            <param name="directoryItem">Central directory item.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="fileStream">The file stream to compress.</param>
            <param name="compressedStream">The zip compressed output stream.</param>
            <param name="firstByte">The first byte.</param>
            <param name="processedBytesCount">The processed bytes count.</param>
            <param name="compressedBytesCount">The compressed bytes count.</param>
            <param name="fcrc32">The CRC32.</param>
            <returns>True if the file stream has been compressed successfully.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.InitDirItemFromArchiveParams(System.Int32)">
            <summary>
            Sets password, compression mode, encryption algorithm for the specified central directory item.
            </summary>
            <param name="dirItemIndex">The index of the central directory item.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.InternalCompressFile(System.IO.Stream,System.IO.Stream,ComponentAce.Compression.ZipForge.DirItem,System.Int32)">
            <summary>
            Prepares <see cref="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.DoCompress(System.Boolean,ComponentAce.Compression.ZipForge.DirItem,System.Int32,System.IO.Stream,System.IO.Stream,System.Int32,System.Int64@,System.Int64@,System.UInt32@)"/> and calls it.
            </summary>
            <param name="fileStream">The compressed stream.</param>
            <param name="compressedStream">The file stream.</param>
            <param name="dirItem">The central directory item.</param>
            <param name="firstByte">The first byte that was read from the file stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.SaveDirectoryItemToStream(System.Int32)">
            <summary>
            Saves the directory item to stream.
            </summary>
            <param name="dirItemIndex">Index of the dir item.</param>
            <returns>The result of operation execution.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.WriteToStream(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Writes a sequence of bytes to the current stream.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <param name="stream">The stream where the buffer will be written.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.ExtractFileToStream(System.IO.Stream)">
            <summary>
            Extracts the file to stream.
            </summary>
            <example>Following example shows how to decompress real-time archive:
            <code lang="C#">
            // Create a new instance of a real-time zip object.
            ZipForgeRealTime zipForge = new ZipForgeRealTime();
            // Specify the stream where the being compressed file will be saved.
            zipForge.CompressedStream = new FileStream(@"Tests\Source\archive.zip", FileMode.Open);
            // Open the archive.
            zipForge.OpenArchive(false);
            // A zip archive consits from a set of file records following the central directory. 
            // Each file record contains the file header with metadata information about the file. 
            // The file data themselves follows the header. So to read a file from a real-time archive 
            // you have to read its header first to know the file name and then extract the file content.
            ArchiveItem header;
            while ((header = zipForge.GetFileHeader()) != null)
            {
                // Note that the method ExtractFileToStream just 
                // writes content to the stream and do not close it. 
                // So, the file stream has to be closed manually.
                using (FileStream fileStream = new FileStream(@"Tests\Temp\" + header.FileName,
                    FileMode.Create, FileAccess.Write, FileShare.Write))
                {
                        zipForge.ExtractFileToStream(fileStream);
                }
            }
            // Save the central directory to the archive.
            zipForge.CloseArchive();
            // Note that the method CloseArchive just 
            // writes content to the stream and do not close it. 
            // So, the stream has to be closed manually.
            zipForge.CompressedStream.Close();
            </code>
            <code lang="vbnet">
            ' Create a new instance of a real-time zip object.
            Dim zipForge As New ZipForgeRealTime()
            ' Specify the stream where the being compressed file will be saved.
            zipForge.CompressedStream = New FileStream("Tests\Source\archive.zip", FileMode.Open)
            ' Open the archive.
            zipForge.OpenArchive(False)
            ' A zip archive consits from a set of file records following the central directory.
            ' Each file record contains the file header with metadata information about the file. 
            ' The file data themselves follows the header. So to read a file from a real-time archive 
            ' you have to read its header first to know the file name and then extract the file content.
            Dim header As ArchiveItem
            While (InlineAssignHelper(header, zipForge.GetFileHeader())) IsNot Nothing
                ' Note that the method ExtractFileToStream just 
                ' writes content to the stream and do not close it. 
                ' So, the file stream has to be closed manually.
                Using fileStream As New FileStream("Tests\Temp\" + header.FileName, FileMode.Create, FileAccess.Write, FileShare.Write)
                    zipForge.ExtractFileToStream(fileStream)
                End Using
            End While
            ' Save the central directory to the archive.
            zipForge.CloseArchive()
            ' Note that the method CloseArchive just 
            ' writes content to the stream and do not close it. 
            ' So, the stream has to be closed manually.
            zipForge.CompressedStream.Close()
            </code></example>
            <param name="streamExtractTo">The stream to extract to.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.GetFileHeader">
            <summary>
            Gets the file header.
            </summary>
            <remarks>Use this method to read header information about the file in the archive.If data that contains in the input stream are incorrect or file header identifier was not found exception is thrown.</remarks>
            <example>Following example shows how to use GetFileHeader method:
            <code lang="C#">
            // Create a new instance of a real-time zip object.
            ZipForgeRealTime zipForge = new ZipForgeRealTime();
            // Specify the stream where the being compressed file will be saved.
            zipForge.CompressedStream = new FileStream(@"Tests\Source\archive.zip", FileMode.Open);
            // Open the archive.
            zipForge.OpenArchive(false);
            // A zip archive consits from a set of file records following the central directory. 
            // Each file record contains the file header with metadata information about the file. 
            // The file data themselves follows the header. So to read a file from a real-time archive 
            // you have to read its header first to know the file name and then extract the file content.
            ArchiveItem header;
            while ((header = zipForge.GetFileHeader()) != null)
            {
                // Note that the method ExtractFileToStream just 
                // writes content to the stream and do not close it. 
                // So, the file stream has to be closed manually.
                using (FileStream fileStream = new FileStream(@"Tests\Temp\" + header.FileName,
                    FileMode.Create, FileAccess.Write, FileShare.Write))
                {
                        zipForge.ExtractFileToStream(fileStream);
                }
            }
            // Save the central directory to the archive.
            zipForge.CloseArchive();
            // Note that the method CloseArchive just 
            // writes content to the stream and do not close it. 
            // So, the stream has to be closed manually.
            zipForge.CompressedStream.Close();
            </code>
            <code lang="vbnet">
            ' Create a new instance of a real-time zip object.
            Dim zipForge As New ZipForgeRealTime()
            ' Specify the stream where the being compressed file will be saved.
            zipForge.CompressedStream = New FileStream("Tests\Source\archive.zip", FileMode.Open)
            ' Open the archive.
            zipForge.OpenArchive(False)
            ' A zip archive consits from a set of file records following the central directory.
            ' Each file record contains the file header with metadata information about the file. 
            ' The file data themselves follows the header. So to read a file from a real-time archive 
            ' you have to read its header first to know the file name and then extract the file content.
            Dim header As ArchiveItem
            While (InlineAssignHelper(header, zipForge.GetFileHeader())) IsNot Nothing
                ' Note that the method ExtractFileToStream just 
                ' writes content to the stream and do not close it. 
                ' So, the file stream has to be closed manually.
                Using fileStream As New FileStream("Tests\Temp\" + header.FileName, FileMode.Create, FileAccess.Write, FileShare.Write)
                    zipForge.ExtractFileToStream(fileStream)
                End Using
            End While
            ' Save the central directory to the archive.
            zipForge.CloseArchive()
            ' Note that the method CloseArchive just 
            ' writes content to the stream and do not close it. 
            ' So, the stream has to be closed manually.
            zipForge.CompressedStream.Close()
            </code></example>
            <returns><see cref="T:ComponentAce.Compression.Archiver.ArchiveItem">Archive item</see> which contains all information from header.</returns>
            <seealso cref="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.ExtractFileToStream(System.IO.Stream)"/>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.ZipDecompress(System.Boolean,System.Int64@,System.IO.Stream@,System.IO.Stream,ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Decompresses one file from zip archive.
            </summary>
            <param name="encrypted">Specifies whether the file is encrypted.</param>
            <param name="actualDecompressedSize">Size of decompressed archive item.</param>
            <param name="compressedStream">Stream to read compressed data from.</param>
            <param name="streamExtractTo">Stream to write compressed data to.</param>
            <param name="decrypter">Decrypter object.</param>
            <param name="dirItem">Directoy item to decompress.</param>
            <returns>True if file was decompressed successfully. Otherwise returns false.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.DecrypterInitializer(ComponentAce.Compression.ZipForge.DirItem,ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform@,ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform,System.Int64@)">
            <summary>
            Initializes decrypter and checks password for validity.
            </summary>
            <param name="dirItem">The directory item.</param>
            <param name="tmpDecrypter">The temporary decrypter.</param>
            <param name="decrypter">The decrypter.</param>
            <param name="totalProcessedFilesSize">Total size of the processed files.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.DoOnPassword(System.String,System.String@,System.Boolean@)">
            <summary>
            Performs OnPassword.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="newPassword">The new password.</param>
            <param name="abortProcess">Determines if we need to abort file decimpression process.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.InternalDecompressFile(System.IO.Stream,System.IO.Stream,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Internal method to decompress file.
            </summary>
            <param name="compressedStream">The archive stream.</param>
            <param name="streamExtractTo">The stream to extract file.</param>
            <param name="dirItem">The archive item.</param>
            <returns>true if file has beem successfully extracted.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnDecompressedBufferReady(System.Byte[],System.Int32,System.Boolean@)">
            <summary>
            Called when decompressed buffer is ready.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="outBytes">The out bytes.</param>
            <param name="stopDecompression">If set to <c>true</c> stops the decompression.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.ReadCompressedStreamBlockToMemoryStream(System.Int32,System.Boolean)">
            <summary>
            Reads block of the data to the memory stream. If buffer is not empty,
            bytes from the buffer are read first.
            </summary>
            <param name="length">The length of block to read.</param>
            <param name="needToReadExactlyLengthBytes">If set to <c>true</c> trying to read exactly <b>length</b>b> count of bytes
            and if is not successful then exception is thrown. Otherwise we read <b>length</b> or less, if the compressed stream is finished.</param>
            <returns>Memory stream contains read data.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.ReadDataDescrtiptor(ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Reads the data descrtiptor.
            </summary>
            <param name="dirItem">The directory item.</param>
            <exception cref="T:ComponentAce.Compression.Archiver.ArchiverException">Thrown when dirItem.DataDescriptor is null.</exception> 
            <exception cref="T:System.ArgumentNullException">Thrown when dirItem is null.</exception>
        </member>
        <member name="M:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.CheckInactive">
            <summary>
            Checks whether archive is opened.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.CommentsToArchive">
            <summary>
            Specifies the comment of the archive file.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.CompressionLevel">
            <summary>
            Specifies the compression level used for archive updating (Fastest, Normal, Max).
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.CompressionMethod">
            <summary>
            Specifies the compression algorithm to use to compress archive items.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.EncryptionAlgorithm">
            <summary>
             Specifies the archive encryption algorithm.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.EncryptionPassword">
            <summary>
            Specifies the password for files stored in the archive.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.UseUnicodeFileNameExtraField">
            <summary>
            Specifies whether to use xCeed unicode extra field to store filename in the unicode format.
            </summary>
            <remarks>Not all programs can read this field correctly.</remarks>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.UseZip64">
            <summary>
            Specifies whether to use Zip64 format to create archives over 4GB.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.CompressedStream">
            <summary>
            Specifies the compressed stream.
            </summary>
            <value>The compressed stream.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.Active">
             <summary>
             Specifies whether or not an archive file is open.
             </summary>
             <remarks>Use Active to determine if archive is opened or to open it. When Active is <b>false</b>, the archive is closed. When Active is <b>true</b>, archive file is opened.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.CentralDirEndSignature">
            <summary>
            Gets the central directory end signature.
            </summary>
            <value>The central directory end signature.</value>
        </member>
        <member name="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnFileProgress">
            <summary>
            Occurs when archive operation with a file updates a progress indication value.
            </summary>
            <remarks>
            Write an OnFileProgress event handler to display progress storing file stream operation or to cancel it.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnFileRename">
            <summary>
            Occurs when specified file name already exists in the archive.
            </summary>
            <remarks>
            Writes an OnFileRename event handler to set one another name for the file stream in case 
            of specified name already exists or to cancel operation.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnProcessFileFailure">
            <summary>
            Occurs in a case of failure of the current operation.
            </summary>
            <remarks>
            Writes an OnProcessFileFailure event handler to perform some specific actions when archive operation fails. 
            If you will not specify event handler for OnProcessFileFailure any error will raise an exception.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnWriteToStreamFailure">
            <summary>
            Occurs in a case of failure of writting to stream operation.
            </summary>
            <remarks>
            Writes an OnWriteToStreamFailure event handler to perform some specific actions when writing to stream 
            archive operation fails. If you will not specify event handler for OnProcessFileFailure any error will 
            raise an exception.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnPassword">
            <summary>
            Occurs when application needs password for the encrypted file.
            </summary>
            <remarks>
            Write an OnPassword event handler to perform query password for the encrypted file being extracted.
            </remarks>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnFileProgressDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnFileProgress"/> event.</summary>
            <param name="sender">Sender is the object whose event handler is called.</param>
            <param name="fileName">Indicates the current file name.</param>
            <param name="bytesProcessed">Indicates progress for the current group operation in percents.</param>
            <param name="timeElapsed">Indicates the time elapsed from the beginning of the operation</param>
            <param name="progressPhase">Indicates the progress <see cref="T:ComponentAce.Compression.Archiver.ProgressPhase">phase</see> of the operation.</param>
            <param name="cancel">Cancel determines if the current operation on the current file should be cancelled. 
            Set cancel parameter to <b>true</b> if you want to cancel execution of the current operation on the file. 
            Default value for Cancel is <b>false</b>.</param>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnFileRenameDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnFileProgress"/> event.</summary>
            <param name="sender">Sender is the object whose event handler is called.</param>
            <param name="fileName">Indicates the current file name.</param>
            <param name="newFileName">Indicates progress for the current group operation in percents.</param>
            <param name="cancel">Cancel determines if the current operation on the current file should be cancelled. 
            Set cancel parameter to <b>true</b> if you want to cancel executing of the current operation on the file. 
            Default value for Cancel is <b>false</b>.</param>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnProcessFileFailureDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnProcessFileFailure"/> event.</summary>
            <param name="sender">Sender is the object whose event handler is called.</param>
            <param name="fileName">Indicates the current file name.</param>
            <param name="errorMessage"> Indicates error message text.</param>
            <param name="exception">Exception that is thrown</param>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnWriteToStreamFailureDelegate">
            <summary>
             The delegate to handle the <see cref="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnWriteToStreamFailure"/> event.
            </summary>
            <param name="sender">Sender is the object whose event handler is called.</param>
            <param name="innerException">Exception that is thrown.</param>
            <param name="cancel">Cancel determines if the current operation should be cancelled. 
             Set cancel parameter to <b>true</b> if you want to cancel executing of the current operation. 
             Default value for Cancel is <b>false</b>.</param>
        </member>
        <member name="T:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnPasswordDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.ZipForgeRealTime.ZipForgeRealTime.OnPassword"/> event.</summary>
            <param name="sender">Sender is the object whose event handler is called.</param>
            <param name="fileName">Indicates the current file name.</param>
            <param name="newPassword">NewPassword determines new password that will be used for extracting of the encrypted file.</param>
            <param name="abortProcess">Set to true to abort process.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.ArchiveItem">
            <summary>
            Describes parameters of the file stored within the archive file.
            </summary>
            <remarks>
            ArchiveItem value indicates parameters of the file found by <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindFirst(ComponentAce.Compression.Archiver.ArchiveItem@)">FindFirst</see> or <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)">FindNext</see>.
            <para>Do not modify SearchInfoHandler field of this record. It is used by <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindFirst(ComponentAce.Compression.Archiver.ArchiveItem@)">FindFirst</see> and <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)">FindNext</see> methods.</para>
            </remarks>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.ArchiveItem.encryptionAlgorithm">
            <summary>
            Algorithm used to encrypt archive item.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiveItem.Reset">
            <summary>
            Resets archive item to default empty state (no associated file).
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiveItem.#ctor">
            <overloads>Creates a new instance of the <see cref="T:ComponentAce.Compression.Archiver.ArchiveItem"/> class.</overloads>
            <summary>
            Creates a new, empty instance of the <see cref="T:ComponentAce.Compression.Archiver.ArchiveItem"/> class which does not refer to any file.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.ArchiveItem.#ctor(System.String)">
            <summary>
            Creates a new instance of the ArchiveItem class and fills its properties with the properties of the file with the name '<paramref name="fileName"/>'.
            </summary>
            <param name="fileName">A full name of the file to create archive item from.</param>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiveItem.CompressedSize">
            <summary>
            Size in bytes of the compressed file.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiveItem.CompressionRate">
            <summary>
            Indicates compression rate for this file. 
            </summary>
            <remarks>
            CompressionRate = (1 - CompressedSize / UncompressedSize) * 100.0
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiveItem.Encrypted">
            <summary>
            Indicates if file is encrypted with <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.Password"/>.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiveItem.LastWriteTime">
            <summary>
            Gets date and time when archive item was last written to (last modified time).
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiveItem.FileCreationDateTime">
            <summary>
            Gets/Sets file creation date and time.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiveItem.FileLastAccessDateTime">
            <summary>
            Gets/Sets file last access date and time.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiveItem.CRC">
            <summary>
            Crc32 check sum of the compressed file.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiveItem.Comment">
            <summary>
            Comment of the file stored in the archive.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.ArchiveItem.EncryptionAlgorithm">
            <summary>
            Gets/Sets algorithm used to encrypt/decrypt archive item.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver">
            <summary>
            A base archiver for zip compression.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._volumeFileName">
            <summary>
            Name for the volume.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._volumeNumber">
            <summary>
            Number of the volume.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._tempDir">
            <summary>
            Specifies a temporary directory to use during archiving operations.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._sfxStub">
            <summary>
            Specifies the file name of the executable stub.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._spanningMode">
            <summary>
            Spanning mode for the archive.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._spanningOptions">
            <summary>
            Spanning options for the archive.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._isExtractCorruptedFiles">
            <summary>
            Determines whether tries to restore central directory by local headers in case of central directory corrupted.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._compressionMethod">
            <summary>
            Method that will be used for compression.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._compressionMode">
            <summary>
            Determines compression rate. Values from 0 to 9, where 0 - without compression and 9 - max compression rate.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._compressionLevel">
            <summary>
            Enumerable value for <see cref="F:ComponentAce.Compression.Archiver.BaseArchiver._compressionMode"/>
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._zip64Mode">
            <summary>
            Determines when to use Zip64 mode (Disable|Always|Auto).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._unicodeFilenames">
            <summary>
            Determines whether adds extra XCeeed fields contains file name in unicode format.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.BaseArchiver._storeNTFSTimeStamps">
            <summary>
            Determines whether includes NTFS file times.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.GetFileComment">
            <summary>
            Gets the archive comment.
            </summary>
            <returns>Archive comment string.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.SetFileComment(System.String)">
            <summary>
            Sets the archive comment.
            </summary>
            <param name="value">New comment value.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.CheckModifySpanning">
            <summary>
            Checks whether archive is not in update and contains at least 1 item and spanning mode not equals <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningMode"/>.None.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.GetEncrypted">
            <summary>
            Determines whether the archive is encrypted.
            </summary>
            <returns>Archive encryption status.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.SetCompressionLevel(ComponentAce.Compression.Archiver.CompressionLevel)">
            <summary>
            Sets the archive compression level.
            </summary>
            <param name="newLevel">The new compression level.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.SetCompressionMode(System.Byte)">
            <summary>
            Sets the archive compression mode.
            </summary>
            <param name="newMode">The new compression mode.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.SetSpanningMode(ComponentAce.Compression.Archiver.SpanningMode)">
            <summary>
            Sets the spanning mode.
            </summary>
            <param name="value">The new spanning mode value.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.GetBlockSize(ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Gets the size of the block.
            </summary>
            <param name="item">The central directory item.</param>
            <returns>Size of the block.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.InternalCompressFile(System.IO.Stream,System.IO.Stream,ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Performs <paramref name="baseItem"/> compression.
            </summary>
            <param name="currentItemStream">The current item stream.</param>
            <param name="compressedStream">The compressed stream.</param>
            <param name="baseItem">The item.</param>
            <returns>
            	<b>True</b> if all data was compressed successfully, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.ZipDecompress(System.Boolean,System.Int32@,System.Int32,System.Int64@,System.IO.Stream@,System.IO.Stream,System.UInt32@,ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Decompresses a file within ZIP archive
            </summary>
            <param name="encrypted">Specifies whether the file is encrypted</param>
            <param name="volumeNumber">Volume number for multi-volume archives</param>
            <param name="lastVolumeNumber">Last volume number for multi-volume archives</param>
            <param name="actualDecompressedSize">Size of decompressed archive item</param>
            <param name="rfs">Stream to read compressed data from</param>
            <param name="wfs">Stream to write compressed data to</param>
            <param name="crc32">Crc32 value, must be initialized</param>
            <param name="decrypter">Decrypter object</param>
            <param name="dirItem">Directory item to decompress</param>
            <returns>
            True if file was decompressed successfully. Otherwise returns false
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FXCDecompress(System.Boolean,System.Int64@,System.Int64@,System.IO.Stream@,System.IO.Stream@,System.Int32@,System.Int32,System.UInt32@,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Decompresses data in custom format.
            </summary>
            <param name="encrypted">if set to <c>true</c>
            	<paramref name="item"/> will be encrypt in the archive.</param>
            <param name="count">The count.</param>
            <param name="decompSize">Size of the decompressed data.</param>
            <param name="compressedStream">Stream to read compressed data from.</param>
            <param name="destinationStream">Stream to write decompressed data to.</param>
            <param name="volumeNumber">The volume number.</param>
            <param name="lastVolumeNumber">The last volume number.</param>
            <param name="fcrc32">Calculated crc32 for compressed stream.</param>
            <param name="item">Item contains information about decompressed item.</param>
            <returns>
            	<b>False</b> if decompress failed, otherwise - <b>true</b>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.InternalDecompressFile(System.IO.Stream,System.IO.Stream,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Decompresses archive item.
            </summary>
            <param name="compressedStream">Stream to read compressed data from.</param>
            <param name="destinationStream">Stream to write decompressed data to.</param>
            <param name="item">Archive item to decompress.</param>
            <returns><b>False</b> if decompress failed, otherwise - <b>true</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.SetCompMethod">
            <summary>
            Sets the compression method.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.SaveRenamedItemToArchive(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Saves the renamed item from backup file stream to archive.
            </summary>
            <param name="backupFileStream">The backup file stream.</param>
            <param name="compressedStream">The compressed stream.</param>
            <param name="itemNo">Number of the item to save.</param>
            <param name="itemNoInBackupArray">Number of the item in backup array.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.AddFromNewSource(System.Int32,System.IO.Stream,ComponentAce.Compression.Archiver.FailureAction@)">
            <summary>
            Saves new item to the archive.
            </summary>
            <param name="itemNo">Number of the item to save.</param>
            <param name="compressedStream">Stream to save.</param>
            <param name="action">Action taken on error.</param>
            <returns>
            	<b>True</b> if everything is OK, otherwise <b>false</b>
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.CalculateTotalProcessFilesSize(System.Int32@)">
            <summary>
            Calculates total bytes to process and save to to _toProcessFilesTotalSize.
            </summary>
            <param name="firstItemNo">Number of the first modified item.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.CalculateBackupOffset(System.Int32,System.Int64@)">
            <summary>
            Calculates the backup offset for the item specified with <paramref name="chgItemNo"/>.
            </summary>
            <param name="chgItemNo">Number of the item.</param>
            <param name="backupOffset">The backup offset.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.GetEndOfTheDataStreamPosition(System.Int32)">
            <summary>
            Gets the offset of the end of the data in the archive stream.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <returns>Offset of the end of data stream.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.CloseArchive">
            <summary>
            Closes current archive file.
            </summary>
            <example> The following example shows how to add files to archive and extract them:
            <code lang="C#">
            zipForge1.FileName ="C:\\TEST\\test.zip";
            // Create a new archive file
            zipForge1.OpenArchive(FileMode.Create);
            // Set path to folder with the files to archive
            zipForge1.BaseDir = "\\Source";
            // Add all files and directories from the backupFileStream folder to the archive
            zipForge1.AddFiles("*.*");
            // Set path to the compressedStream folder
            zipForge1.BaseDir = "\\Dest";
            // extract all files in archive
            zipForge1.ExtractFiles("*.*");
            // Close archive
            zipForge1.CloseArchive();
            </code>
            	<code lang="vbnet">
            ' Set archive file name
            ZipForge1.FileName = "C:\TEST\test.zip"
            ' Create a new archive file
            ZipForge1.OpenArchive(System.IO.FileMode.Create)
            ' Set path to folder with the files to archive
            ZipForge1.BaseDir = DemoFolder + "\\Source"
            ' Add all files and directories from the backupFileStream folder to the archive
            ZipForge1.AddFiles("*.*")
            ' Set path to the compressedStream folder
            ZipForge1.BaseDir = DemoFolder + "\\Dest"
            ' extract all files in archive
            ZipForge1.ExtractFiles("*.*")
            ' Close archive
            ZipForge1.CloseArchive()
            </code>
            </example>
            <seealso cref="M:ComponentAce.Compression.Archiver.BaseArchiver.OpenArchive(System.IO.Stream,System.Boolean)"/>
            <remarks>
            Call CloseArchive to close current archive file. CloseArchive automatically finishes current transaction started by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.BeginUpdate"/> method and sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <b>false</b>.
            <para>Call <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.OpenArchive(System.IO.Stream,System.Boolean)"/> to create or open archive file.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FillDirItem(System.Int32,System.String)">
            <summary>
            Initializes the item specified with <paramref name="itemNo"/> by the file specified by <paramref name="fileName"/>.
            </summary>
            <param name="itemNo">Number of the item to initialize.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FillDirItem(System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.IO.FileAttributes)">
            <summary>
            Fills the directory item.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="fileName">Name of the file.</param>
            <param name="arcFileName">Archive file name.</param>
            <param name="isDirectory">If set to <c>true</c> item reprtesents directory.</param>
            <param name="retrieveFileDate">If set to <c>true</c> file date will be retrives from the file.</param>
            <param name="attr">Attributes to set as ExternalAttriburtes for the item specified with <paramref name="itemNo"/>.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.InitDirItem(System.Int32,System.Boolean)">
            <summary>
            Initializes item.
            </summary>
            <param name="itemNo">Number of the item to initialize.</param>
            <param name="isDirectory">Determines if item is directory.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.ExtractItem(System.Int32,System.IO.Stream)">
            <summary>
            Extracts the item specified with <paramref name="itemNo"/> to the <paramref name="destStream"/>. This method is used by <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractTaggedFile(System.Int32,System.String,System.String,System.Boolean@)"/>
            </summary>
            <param name="itemNo">Number of the item to extract.</param>
            <param name="destStream">Destination stream.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  19:08
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.GetLastModificationDateTime(ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Gets the last modification date time for the <paramref name="baseItem"/>.
            </summary>
            <param name="baseItem">The item.</param>
            <returns>Modification time.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.SetFileLastWriteTime(System.Int32,System.IO.FileStream)">
            <summary>
            Sets the file last write time.
            </summary>
            <param name="itemNo">Number of the item.</param>
            <param name="fileStream">The file stream for which last write time will be set.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.AddNewItemToArchive(ComponentAce.Compression.Archiver.BaseArchiveItem,System.Boolean)">
            <summary>
            Adds new item to the _itemsHandler and initializes it from <paramref name="item"/>.
            </summary>
            <param name="item">The item to add.</param>
            <param name="move">if set to <c>true</c> then operation for the item is move, otherwise - add.</param>
            <returns>
            Number of the added item. If add failed or process was not been confirmed -1 returns.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.CreateNewArchiveItem(System.String,System.String,ComponentAce.Compression.Archiver.StorePathMode)">
            <summary>
            Creates the new archive item.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="baseDir">The base directory.</param>
            <param name="storePathMode">The store path mode.</param>
            <returns>Archive item.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.CopyItem(ComponentAce.Compression.Archiver.BaseArchiveItem,ComponentAce.Compression.Interfaces.IItem)">
            <summary>
            Copies <paramref name="source"/> to <paramref name="destination"/>.
            </summary>
            <param name="source">The source item.</param>
            <param name="destination">The destination item.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.ReopenFileStream(System.String)">
            <summary>
            Reopens the file stream (multi-spanning).
            </summary>
            <param name="newFileName">New name of the file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.MakeDefaultVolumeName(System.String@,System.Int32)">
            <summary>
            Prepares default volume name.
            </summary>
            <param name="volumeFileName">Name of the volume file.</param>
            <param name="volumeNumber">The volume number.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.GetFreeDriveSpace(System.String)">
            <summary>
            Gets the free drive space.
            </summary>
            <param name="volumeFileName">Name of the volume file.</param>
            <returns>Free space.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.WriteToStream(System.Byte[],System.Int64,System.IO.Stream@,System.Int32@)">
            <summary>
            Writes to stream with request of new volume.
            </summary>
            <param name="buffer">The buffer contains data.</param>
            <param name="count">The count of bytes need to be written to the <paramref name="stream"/>.</param>
            <param name="stream">Destination stream.</param>
            <param name="volumeNumber">The volume number.</param>
            <returns>Written bytes count.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.WriteToStream(System.Byte[],System.Int64,System.IO.Stream@,System.Int32@,System.Int32)">
            <summary>
            Writes to stream with request of new volume.
            </summary>
            <param name="buffer">The buffer contains data.</param>
            <param name="count">The count of bytes need to be written to the <paramref name="stream"/>.</param>
            <param name="stream">Destination stream.</param>
            <param name="volumeNumber">The volume number.</param>
            <param name="requiredFreeSpace">The required free space.</param>
            <returns>Written bytes count.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.WriteToStream(System.IO.Stream,System.IO.Stream@,System.Int32@)">
            <summary>
            Writes to stream with request of new volume.
            </summary>
            <param name="srcStream">The source stream.</param>
            <param name="destStream">The destination stream.</param>
            <param name="volumeNumber">The volume number.</param>
            <returns>Written bytes count.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.WriteToStream(System.IO.Stream,System.IO.Stream@,System.Int32@,System.Int64)">
            <summary>
            Writes to stream with request of new volume.
            </summary>
            <param name="srcStream">The source stream.</param>
            <param name="destStream">The destination stream.</param>
            <param name="volumeNumber">The volume number.</param>
            <param name="size">Count of bytes from source stream should be written to destination stream.</param>
            <returns>Written bytes count.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.WriteToStream(System.IO.Stream,System.IO.Stream@,System.Int32@,System.Int64,System.Int32)">
            <summary>
            Writes to stream with request of new volume.
            </summary>
            <param name="srcStream">The source stream.</param>
            <param name="destStream">The destination stream.</param>
            <param name="volumeNumber">The volume number.</param>
            <param name="size">Count of bytes from source stream should be written to destination stream.</param>
            <param name="requiredFreeSpace">The required free space.</param>
            <returns>Written bytes count.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.WriteBufferToStream(System.Byte[],System.Int64,System.IO.Stream@,System.Int32@)">
            <summary>
            Writes buffer to stream with request of new volume.
            </summary>
            <param name="buffer">The buffer contains data.</param>
            <param name="count">The count of bytes need to be written to the <paramref name="stream"/>.</param>
            <param name="stream">Destination stream.</param>
            <param name="volumeNumber">The volume number.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.WriteBufferToStream(System.Byte[],System.Int64,System.IO.Stream@,System.Int32@,System.Int32)">
            <summary>
            Writes buffer to stream with request of new volume.
            </summary>
            <param name="buffer">The buffer contains data.</param>
            <param name="count">The count of bytes need to be written to the <paramref name="stream"/>.</param>
            <param name="stream">Destination stream.</param>
            <param name="volumeNumber">The volume number.</param>
            <param name="requiredFreeSpace">The required free space.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.WriteToStreamWithOnDiskFull(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Writes to stream with on disk full check.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <param name="stream">The stream where the buffer will be written.</param>
            <returns><c>True</c> if all data has been written successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.OpenVolume(System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Opens the volume.
            </summary>
            <param name="firstVolume">Indicates first volume.</param>
            <param name="lastVolume">Indicates last volume.</param>
            <param name="volumeNumber">Specifies volume number.</param>
            <param name="lastVolumeNumber">The last volume number.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.IsSFXArchive(System.String)">
            <summary>
            Determines whether archive is SFX (checks if archive file name ends with '.exe').
            </summary>
            <param name="ArcFileName">Name of the arc file.</param>
            <returns>
            	<c>true</c> if the archive is SFX; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.InternalCreateArchive">
            <summary>
            Creates _compressedStream and _currentItemsHandler.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.InternalOpenNonSFXArchive">
            <summary>
            Opens non SFX archive.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.InternalOpenSFXArchive">
            <summary>
            Opens SFX archive.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DetectSpanning">
            <summary>
            Determines single file || splitting || spanning.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.InternalOpenArchive">
            <summary>
            Opens the archive.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DoOnPassword(System.String,System.String@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnPassword"/> event if it has any subscribers, otherwise throws an exception.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="newPassword">The new password.</param>
            <param name="skipFile">if set to <c>true</c> skip file.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DoOnRequestBlankVolume(System.Int32,System.String@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestBlankVolume"/> event if it has any subscribers, otherwise throws an exception if <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningMode"/> is set to SpanningMode.Spanning.
            </summary>
            <param name="volumeNumber">The volume number.</param>
            <param name="volumeFileName">Name of the volume file.</param>
            <param name="cancel">If set to <c>true</c> cancel the operation.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DoOnRequestFirstVolume(System.String@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestFirstVolume"/> event if it has any subscribers, otherwise throws an exception if <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningMode"/> is set to SpanningMode.Spanning.
            </summary>
            <param name="volumeFileName">Name of the volume file.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  19:47
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DoOnRequestLastVolume(System.String@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestLastVolume"/> event if it has any subscribers, otherwise throws an exception if <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningMode"/> is set to SpanningMode.Spanning.
            </summary>
            <param name="volumeFileName">Name of the volume file.</param>
            <param name="cancel">If set to <c>true</c> cancel the operation.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DoOnRequestMiddleVolume(System.Int32,System.String@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestMiddleVolume"/> event if it has any subscribers, otherwise throws an exception if <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningMode"/> is set to SpanningMode.Spanning.
            </summary>
            <param name="volumeNumber">The volume number.</param>
            <param name="volumeFileName">Name of the volume file.</param>
            <param name="cancel">if set to <c>true</c> cancel the operation.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DoOnDiskFull(System.Int32,System.String@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnDiskFull"/> event if it has any subscribers, otherwise throws an exception.
            </summary>
            <param name="volumeNumber">The volume number.</param>
            <param name="volumeFileName">Name of the volume file.</param>
            <param name="cancel">if set to <c>true</c> cancel the operation.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  19:49
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DoOnProcessVolumeFailure(ComponentAce.Compression.Archiver.ProcessOperation,System.Int32,System.String@,System.Boolean@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnProcessVolumeFailure"/> event if it has any subscribers.
            </summary>
            <param name="operation">The operation.</param>
            <param name="volumeNumber">The volume number.</param>
            <param name="volumeFileName">Name of the volume file.</param>
            <param name="cancel">If set to <c>true</c> cancel the operation.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.CreateNewItemsHandler(System.IO.Stream,System.Boolean)">
            <summary>
            Creates the new items handler.
            </summary>
            <param name="s">The s.</param>
            <param name="create">If set to <c>true</c> then volume number will be set to 0 and sfx stub vill be saved.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FXCEncryptBuffer(System.Int32,System.Byte[]@,System.Int32,System.String)">
            <summary>
            FXCs the encrypt buffer.
            </summary>
            <param name="cryptoAlg">The cryptography algorithm.</param>
            <param name="inBuf">The input buffer.</param>
            <param name="length">The length.</param>
            <param name="password">The password.</param>
            <returns><b>True</b> if everything is OK, otherwise - <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FXCDecryptBuffer(System.Int32,System.Byte[]@,System.Int64,System.String)">
            <summary>
            FXCs the decrypt buffer.
            </summary>
            <param name="cryptoAlg">The cryptography algorithm.</param>
            <param name="inBuf">The input buffer.</param>
            <param name="length">The length.</param>
            <param name="password">The password.</param>
            <returns><b>True</b> if everything is OK, otherwise - <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FXCEncryptFilename(System.Byte[]@,System.Int32,System.String)">
            <summary>
            Encrypts buffer using Rijndael256 algorithm.
            </summary>
            <param name="inBuf">The input buffer.</param>
            <param name="length">The length.</param>
            <param name="Password">The password.</param>
            <returns><b>True</b> if everything is OK, otherwise - <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FXCDecryptFilename(System.Byte[]@,System.Int32,System.String)">
            <summary>
            Decrypts buffer using Rijndael256 algorithm.
            </summary>
            <param name="inBuf">The input buffer.</param>
            <param name="length">The length.</param>
            <param name="Password">The password.</param>
            <returns><b>True</b> if everything is OK, otherwise - <b>false</b>.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.#ctor">
            <summary>
            Creates new instance of the <see cref="T:ComponentAce.Compression.Archiver.BaseArchiver"/> class and initializes its members with default values.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.Finalize">
            <summary>
            Closes current archive file on destruction (Calls <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive"/>).
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.OpenArchive(System.IO.Stream,System.Boolean)">
            <summary>
            Opens or creates an archive within a stream.
            </summary>
            <param name="stream">Specifies Stream descendant object with the archive contents.</param>
            <param name="create">Determines if file should be created.</param>
            <remarks>
            Call OpenArchive to open or create an archive in the stream. If <paramref name="create"/> parameter is set to <b>true</b> then OpenArchive will create and open it. OpenArchive sets <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Active"/> to <b>true</b>.
            <para>Call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.CloseArchive"/> to close the archive file.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.MakeSFX(System.String)">
            <summary>
            Creates a self-extracting (SFX) archive.
            </summary>
            <example>The following example shows how to create a self-extracting (SFX) archive:
            <code lang="C#">
             zipForge1.FileName = "C:\\TEST\\test.zip";
             zipForge1.SFXStub = "SFXStub\sfxstub.exe";
             zipForge1.MakeSFX("Temp\test.exe");
            </code>
            <code lang="vbnet">
             ZipForge1.FileName =  "C:\TEST\test.zip";
             ZipForge1.SFXStub = "SFXStub\sfxstub.exe"
             ZipForge1.MakeSFX("Temp\test.exe")
            </code>
            </example>
            <param name="SFXFileName">Specifies SFX archive name.</param>
            <remarks>
            Call MakeSFX to create the SFX archive from the current archive specified by the <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property.
            Set <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.SFXStub"/> property to the executable stub name before calling MakeSFX.
            <para>Look at MakeSFX demo from Demos folder to learn more about creating SFX archives.</para>
            </remarks> 
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.ChangeFilesAttr(System.String,System.IO.FileAttributes)">
            <summary>
            Changes file attributes for the files stored within the current archive file.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard
            characters.</param>
            <param name="newAttributes">Specifies new file attributes.</param>
            <remarks>
            Call ChangeFilesAttr to change file attributes for files stored within the
            current archive file.
            <para>The <paramref name="fileMask"/> parameter is the directory and file name
            mask, including wildcard characters. For example, "TEST\\*.*"
            specifies all files in the TEST directory stored within the archive file. All
            files that meet <paramref name="fileMask"/> will be processed.</para>
            </remarks>
            <example>The following example shows how to change attributes for the files in the archive:
            <code lang="C#">
            // Create a new instance of tar archive object.
            TarForge tarForge = new TarForge();
            // Set the directory where files will be searched for add operation.
            tarForge.BaseDir = @"Tests\Source\Files";
            // Specify the name for the tar archive file.
            tarForge.FileName = @"Tests\Temp\archive.tar";
            // Create and open the new archive.
            tarForge.OpenArchive(FileMode.Create);
            // The mask '*.*' specifies all files to add. To prevent adding several files
            // you can specify any other file name mask, including wildcard characters.
            tarForge.AddFiles("*.*");
            // Specify the attributes for files to set that fit to the specified mask.
            tarForge.ChangeFilesAttr(
            "*.*", // The directory and the file name mask, including wildcard characters.
            FileAttributes.ReadOnly // Specify the new file attributes.
            );
            //Close the archive
            tarForge.CloseArchive();
            </code>
            	<code lang="VB">
            ' Create a new instance of tar archive object.
            Dim tarForge As New TarForge()
            ' Set the directory where files will be searched for add operation.
            tarForge.BaseDir = "Tests\Source\Files"
            ' Specify the name for the tar archive file.
            tarForge.FileName = "Tests\Temp\archive.tar"
            ' Create and open the new archive.
            tarForge.OpenArchive(FileMode.Create)
            ' The mask '*.*' specifies all files to add. To prevent adding several files
            ' you can specify any other file name mask, including wildcard characters.
            tarForge.AddFiles("*.*")
            ' Specify the attributes for files to set that fit to the specified mask.
            ' The directory and the file name mask, including wildcard characters.
            ' Specify the new file attributes.
            tarForge.ChangeFilesAttr("*.*", FileAttributes.[ReadOnly])
            'Close the archive
            tarForge.CloseArchive()</code>
            </example>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.ChangeFilesIntAttr(System.String,System.UInt16)">
            <summary>
            Change files attributes by mask
            </summary>
            <param name="fileMask">Specifies the file mask</param>
            <param name="newAttr">New file attribute</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.ChangeFilesComment(System.String,System.String)">
            <summary>
            Changes file comment for files stored within the current archive file.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="newComment">Specifies new file comment.</param>
            <remarks>
            Call ChangeFilesComment to change file attributes for files stored within the current archive file.
            <para>The <paramref name="fileMask"/> parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. All files that meets <paramref name="fileMask"/> will be processed.</para>
            <para>To change the comment of the whole archive file use the Comment property.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.IsFilePasswordValid(System.String,System.String)">
            <summary>
            Indicates whether the password is valid for specified encrypted file in archive.
            </summary>
            <param name="fileName">Specifies file name being tested.</param>
            <param name="password">The password parameter is a password to check.</param>
            <returns>True if the password is valid.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.AddFiles">
            <summary>
            Adds files to the archive specified by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <overloads>
            Adds files to the archive.
            </overloads>
            <example> The following example shows how to add files to archive and extract them:
            <code lang="C#">
            zipForge1.FileName ="C:\\TEST\\test.zip";
            // Create a new archive file
            zipForge1.OpenArchive(FileMode.Create);
            // Set path to folder with the files to archive
            zipForge1.BaseDir = "\\Source";
            // Add all files and directories from the backupFileStream folder to the archive
            zipForge1.AddFiles("*.*");
            // Set path to the compressedStream folder
            zipForge1.BaseDir = "\\Dest";
            // extract all files in archive
            zipForge1.ExtractFiles("*.*");
            // Close archive
            zipForge1.CloseArchive();
            </code>
            	<code lang="vbnet">
            ' Set archive file name
            ZipForge1.FileName = "C:\TEST\test.zip"
            ' Create a new archive file
            ZipForge1.OpenArchive(System.IO.FileMode.Create)
            ' Set path to folder with the files to archive
            ZipForge1.BaseDir = DemoFolder + "\\Source"
            ' Add all files and directories from the backupFileStream folder to the archive
            ZipForge1.AddFiles("*.*")
            ' Set path to the compressedStream folder
            ZipForge1.BaseDir = DemoFolder + "\\Dest"
            ' extract all files in archive
            ZipForge1.ExtractFiles("*.*")
            ' Close archive
            ZipForge1.CloseArchive()
            </code>
            </example>
            <remarks>
            Use AddFiles to add files to the open archive file. If you need to
            delete backupFileStream files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/> instead of AddFiles.
            If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, AddFiles will
            search files recursively.
            <para>AddFiles variant without parameters uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>,
            <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr properties
            to specify search conditions and to exclude files from add operation.</para>
            	<para>The fileMask parameter is the directory and file name mask, including
            wildcard characters. For example, "C:\TEST\*.*" specifies all files in the
            C:\TEST directory. All files that meets fileMask and searchAttributes will be added
            to the archive.</para>
            	<para>The searchAttributes parameter specifies the special files to include in
            addition to all normal files.</para>
            	<para>The exclusionMask specifies files to be excluded from the add operation.</para>
            	<para> If some errors occurs an exception will be raised. Write an
            <see cref="E:ComponentAce.Compression.Archiver.ArchiverForgeBase.OnProcessFileFailure"/> event handler to perform your own error handling.</para>
            	<para>If you need to change the name of the added file, use
            <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnStoreFile"/> event handler.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.AddFiles(System.String,System.IO.FileAttributes,System.String)">
            <summary>
            Adds files specified by <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters to the archive.
            </summary>        
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
            <param name="exclusionMask">Specifies files to be excluded from add operation.</param>
            <remarks>
            Use AddFiles to add files to the open archive file. If you need to delete backupFileStream files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/> instead of AddFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, AddFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.AddFromBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            Adds data stored in a memory buffer to the archive.
            </summary>
            <param name="fileName">Specifies file name that will be used to store data from the memory buffer.</param>
            <param name="buffer">Buffer to add data from.</param>
            <param name="count">Specifies blockSizeToDecompress in bytes of the buffer.</param>
            <remarks>
            Use AddFromBuffer to compress data stored in the memory buffer to the file inside the archive.
            <para>If some errors occurs an exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.AddFromStream(System.String,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Adds specified amount of data stored at a specified position in the stream to the archive.
            </summary>
            <param name="fileName">Specifies file name that will be used to store data from the Stream descendant object.</param>
            <param name="stream">Stream to add data from.</param>
            <param name="position">Determines starting position in stream for adding data to the archive.</param>
            <param name="count">Count specifies blockSizeToDecompress of the data in stream for adding to the archive.</param>
            <remarks>
            	<para>Use AddFromStream to compress data stored in the Stream descendant object like FileStream or MemoryStream to the file inside the archive. </para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.AddFromString(System.String,System.String)">
            <summary>
            Adds string to the archive.
            </summary>
            <param name="fileName">Specifies file name that will be used to store string.</param>
            <param name="text">String to add data from.</param>
            <remarks>
            Use AddFromString to compress string to the file inside the archive.
            <para>If some errors occurs an exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.AddItem(ComponentAce.Compression.Archiver.ArchiveItem)">
            <summary>
            Adds a file specified in the <paramref name="item"/> to the archive.
            </summary>
            <param name="item">Archive item to be added to the archive</param>
            <remarks>Use AddItem method to add file with the given properties, such as comments, attributes, modification date, etc.</remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.MoveFiles">
            <summary>
            Moves files to the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <overloads>
            Adds files to the archive and deletes original files.
            </overloads>
            <example> The following example shows how to handle the archive file:
            <code lang="C#">
            zipForge1.FileName = "C:\\TEST\\test.zip";
            // Create a new archive file
            zipForge1.OpenArchive(FileMode.Create);
            // Let's encrypt all files
            zipForge1.Password = "The password";
            // Set path to folder with some text files to BaseDir
            zipForge1.BaseDir = "Source";
            // Do not compress MPEG3 files
            zipForge1.NoCompressionMasks.Add("*.mp3");
            // Add all files and directories from Source excluding text files to the archive
            zipForge1.AddFiles("*.*", FileAttributes.Archive|
            FileAttributes.Normal | FileAttributes.Directory, "*.txt");// Set path to compressedStream folder
            zipForge1.BaseDir = "Dest";
            // Extract all files and directories from the archive to BaseDir
            // After extracting directory Dest should contain all files from folder
            // Source excluding *.txt files
            zipForge1.ExtractFiles("*.*");
            // Use full path
            zipForge1.Options.StorePath = StorePathMode.FullPath;
            // Set path to compressedStream folder
            zipForge1.BaseDir = "Source1";
            // Move all text files from Source1 to the archive
            // After moving directory Source1 should not contain any text files
            zipForge1.MoveFiles("*.txt", FileAttributes.Normal | FileAttributes.Archive);
            // Set path to current drive
            zipForge1.BaseDir = Directory.GetDirectoryRoot(Directory.GetCurrentDirectory());
            // Overwrite all files
            zipForge1.Options.Overwrite = OverwriteMode.Always;
            // Update all files excluding 1???.newDirItem* from Source1
            zipForge1.UpdateFiles(DemoFolder + "\\Source1\\*.*", FileAttributes.Archive | FileAttributes.Normal,       "2???.newDirItem*");
            // Set temporary directory
            zipForge1.TempDir = "Temp";
            // Test all files and directories in the archive
            try
            {
            zipForge1.TestFiles("*.*");
            }
            catch
            {
            MessageBox.Show("Archive is corrupted");
            }
            // Close archive
            zipForge1.CloseArchive();
            </code>
            	<code lang="vbnet">
            zipForge1.FileName = "C:\TEST\test.zip";
            ' Create a new archive file
            ZipForge1.OpenArchive(System.IO.FileMode.Create)
            ' Let's encrypt all files
            ZipForge1.Password = "The password"
            ' Set path to folder with some text files to BaseDir
            ZipForge1.BaseDir = "Source"
            ' Do not compress MPEG3 files
            ZipForge1.NoCompressionMasks.Add("*.mp3")
            ' Add all files and directories from Source excluding text files to the archive
            ZipForge1.AddFiles("*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Directory, "*.txt")
            ' Set path to compressedStream folder
            ZipForge1.BaseDir = "Dest"
            ' Extract all files and directories from the archive to BaseDir
            ' After extracting directory Dest should contain all files from folder
            ' Source excluding *.txt files
            ZipForge1.ExtractFiles("*.*")
            ' Use full path
            ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.FullPath
            ' Set path to compressedStream folder
            ZipForge1.BaseDir = "Source1"
            ' Move all text files from Source1 to the archive
            ' After moving directory Source1 should not contain any text files
            ZipForge1.MoveFiles("*.txt", System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Archive)
            ' Set path to current drive
            ZipForge1.BaseDir = System.IO.Directory.GetDirectoryRoot(System.IO.Directory.GetCurrentDirectory())
            ' Overwrite all files
            ZipForge1.Options.Overwrite = ComponentAce.Compression.ZipForge.OverwriteMode.Always
            ' Update all files excluding 1???.newDirItem* from Source1
            ZipForge1.UpdateFiles(DemoFolder + "\Source1\*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal, "2???.newDirItem*")
            ' Set temporary directory
            ZipForge1.TempDir = DemoFolder + "Temp"
            ' Test all files and directories in the archive
            Try
            ZipForge1.TestFiles("*.*")
            Catch
            MessageBox.Show("Archive is corrupted")
            End Try
            ' Use full path
            ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.RelativePath
            ZipForge1.BaseDir = "Dest1"
            ' Extract all files to Dest1
            ZipForge1.ExtractFiles("*.*")
            ' Close the archive
            ZipForge1.CloseArchive()
            </code>
            </example>
            <remarks>
            Use MoveFiles to move files to the open archive file. MoveFiles deletes all files after they will be added to the archive. If you need to add files to the archive without deleting source files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> instead of MoveFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, MoveFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.MoveFiles(System.String,System.IO.FileAttributes,System.String)">
             <summary>
             Moves files to archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
             </summary>
             <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
             <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
             <param name="exclusionMask">Specifies files to be excluded from the move operation.</param>
             <remarks>
             Use MoveFiles to move files to the open archive file. MoveFiles deletes all files after they will be added to the archive. If you need to add files to the archive without deleting source files, use <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> instead of MoveFiles. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, MoveFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.RenameFile(System.String,System.String)">
            <summary>
            Renames file stored within the current archive file.
            </summary>
            <param name="oldName">Specifies file to be renamed.</param>
            <param name="newName">Specifies new name for the file.</param>
            <remarks>
            Call RenameFile to rename file stored in the open archive.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DeleteFiles">
            <summary>
            Deletes files stored within the archive specified by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <overloads>
            Deletes files stored within the archive.
            </overloads>
            <example> The following example shows how to handle the archive file:
            <code lang="C#">
            zipForge1.FileName = "C:\\TEST\\test.zip";
            // Create a new archive file
            zipForge1.OpenArchive(FileMode.Create);
            // Let's encrypt all files
            zipForge1.Password = "The password";
            // Set path to folder with some text files to BaseDir
            zipForge1.BaseDir = "Source";
            // Do not compress MPEG3 files
            zipForge1.NoCompressionMasks.Add("*.mp3");
            // Add all files and directories from Source excluding text files to the archive
            zipForge1.AddFiles("*.*", FileAttributes.Archive|
            FileAttributes.Normal | FileAttributes.Directory, "*.txt");// Set path to compressedStream folder
            zipForge1.BaseDir = "Dest";
            // Extract all files and directories from the archive to BaseDir
            // After extracting directory Dest should contain all files from folder
            // Source excluding *.txt files
            zipForge1.ExtractFiles("*.*");
            // Use full path
            zipForge1.Options.StorePath = StorePathMode.FullPath;
            // Set path to compressedStream folder
            zipForge1.BaseDir = "Source1";
            // Move all text files from Source1 to the archive
            // After moving directory Source1 should not contain any text files
            zipForge1.MoveFiles("*.txt", FileAttributes.Normal | FileAttributes.Archive);
            // Set path to current drive
            zipForge1.BaseDir = Directory.GetDirectoryRoot(Directory.GetCurrentDirectory());
            // Overwrite all files
            zipForge1.Options.Overwrite = OverwriteMode.Always;
            // Update all files excluding 1???.newDirItem* from Source1
            zipForge1.UpdateFiles(DemoFolder + "\\Source1\\*.*", FileAttributes.Archive | FileAttributes.Normal,       "2???.newDirItem*");
            // Set temporary directory
            zipForge1.TempDir = "Temp";
            // Test all files and directories in the archive
            try
            {
            zipForge1.TestFiles("*.*");
            }
            catch
            {
            MessageBox.Show("Archive is corrupted");
            }
            // Close archive
            zipForge1.CloseArchive();
            </code>
            	<code lang="vbnet">
            zipForge1.FileName = "C:\TEST\test.zip";
            ' Create a new archive file
            ZipForge1.OpenArchive(System.IO.FileMode.Create)
            ' Let's encrypt all files
            ZipForge1.Password = "The password"
            ' Set path to folder with some text files to BaseDir
            ZipForge1.BaseDir = "Source"
            ' Do not compress MPEG3 files
            ZipForge1.NoCompressionMasks.Add("*.mp3")
            ' Add all files and directories from Source excluding text files to the archive
            ZipForge1.AddFiles("*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Directory, "*.txt")
            ' Set path to compressedStream folder
            ZipForge1.BaseDir = "Dest"
            ' Extract all files and directories from the archive to BaseDir
            ' After extracting directory Dest should contain all files from folder
            ' Source excluding *.txt files
            ZipForge1.ExtractFiles("*.*")
            ' Use full path
            ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.FullPath
            ' Set path to compressedStream folder
            ZipForge1.BaseDir = "Source1"
            ' Move all text files from Source1 to the archive
            ' After moving directory Source1 should not contain any text files
            ZipForge1.MoveFiles("*.txt", System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Archive)
            ' Set path to current drive
            ZipForge1.BaseDir = System.IO.Directory.GetDirectoryRoot(System.IO.Directory.GetCurrentDirectory())
            ' Overwrite all files
            ZipForge1.Options.Overwrite = ComponentAce.Compression.ZipForge.OverwriteMode.Always
            ' Update all files excluding 1???.newDirItem* from Source1
            ZipForge1.UpdateFiles(DemoFolder + "\Source1\*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal, "2???.newDirItem*")
            ' Set temporary directory
            ZipForge1.TempDir = DemoFolder + "Temp"
            ' Test all files and directories in the archive
            Try
            ZipForge1.TestFiles("*.*")
            Catch
            MessageBox.Show("Archive is corrupted")
            End Try
            ' Use full path
            ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.RelativePath
            ZipForge1.BaseDir = "Dest1"
            ' Extract all files to Dest1
            ZipForge1.ExtractFiles("*.*")
            ' Close the archive
            ZipForge1.CloseArchive()
            </code>
            </example>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DeleteFiles(System.String,System.IO.FileAttributes,System.String)">
             <summary>
             Deletes files stored within the archive and specified by <paramref name="fileMask"/>, <paramref name="searchAttributes"/> and <paramref name="exclusionMask"/> parameters.
             </summary>
             <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
             <param name="searchAttributes">Specifies the special files to include in addition to all normal files.</param>
             <param name="exclusionMask">Specifies files to be excluded from the delete operation.</param>
             <remarks>
             Use DeleteFiles to delete files from the open archive file. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, DeleteFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.UpdateFiles">
            <summary>
            Updates files stored within the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <overloads>
            Updates files stored within the archive.
            </overloads>
            <example> The following example shows how to handle the archive file:
            <code lang="C#">
            zipForge1.FileName = "C:\\TEST\\test.zip";
            // Create a new archive file
            zipForge1.OpenArchive(FileMode.Create);
            // Let's encrypt all files
            zipForge1.Password = "The password";
            // Set path to folder with some text files to BaseDir
            zipForge1.BaseDir = "Source";
            // Do not compress MPEG3 files
            zipForge1.NoCompressionMasks.Add("*.mp3");
            // Add all files and directories from Source excluding text files to the archive
            zipForge1.AddFiles("*.*", FileAttributes.Archive|
            FileAttributes.Normal | FileAttributes.Directory, "*.txt");// Set path to compressedStream folder
            zipForge1.BaseDir = "Dest";
            // Extract all files and directories from the archive to BaseDir
            // After extracting directory Dest should contain all files from folder
            // Source excluding *.txt files
            zipForge1.ExtractFiles("*.*");
            // Use full path
            zipForge1.Options.StorePath = StorePathMode.FullPath;
            // Set path to compressedStream folder
            zipForge1.BaseDir = "Source1";
            // Move all text files from Source1 to the archive
            // After moving directory Source1 should not contain any text files
            zipForge1.MoveFiles("*.txt", FileAttributes.Normal | FileAttributes.Archive);
            // Set path to current drive
            zipForge1.BaseDir = Directory.GetDirectoryRoot(Directory.GetCurrentDirectory());
            // Overwrite all files
            zipForge1.Options.Overwrite = OverwriteMode.Always;
            // Update all files excluding 1???.newDirItem* from Source1
            zipForge1.UpdateFiles(DemoFolder + "\\Source1\\*.*", FileAttributes.Archive | FileAttributes.Normal,       "2???.newDirItem*");
            // Set temporary directory
            zipForge1.TempDir = "Temp";
            // Test all files and directories in the archive
            try
            {
            zipForge1.TestFiles("*.*");
            }
            catch
            {
            MessageBox.Show("Archive is corrupted");
            }
            // Close archive
            zipForge1.CloseArchive();
            </code>
            	<code lang="vbnet">
            zipForge1.FileName = "C:\TEST\test.zip";
            ' Create a new archive file
            ZipForge1.OpenArchive(System.IO.FileMode.Create)
            ' Let's encrypt all files
            ZipForge1.Password = "The password"
            ' Set path to folder with some text files to BaseDir
            ZipForge1.BaseDir = "Source"
            ' Do not compress MPEG3 files
            ZipForge1.NoCompressionMasks.Add("*.mp3")
            ' Add all files and directories from Source excluding text files to the archive
            ZipForge1.AddFiles("*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Directory, "*.txt")
            ' Set path to compressedStream folder
            ZipForge1.BaseDir = "Dest"
            ' Extract all files and directories from the archive to BaseDir
            ' After extracting directory Dest should contain all files from folder
            ' Source excluding *.txt files
            ZipForge1.ExtractFiles("*.*")
            ' Use full path
            ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.FullPath
            ' Set path to compressedStream folder
            ZipForge1.BaseDir = "Source1"
            ' Move all text files from Source1 to the archive
            ' After moving directory Source1 should not contain any text files
            ZipForge1.MoveFiles("*.txt", System.IO.FileAttributes.Normal Or System.IO.FileAttributes.Archive)
            ' Set path to current drive
            ZipForge1.BaseDir = System.IO.Directory.GetDirectoryRoot(System.IO.Directory.GetCurrentDirectory())
            ' Overwrite all files
            ZipForge1.Options.Overwrite = ComponentAce.Compression.ZipForge.OverwriteMode.Always
            ' Update all files excluding 1???.newDirItem* from Source1
            ZipForge1.UpdateFiles(DemoFolder + "\Source1\*.*", System.IO.FileAttributes.Archive Or System.IO.FileAttributes.Normal, "2???.newDirItem*")
            ' Set temporary directory
            ZipForge1.TempDir = DemoFolder + "Temp"
            ' Test all files and directories in the archive
            Try
            ZipForge1.TestFiles("*.*")
            Catch
            MessageBox.Show("Archive is corrupted")
            End Try
            ' Use full path
            ZipForge1.Options.StorePath = ComponentAce.Compression.ZipForge.StorePathMode.RelativePath
            ZipForge1.BaseDir = "Dest1"
            ' Extract all files to Dest1
            ZipForge1.ExtractFiles("*.*")
            ' Close the archive
            ZipForge1.CloseArchive()
            </code>
            </example>
            <remarks>
            Use UpdateFiles to update files stored within the open archive file. UpdateFiles searches
            for external files specified by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.BaseDir"/> property and synchronizes them
            with files stored within the archive. UpdateFiles uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.OverwriteMode
            to determine how to overwrite existing files inside the archive with external files from
            BaseDir. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, UpdateFiles will search
            files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.UpdateFiles(System.String,System.IO.FileAttributes,System.String)">
             <summary>
             Updates files stored within the archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
             </summary>
             <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
             <param name="searchAttr">Specifies the special files to include in addition to all normal files.</param>
             <param name="exclusionMask">Specifies files to be excluded from the move operation.</param>
             <remarks>
             Use UpdateFiles to update files stored within the open archive file. UpdateFiles searches for external files specified by <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.BaseDir"/> property and synchronizes them with files stored within the archive. UpdateFiles uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.OverwriteMode to determine how to overwrite existing files inside the archive with external files from BaseDir. If <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.Recurse is set to <b>true</b>, UpdateFiles will search files recursively.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.RepairArchive">
            <overloads>
            Repairs the current archive file.
            </overloads>
            <summary>
            Repairs the current archive file.
            </summary>
            <remarks>
            Call RepairArchive to repair damaged archive file. The original archive file is replaced by repaired one.
            </remarks>
            <remarks>
            Call RepairArchive to repair damaged archive file. 
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.RepairArchive(System.String)">
            <summary>
            Saves repaired archive to file specified by outputFileName parameter.
            </summary>
            <param name="outputFileName">Specifies the file name to write the repaired file to.</param>
            <remarks>
            Call RepairArchive to repair damaged archive file. 
            <para><paramref name="outputFileName"/> parameter specifies the file name to write the repaired file to. If <paramref name="outputFileName"/> is is blank then original archive file is replaced by repaired one.</para>
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.IsValidArchiveFile">
            <summary>
            Indicates whether archive is valid. 
            </summary>
            <returns><b>true</b> if the file is a valid archive; otherwise returns <b>false</b>.</returns>
            <remarks>
            Use IsValidArchiveFile to determine whether the file has valid format before opening the archive. 
            <para>The <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileName"/> property is used to specify the file name of the file being checked.</para> 
            <para>Note: Call to this method when archive is open will raise an exception.</para> 
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FindFirst(ComponentAce.Compression.Archiver.ArchiveItem@)">
            <overloads>
            Finds files stored within the archive.
            </overloads>
            <summary>
            Finds files stored within the archive using <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> properties.
            </summary>
            <example> The following example shows how to search files stored within the archive:
            <code lang="C#">
             ZipForge1.FileName = "C:\\TEST\\test.zip";
             ZipForge1.OpenArchive();
             ArchiveItem archiveItem = new ArchiveItem();
             if (zipForge1.FindFirst("*.*", ref archiveItem))
             {
               do
               {
                 ListViewItem listItem = new ListViewItem();
                 listItem.Text = archiveItem.FileName;
                 listView1.Items.Add(listItem);
               }
               while (zipForge1.FindNext(ref archiveItem));
             }
             zipForge1.CloseArchive();
             </code>
             <code lang="vbnet">
             zipForge1.FileName = "C:\TEST\test.zip";
             zipForge1.OpenArchive()
             Dim archiveItem As ArchiveItem = New ArchiveItem()
             If ZipForge1.FindFirst("*.*", archiveItem) Then
               Do                
                 Dim listItem As ListViewItem = New ListViewItem()
                 listItem.Text = archiveItem.FileName
                 listView1.Items.Add(listItem)
               Loop While ZipForge1.FindNext(archiveItem)
             End If
             zipForge1.CloseArchive()
            </code>
            </example>
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            <para>FindFirst variant with single parameter uses <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/>, <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/> and <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.Options"/>.SearchAttr to specify search conditions and to exclude files from delete operation.</para>
            <para>The fileMask parameter is the directory and file name mask, including wildcard characters. For example, "TEST\\*.*" specifies all files in the TEST directory stored within the archive file. First file that meets FileMask and SearchAttr will be found.</para>
            <para>The searchAttributes parameter specifies the special files to include in addition to all normal files</para>
            <para>The exclusionMask specifies files to be excluded from the delete operation.</para>
            </remarks>          
            <param name="archiveItem">ArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <seealso cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FindFirst(System.String,ComponentAce.Compression.Archiver.ArchiveItem@)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> parameter.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">ArchiveItem class.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FindFirst(System.String,ComponentAce.Compression.Archiver.ArchiveItem@,System.IO.FileAttributes)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/> and <paramref name="searchAttr"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">ArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns> 
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)">FindNext</see> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst <paramref name="archiveItem"/> parameter will contain parameters of the first found file.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FindFirst(System.String,ComponentAce.Compression.Archiver.ArchiveItem@,System.IO.FileAttributes,System.String)">
            <summary>
            Finds files stored within the archive using <paramref name="fileMask"/>, <paramref name="searchAttr"/> and <paramref name="exclusionMask"/> parameters.
            </summary>
            <param name="fileMask">The directory and file name mask, including wildcard characters.</param>
            <param name="archiveItem">ArchiveItem class.</param>
            <param name="searchAttr">Attributes of the files to search for.</param>
            <param name="exclusionMask">Specifies files to be excluded from the search operation.</param>
            <returns><b>true</b> if specified file was successfully found, otherwise it returns <b>false</b>.</returns>  
            <remarks>
            Use FindFirst and <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)"/> to find files stored inside the <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive">open</see> archive file. FindFirst returns <b>true</b> if at least one file meets search conditions, otherwise it returns <b>false</b>. Use FindNext to find other files that meets search conditions.
            <para>After calling FindFirst archiveItem parameter will contain parameters of the first found file.</para>
            </remarks> 
            <seealso cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.FindNext(ComponentAce.Compression.Archiver.ArchiveItem@)">
             <summary>
             Finds files stored within the archive.
             </summary>
             <example> The following example shows how to search files stored within the archive:
             <code lang="C#">
              zipForge1.FileName = "C:\\TEST\\test.zip";
              zipForge1.OpenArchive();
              ArchiveItem archiveItem = new ArchiveItem();
              if (zipForge1.FindFirst("*.*", ref archiveItem))
              {
                do
                {
                  ListViewItem listItem = new ListViewItem();
                  listItem.Text = archiveItem.FileName;
                  listView1.Items.Add(listItem);
                }
                while (zipForge1.FindNext(ref archiveItem));
              }
              zipForge1.CloseArchive();
              </code>
              <code lang="vbnet">
              zipForge1.FileName = "C:\TEST\test.zip";
              zipForge1.OpenArchive()
              Dim archiveItem As ArchiveItem = New ArchiveItem()
              If ZipForge1.FindFirst("*.*", archiveItem) Then
                Do                
                  Dim listItem As ListViewItem = New ListViewItem()
                  listItem.Text = archiveItem.FileName
                  listView1.Items.Add(listItem)
                Loop While ZipForge1.FindNext(archiveItem)
              End If
              zipForge1.CloseArchive()
             </code>
             </example> 
             <param name="archiveItem">ArchiveItem class.</param>
             <returns>FindNext returns <b>true</b> if there is at least one file meets search conditions, otherwise it returns <b>false</b>.</returns>
            <remarks>
             Use FindNext to find files stored inside the open archive file. Use FindNext after calling <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindFirst(ComponentAce.Compression.Archiver.ArchiveItem@)"/> only.
             <para>Pass ArchiveItem class found by previous calling of FindFirst or FindNext to the FindNext.
             After calling FindNext archiveItem parameter will contain parameters of the next found file.
             </para>
            </remarks>
            <seealso cref="M:ComponentAce.Compression.Archiver.BaseArchiver.FindFirst(ComponentAce.Compression.Archiver.ArchiveItem@)"/>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DoOnExtractFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnExtractFile"/> event if it has any subscribers.
            </summary>
            <param name="baseItem">Specifies the archive item being extracted from the archive.</param>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.BaseArchiver.DoOnStoreFile(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Fires the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnStoreFile"/> event if it has any subscribers.
            </summary>
            <param name="baseItem">Specifies the archive item being added to the archive.</param>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 27.06.2010  13:49
        </member>
        <member name="E:ComponentAce.Compression.Archiver.BaseArchiver.OnPassword">
            <summary>
            Occurs when application needs password for the encrypted file.
            </summary>
            <remarks>
            Write an OnPassword event handler to perform query password for the encrypted file being <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles">extracted</see> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles">tested</see>.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestBlankVolume">
            <summary>
            Occurs when next volume should be inserted while writing a multi-volume archive.
            </summary>
            <remarks>
            Write an OnRequestBlankVolume event handler to perform asking the user for inserting a blank volume. Also you can override default file name for the new volume. Use cancel parameter to abort current operation.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestFirstVolume">
            <summary>
            Occurs when first volume should be inserted while extracting or testing a multi-volume archive.
            </summary>
            <remarks>
            Write an OnRequestFirstVolume event handler to perform asking the user for inserting a first volume of the multi-volume archive. 
            See also <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestLastVolume"/> and <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestMiddleVolume"/> events. 
            Also you can override default file name for this volume. Use cancel parameter to abort current operation.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestLastVolume">
            <summary>
            Occurs when last volume should be inserted while extracting or testing a multi-volume archive.
            </summary>
            <remarks>
            Write an OnRequestLastVolume event handler to perform asking the user for inserting a last volume of the multi-volume archive. 
            See also <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestFirstVolume"/> and <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestMiddleVolume"/> events.
            Also you can override default file name for this volume. Use cancel parameter to abort current operation.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestMiddleVolume">
            <summary>
            Occurs when middle volume should be inserted while extracting or testing a multi-volume archive.
            </summary>
            <remarks>
            Write an OnRequestMiddleVolume event handler to perform asking the user for inserting a middle volume of the multi-volume archive. 
            See also <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestFirstVolume"/> and <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestLastVolume"/> events.
            VolumeNumber specifies a number of the volume that should be inserted. 
            Also you can override default file name for this volume. Use cancel parameter  to abort current operation. 
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.BaseArchiver.OnDiskFull">
            <summary>
            Occurs when current volume for multi-disk spanned archive is full.
            </summary>
            <remarks>
            Write an OnDiskFull event handler to ask user to insert disk with sufficient free space for writing a multi-disk spanned archive.
            Also you can override default file name for this volume using volumeFileName. Use cancel parameter to abort current operation. 
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.BaseArchiver.OnProcessVolumeFailure">
            <summary>
            Occurs in case of failure of the current operation.
            </summary>
            <remarks>
            Write an OnProcessVolumeFailure event handler to perform some specific actions when archive operation fails. OnProcessVolumeFailure event is triggered by <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.MoveFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.UpdateFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.DeleteFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> if any file error occurs in the listed methods. If you will not specify event handler for OnProcessVolumeFailure any error will raise an exception.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.Comment">
            <summary>
            Specifies the comment of the archive file.
            </summary>
            <remarks>Use this property to set or get the comment of archive file.
            <para>To set comment for each file in archive use <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.ChangeFilesComment(System.String,System.String)"/> method.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.EncryptionAlgorithm">
            <summary>
            Specifies the algorithm to use to encrypt archive items.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.OpenCorruptedArchives">
            <summary>
            Specifies whether the corrupted archives can be opened.
            </summary>
            <remarks>
            OpenCorruptedArchives specifies whether to allow opening corrupted archives.
            <para>When this property is <b>false</b>, an <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestLastVolume"/> event will be triggered when corrupted archive is being opened, otherwise the corrupted archive is opened.</para>
            </remarks>
            
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.ExtractCorruptedFiles">
            <summary>
            Specifies whether the partially corrupted files can be extracted from damaged archive. 
            </summary>
            <remarks>
            ExtractCorruptedFiles specifies whether to allow extracting partially corrupted files from damaged archive file. When this property is <b>false</b>, an exception is raised when corrupted file is being extracted, otherwise the file is extracted without error messages. 
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.CompressionMethod">
            <summary>
            Specifies the compression algorithm to use to compress archive items.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.CompressionLevel">
            <summary>
            Specifies the compression level used for archive updating (None, Fastest, Normal, Max).
            </summary>
            <remarks>
            This property determines compression level for adding, moving or updating files. If you need only to store files, set CompressionLevel to None. 
            <para>Set CompressionLevel to desired value before adding, moving or updating files.</para>
            <para> The CompressionLevel and <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.CompressionMode"/> properties influence each other. Setting one automatically determines value for the other.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.CompressionMode">
            <summary>
            Specifies the compression level used for archive updating (from 0 to 9).
            </summary>
            <remarks>
            This property determines compression level for <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles">adding</see>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles">moving</see> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles">updating</see> files. The correct values are integer numbers in range 0-9. Maximum value of CompressionMode corresponds to slow compression and best compression rate. The zero value means that files will not be compressed. If you need only to store files, set CompressionMode to 0. 
            <para>Set CompressionMode to desired value before adding, moving or updating files.</para>
            <para>The CompressionMode and <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.CompressionLevel"/> properties influence each other. Setting one automatically determines value for the other. Use CompressionMode for finer control of compression level.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.Password">
            <summary>
            Specifies the password for files stored within the archive.
            </summary>
            <remarks>
            Set this property before <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles">adding</see>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles">moving</see>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles">updating</see>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles">extracting</see> or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles">testing</see> encrypted files.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.TempDir">
            <summary>
            Specifies a temporary directory to use during archiving operations.
            </summary>
            <remarks>
            TempDir is used by ZipForge to store temporary files created by archive updating operations or <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/> method.
            <para>If this property is the empty string, the system's temporary directory will be used.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningMode">
            <summary>
            Describes how the archive file will be stored on disk.
            </summary>
            <remarks>
            SpanningMode determines how the archive file will be stored on disk: as a single file, as multiple files or it will be stored on  removable disks. <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningOptions"/> property determines how the archive file will be splitted or spanned.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningOptions">
            <summary>
            Specifies how the archive file will be splitted or spanned.
            </summary>
            <remarks>
            SpanningOptions property determines how the archive file will be splitted or spanned.
            </remarks>          
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.SFXStub">
            <summary>
            Specifies the file name of the executable stub.
            </summary>
            <remarks>
            Use SFXStub to specify the executable stub before creating self-extracting (SFX) archive by OpenArchive(FileMode.Create) or by calling <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.MakeSFX(System.String)"/>. If SFXStub is not set or set to not existing file when the <see cref="M:ComponentAce.Compression.Archiver.BaseArchiver.MakeSFX(System.String)"/> method is called, then an exception will be raised.
            <para>If you need to create multi-disk spanned or splitted self-extractable archive you should set SFXStub and call <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.OpenArchive(System.IO.FileMode)"/> with Create mode. Do not use MakeSFX for spanned or splitted archives.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.BaseArchiver.NoCompressionMasks">
            <summary>
            Specifies masks for files that will be stored without compression.
            </summary>
            <remarks>
            NoCompressionMasks are used for overloaded versions without parameters of <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.TestFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.MoveFiles"/>, <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.UpdateFiles"/> and <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.DeleteFiles"/> methods to store certain files without compression. This property should contain list of excluded directories and file names including wildcard characters. For example, "C:\\TEST\\*.*" specifies all files in the 'C:\TEST' directory.
            <para><see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.FileMasks"/> property specifies files that should be included into the operation, excluding files specified by <see cref="P:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExclusionMasks"/>.</para>
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.BaseArchiver.OnExtractFile">
            <summary>
            Occurs when file is being extracted from archive.
            </summary>
            <remarks>
            Write an OnExtractFile event handler to override default file name 
            or change its attributes before extracting.
            The event is called when <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.ExtractFiles"/> is called.
            </remarks>
        </member>
        <member name="E:ComponentAce.Compression.Archiver.BaseArchiver.OnStoreFile">
            <summary>
            Occurs when file is being stored into the archive.
            </summary>
            <remarks>
            Write an OnStoreFile event handler to override default file name or 
            change its attributes before storing this file into the archive. 
            The event is fired when <see cref="M:ComponentAce.Compression.Archiver.ArchiverForgeBase.AddFiles"/> is called.
            </remarks>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver.OnPasswordDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnPassword"/> event.</summary>
            <param name="sender">The Sender is the object whose event handler is called.</param>
            <param name="fileName">Indicates current file name.</param>
            <param name="newPassword">NewPassword determines new password that will be used for extracting or testing of the encrypted file.</param>
            <param name="skipFile">SkipFile determines if file will be skipped. Set SkipFile to <b>true</b> if you want to skip this file. Default value for SkipFile is <b>false</b>.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestBlankVolumeDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestBlankVolume"/> event.</summary>
            <param name="sender">The Sender is the object whose event handler is called.</param>
            <param name="volumeNumber">Specifies a number of the volume that should be inserted.</param>
            <param name="volumeFileName">Specifies default file name for this volume. You can override default file name.</param>
            <param name="cancel">Use cancel parameter to abort current operation.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestFirstVolumeDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestFirstVolume"/> event.</summary>
            <param name="sender">The Sender is the object whose event handler is called.</param>
            <param name="volumeFileName">Specifies default file name for this volume. You can override default file name.</param>
            <param name="cancel">Use cancel parameter to abort current operation.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestLastVolumeDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestLastVolume"/> event.</summary>
            <param name="sender">The Sender is the object whose event handler is called.</param>
            <param name="volumeFileName">Specifies default file name for this volume. You can override default file name.</param>
            <param name="cancel">Use cancel parameter to abort current operation.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestMiddleVolumeDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestMiddleVolume"/> event.</summary>
            <param name="sender">The Sender is the object whose event handler is called.</param>
            <param name="volumeNumber">Specifies a number of the volume that should be inserted.</param>
            <param name="volumeFileName">Specifies default file name for this volume. You can override default file name.</param>
            <param name="cancel">Use cancel parameter to abort current operation.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver.OnDiskFullDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnDiskFull"/> event.</summary>
            <param name="sender">The Sender is the object whose event handler is called.</param>
            <param name="volumeNumber">Specifies a number of the volume.</param>
            <param name="volumeFileName">Specifies default file name for this volume. You can override default file name.</param>
            <param name="cancel">Use cancel parameter to abort current operation.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver.OnProcessVolumeFailureDelegate">
            <summary>The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnProcessVolumeFailure"/> event.</summary>
            <param name="sender">The Sender is the object whose event handler is called.</param>
            <param name="operation">Indicates current archive operation.</param>
            <param name="volumeNumber">Specifies a number of the volume.</param>
            <param name="volumeFileName">Specifies default file name for this volume. You can override default file name.</param>
            <param name="cancel">Use cancel parameter to abort current operation.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver.OnExtractFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnExtractFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="item">Specifies the archive item being extracted from the archive.</param>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.BaseArchiver.OnStoreFileDelegate">
            <summary>
            The delegate to handle the <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnStoreFile"/> event.
            </summary>
            <param name="sender">The object whose event handler is being called.</param>
            <param name="item">Specifies the archive item being added to the archive.</param>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.Compression">
            <summary>
            Compression Class.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.DirItem">
            <summary>
            Encapsulates each item in a ZIP-file (CentralDir + Name + Comments)
            </summary>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:22
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.CentralDirSize">
            <summary>
            Size of the central directory in bytes.
            </summary>
            <returns>Central directory size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.LocalHeaderSize">
             <summary>
            Size of the local header in bytes.
             </summary>
             <returns>Local header size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForge.DirItem"/> class.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForge.DirItem"/> class.
            </summary>
            <param name="name">Name for the item.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.Clone">
            <summary>
            Returns a copy of the object
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.IsCorrupted(System.UInt32,ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform)">
            <summary>
            Determines whether the item is corrupted.
            </summary>
            <param name="crc32">The CRC32.</param>
            <param name="crypter">The crypter.</param>
            <returns>
            	<c>true</c> if the specified CRC32 is corrupted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.CopyFrom(ComponentAce.Compression.Archiver.BaseArchiveItem)">
            <summary>
            Copies from archive item.
            </summary>
            <param name="archiveItem">The archive item copy from.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.IsDirectory">
            <summary>
            Determines whether this instance is directory.
            </summary>
            <returns>
            	<c>true</c> if this instance is directory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.GetArchiveItem(ComponentAce.Compression.Archiver.BaseArchiveItem@)">
            <summary>
            Gets the archive item.
            </summary>
            <param name="baseArchiveItem">The archive item.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.CopyFrom(ComponentAce.Compression.Archiver.BaseArchiveItem,System.Boolean)">
            <summary>
            Copies attributes from the ArchiveItem.
            </summary>
            <param name="baseArchiveItem">The archiver item.</param>
            <param name="storeNTFSdates">if set to <c>true</c> stores NTFS dates.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.GetLocalHeader">
            <summary>
            Gets the ZipFileHeader object, representing the local header for the current item.
            </summary>
            <returns>Items local header object.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.GetLocalHeaderSize">
            <summary>
            Gets the size of the local header in bytes.
            </summary>
            <returns>Size of the local header.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.WriteLocalHeaderToStream(System.IO.Stream,System.Int32)">
            <summary>
            Writes the local header to stream.
            </summary>
            <param name="stream">The stream write local header to.</param>
            <param name="offset">Zero-based start position in local header bytes.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.CheckLocalHeaderItem(ComponentAce.Compression.ZipForge.ZipFileHeader,System.String)">
            <summary>
            Checks whether the local header item equals to current item.
            </summary>
            <param name="header">The local header.</param>
            <param name="name">The name of the item.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.LoadDataDescriptor(System.IO.Stream,System.Int64)">
            <summary>
            Loads the current item data descriptor from the stream
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.SaveDataDescriptor(System.IO.Stream,System.Int64)">
            <summary>
            Saves the current item data descriptor to the stream
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.LoadExtraFieldsFromStream(System.IO.Stream,System.UInt16)">
            <summary>
            Forces the directory item to read its extra fields from the stream
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.FireLocalHeaderExtraFieldsNeededEvent">
            <summary>
            Fires the local header extra fields needed event.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.LoadLocalHeaderExtraFieldsFromStream(System.IO.Stream,System.UInt16)">
            <summary>
            Reads extra fields from item local header.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.GetDataOffset">
            <summary>
            Returns an offset of the compressed file data relative to the item local header position
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.LoadCentralDirFromByteArray(System.Byte[],System.UInt32)">
            <summary>
            Loads the central directory from byte array.
            </summary>
            <param name="source">The source bytes array.</param>
            <param name="offset">The offset in bytes array.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.LoadLocalHeaderFromByteArray(System.Byte[],System.UInt32)">
            <summary>
            Loads the local header from byte array.
            </summary>
            <param name="source">The source bytes array.</param>
            <param name="offset">The offset in bytes array.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.LoadLocalHeaderFromStream(System.IO.Stream,System.Int32)">
            <summary>
            Loads the local header from stream.
            </summary>
            <param name="stream">The stream contains local header data.</param>
            <param name="offset">The offset in the stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.GetCentralDirBytes">
            <summary>
            Gets the central directory bytes.
            </summary>
            <returns>Bytes of the central directory.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.IsGeneralPurposeFlagBitSet(System.Int32)">
            <summary>
            Determines whether general purpose flag bit is set for the the specified bit index.
            </summary>
            <param name="bitIndex">Index of the bit.</param>
            <returns>
            	<c>true</c> if general purpose flag bit is set for the the specified bit index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.SetGeneralPurposeFlagBit(System.Int32)">
            <summary>
            Sets the general purpose flag bit.
            </summary>
            <param name="bitIndex">Index of the bit.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItem.GetExtraFieldsLength(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Gets/Sets the extraLength value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.OldName">
            <summary>
            Gets the old name.
            </summary>
            <value>The old name.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.ExtraFields">
            <summary>
            Gets the ExtraFieldsDataBlock for the current directory item
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.Name">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The items name.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.RelativeCentralDirectoryOffset">
            <summary>
            Gets or sets the relative central directory offset.
            </summary>
            <value>The relative central directory offset.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.NeedDestroyStream">
            <summary>
            If we need to destroy stream
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.StreamPosition">
            <summary>
            Gets/Sets starting position of the diritem in this stream
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.SrcFileName">
            <summary>
            Gets/Sets the source file name used to add/move/update
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.Password">
            <summary>
            Gets/Sets password for encrypting/decrypting directory item
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.CompressionMode">
            <summary>
            Gets/Sets the compression mode used for this item
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.IsTagged">
            <summary>
            Is the current directory item was tagged for group operations
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.Operation">
            <summary>
            Gets/Sets the operation that should be applied to the current directory item
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.Stream">
            <summary>
            Get/Sets source data stream (when there is no file)
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.IsModified">
            <summary>
            If the item was updated or added (that is modified)
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.IsHugeFile">
            <summary>
            If the Zip64 format is used to store this directory item
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.Comment">
            <summary>
            Gets/Sets directory item comment
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.EncryptionAlgorithm">
            <summary>
            Gets/Sets the encryption algorithm used to encrypt this directory item
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.Signature">
            <summary>
            Gets/Sets the signature value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.VersionMadeBy">
            <summary>
            Gets/Sets the versionMadeBy value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.ExtractVersion">
            <summary>
            Gets/Sets the extractVersion value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.GeneralPurposeFlag">
            <summary>
            Gets/Sets the getPurposeFlag value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.ActualCompressionMethod">
            <summary>
            Gets/Sets the actual compression method (if AES is used the compressionMethod field contains special value)
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.CompressionMethod">
            <summary>
            Gets/Sets the compressionMethod value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.LastModificationTime">
            <summary>
            Gets/Sets the lastModTime value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.LastModificationDate">
            <summary>
            Gets/Sets the lastModDate value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.CRC32">
            <summary>
            Gets/Sets the Crc32 value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.CompressedSize">
            <summary>
            Gets/Sets the compSize value for the Central directory object if the value is less than 0xFFFFFFFF and from the Zip64ExtraField otherwise
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.UncompressedSize">
            <summary>
            Gets/Sets the uncompSize value for the Central directory object if the value is less than 0xFFFFFFFF and from the Zip64ExtraField otherwise
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.LastFileModificationTime">
            <summary>
            Gets/Sets the last modification time value for the Central directory object
            </summary>
            <value></value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.NameLength">
            <summary>
            Gets/Sets the nameLength value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.DataDescriptor">
            <summary>
            Gets/Sets the dataDescriptor block for the item
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.ExtraFieldsLenRead">
            <summary>
            Gets or sets number of bytes need to read for extra fields.
            </summary>
            <value>The extra fields length to read.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:47
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.CommentLengthToRead">
            <summary>
            Gets or sets number of bytes need to read for the comment.
            </summary>
            <value>The comment length to read.</value>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 18.05.2010  12:47
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.NameLengthToRead">
            <summary>
            Gets or sets number of bytes need to read for the name.
            </summary>
            <value>The name length to read.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.CommentLength">
            <summary>
            Gets/Sets the commentLength value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.DiskStartNumber">
            <summary>
            Gets/Sets the diskNumberStart value for the Central directory object if the value is less than oxFFFF or from the Zip64ExtrField otherwise
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.InternalAttributes">
            <summary>
            Gets/Sets the internalAttr value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.ExternalAttributes">
            <summary>
            Gets/Sets the externalAttr value for the Central directory object
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItem.RelativeLocalHeaderOffset">
            <summary>
            Gets/Sets the relOffsetLH value for the Central directory object if the value is less than 0xFFFFFFFF or from the Zip64Extra Field otherwise
            </summary>
        </member>
        <member name="E:ComponentAce.Compression.ZipForge.DirItem.ItemNameChanged">
            <summary>
            The event is fired when the items name is changed.
            </summary>
        </member>
        <member name="E:ComponentAce.Compression.ZipForge.DirItem.LocalHeaderExtraFieldsNeeded">
            <summary>
            The event is fired when we need to read extra fields from item local header. This is needed since the local header and central directory records can have different sets and sizes of extra fields.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.DirManager">
            <summary>
            Directory items handler class.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.DirManager.Zip64ExtraFieldHeaderId">
            <summary>
            Returns id for the zip64 extra field (0x0001).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.DirManager.UnicodeExtraFieldHeaderId">
            <summary>
            Returns id for the Unicode extra field (0x554e).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.DirManager.OemCodePage">
            <summary>
            Code page number uses to encode and decode string values.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.DirManager.ArchiveComment">
            <summary>
            Comments to the archive file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.DirManager.Zip64CentralDirEndLocator">
            <summary>
            Zip64 end locater.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.DirManager.Zip64CentralDirEnd">
            <summary>
            End of the zip64 version of the central directory.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.DirManager.CentralDirEnd">
            <summary>
            End of the central directory.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.DirManager.StubSize">
            <summary>
            Size of the stub.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.DirManager.FZip64">
            <summary>
            Determines whether to use zip64 mode.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.#ctor(System.IO.Stream,System.Boolean,ComponentAce.Compression.Archiver.BaseArchiver)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForge.DirManager"/> class.
            </summary>
            <param name="stream">The compressed stream.</param>
            <param name="bCreate">If set to <c>true</c> set volumeNumber to 0 and save sfxStub.</param>
            <param name="arc">The arc.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.IsEncrypted">
            <summary>
            Determines whether this instance is encrypted.
            </summary>
            <returns>
            	<c>true</c> if this instance is encrypted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.LoadItemsArray">
            <summary>
            Load central directory
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.SaveItemsArray">
            <summary>
            Saves the items array.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.SaveItemsArray(System.IO.Stream)">
            <summary>
            Saves the items array to the <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream that will be used to save items array.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.SaveDir(System.Boolean)">
            <summary>
            Saves the central directory.
            </summary>
            <param name="recreateCDirEnd">If set to <c>true</c> central directory end will be recreated.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.SaveDir(System.Boolean,System.IO.Stream)">
            <summary>
            Saves the central directory.
            </summary>
            <param name="recreateCDirEnd">If set to <c>true</c> central directory end will be recreated.</param>
            <param name="stream">The stream save to.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.ApplyStubOffset">
            <summary>
            Adds stub offset to relative offsets.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.HasCentralDirEnd">
            <summary>
            Determines whether stream has central dir end.
            </summary>
            <returns>
            	<c>true</c> if stream has central dir end; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirManager.IsSFXArchive">
            <summary>
            Determines whether SFX stub exists.
            </summary>
            <returns>
            	<c>true</c> if SFX stub exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirManager.ItemsArrayBackup">
            <summary>
            Gets or sets backup of the items array.
            </summary>
            <value>The items array backup.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirManager.ItemsArray">
            <summary>
            Gets or sets the items array.
            </summary>
            <value>The items array.</value>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.Encryption.CryptoTransformMode">
            <summary>
            The enumeration used to define crypto transform mode (encryption||decryption)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.Encryption.CryptoTransformMode.Encryption">
            <summary>
            Encryption.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.Encryption.CryptoTransformMode.Decryption">
            <summary>
            Decryption.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.Encryption.PBKDF2">
            <summary>
            Password Based Key Derivation Function 2
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.PBKDF2.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor takes three parameters: password, the size of the salt value and the number of iterations
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.PBKDF2.#ctor(System.String,System.Byte[],System.Int32)">
            <summary>
            Constructor takes three parameters: password, the salt value and the number of iterations
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.PBKDF2.Int(System.UInt32)">
            <summary>
            Converts the uint value to an array of bytes
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.PBKDF2.GetKeyBytes(System.Int32)">
            <summary>
            Generate a key based on the password
            </summary>
            <param name="cb">The length of the key to be generated</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.PBKDF2.Reset">
            <summary>
            Resets the generator
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Encryption.PBKDF2.IterationCount">
            <summary>
            The number of iterations to perform in order to derive a key
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Encryption.PBKDF2.Salt">
            <summary>
            The salt value
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform">
            <summary>
            Abstract base class which should be overiding by classes implementing crypting algorithms in zip archives
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.GenerateKey(System.String)">
            <summary>
            Generates the key.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.CheckPassword(System.String,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Checks the password.
            </summary>
            <param name="password">The password.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.GetKey">
            <summary>
            Gets the key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.GetPassword">
            <summary>
            Gets the password.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.Initialize(ComponentAce.Compression.ZipForge.Encryption.CryptoTransformMode,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Initializes the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.EncryptBuffer(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the buffer.
            </summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputCount">The input count.</param>
            <param name="outputBuffer">The output buffer.</param>
            <param name="outputOffset">The output offset.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.DecryptBuffer(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the buffer.
            </summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputCount">The input count.</param>
            <param name="outputBuffer">The output buffer.</param>
            <param name="outputOffset">The output offset.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.GetFileStorageStartBlock">
            <summary>
            Gets the file storage start block.
            </summary>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.LoadFileStorageStartBlock(System.IO.Stream,System.Int64)">
            <summary>
            Loads the file storage start block.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.GetFileStorageStartBlockSize">
            <summary>
            Gets the size of the file storage start block.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.GetFileStorageEndBlock">
            <summary>
            Gets the file storage end block.
            </summary>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.LoadFileStorageEndBlock(System.IO.Stream,System.Int64)">
            <summary>
            Loads the file storage end block.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.GetFileStorageEndBlockSize">
            <summary>
            Gets the size of the file storage end block.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.IsDirItemCorrupted(ComponentAce.Compression.ZipForge.DirItem,System.UInt32)">
            <summary>
            Determines whether the specified item is corrupted.
            </summary>
            <param name="item">The item.</param>
            <param name="crc32">The CRC32.</param>
            <returns>
            	<c>true</c> if the specified item is corrupted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.GetExtraFieldData">
            <summary>
            Gets the extra field data for the encryption algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.Password">
            <summary>
            Gets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Encryption.BaseZipForgeCryptoTransform.TransformMode">
            <summary>
            Gets the value of the crypto transform mode
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.Encryption.PkzipClassicCryptoTransform">
            <summary>
            Class implementing PkzipClassic cryptographic algorithm
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.PkzipClassicCryptoTransform.GenerateKey(System.String)">
            <summary>
            Derives key from the password and generates KeyHeader
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Encryption.PkzipClassicCryptoTransform.ZipEncryptByte(System.Byte)">
            <summary>
            Encrypts one byte
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.Encryption.AESCryptoTransform">
            <summary>
            AES encryption
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.CompressionLevel">
            <summary>
            Specifies the compression level used for archive updating.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.CompressionLevel.None">
            <summary>
            There is no compression.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.CompressionLevel.Fastest">
            <summary>
            The fastest compression level and low compression rate.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.CompressionLevel.Normal">
            <summary>
            Normal compression level. Slower compression and better compression rate than Fastest.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.CompressionLevel.Max">
            <summary>
            Slow compression and maximum compression rate.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.CompressionMethod">
            <summary>
            Specifies available compression algorithms.
            </summary>
            <remarks>
            <para><b>Attention:</b> Bzip2 and Ppmd compression algorithms are available only in Zipforge.NET Professional edition.</para>
            </remarks>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.CompressionMethod.None">
            <summary>No compression.</summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.CompressionMethod.Deflate">
            <summary>
            Deflate compression algorithm (see <a target="_blank" href="http://en.wikipedia.org/wiki/DEFLATE">Wikipedia article</a> about it).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.CompressionMethod.BZIP2">
            <summary>
            (Professional edition only) Bzip2 compression algorithm (see <a target="_blank" href="http://en.wikipedia.org/wiki/Bzip2">Wikipedia article</a> about it).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.CompressionMethod.PPMd">
            <summary>
            (Professional edition only) Ppmd compression algorithm (see <a target="_blank" href="http://en.wikipedia.org/wiki/Prediction_by_Partial_Matching">general description</a>,
            and <a target="_blank" href="http://www.compression.ru/ds/">Ppmd library home page (russian)</a>.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.CompressionMethods">
            <summary>
            This class contains available compression algorithms to specify in directory item or local header
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.DirItemDataDescriptor">
            <summary>
            Represents data descriptor block which is present after file data if the bit-3 of the general purpose bit flags is set.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.#ctor(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForge.DirItemDataDescriptor"/> class.
            </summary>
            <param name="crc32">The CRC32.</param>
            <param name="compressedSize">Compressed size.</param>
            <param name="uncompressedSize">Uncompressed size.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.#ctor(System.UInt32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForge.DirItemDataDescriptor"/> class.
            </summary>
            <param name="crc32">The CRC32.</param>
            <param name="compressedSize">Compressed item size.</param>
            <param name="uncompressedSize">Uncompressed item size.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.#ctor(System.UInt32,System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForge.DirItemDataDescriptor"/> class.
            </summary>
            <param name="crc32">The CRC32.</param>
            <param name="compressedSize">Compressed item size.</param>
            <param name="uncompressedSize">Uncompressed item size.</param>
            <param name="isZip64">if set to <c>true</c> use zip64 for data descriptor.</param>
            <param name="includeSignature">if set to <c>true</c> includes signature.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.LoadFromStream(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            Loads data descriptor from the stream.
            </summary>
            <param name="stream">The stream contains data of the data descriptor.</param>
            <param name="offset">The offset in the <paramref name="stream"/> where data descriptor begins.</param>
            <param name="isZip64">if set to <c>true</c> data descriptor uses zip64.</param>
            <returns>Data descriptor.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.WriteToStream(System.IO.Stream,System.Int64)">
            <summary>
            Writes to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.GetSize">
            <summary>
            Gets the size of the current data descriptor.
            </summary>
            <returns>Data descriptor size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.IsZip64">
            <summary>
            Gets or sets a value indicating whether this instance is zip64.
            </summary>
            <value><c>true</c> if this instance is zip64; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.CRC32">
            <summary>
            Gets or sets the CRC32 value.
            </summary>
            <value>The CRC32 value.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.CompressedSize">
            <summary>
            Gets or sets the compressed size.
            </summary>
            <value>Compressed size.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.UncompressedSize">
            <summary>
            Gets or sets the uncompressed size.
            </summary>
            <value>Uncompressed size.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.DirItemDataDescriptor.Signature">
            <summary>
            Gets the signature.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.EncryptionAlgorithm">
            <summary>
            Specifies encryption algorithms which can be used to encrypt/decrypt archives.
            </summary>
            <remarks>
            <para>Attention: <a target="_blank" href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Strong AES Encryption</a> 
            is available only in ZipForge.NET Professional edition.</para>
            </remarks>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.EncryptionAlgorithm.Aes128">
            <summary>
            (Professional edition only) Strong AES Encryption with 128-bit keys.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.EncryptionAlgorithm.Aes192">
            <summary>
            (Professional edition only) Strong AES Encryption with 192-bit keys.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.EncryptionAlgorithm.Aes256">
            <summary>
            (Professional edition only) Strong AES Encryption with 256-bit keys.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.EncryptionAlgorithm.None">
            <summary>
            No encryption
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Standard PKZIP encryption, considered weak by today's standards.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.EncryptionAlgorithm.Unknown">
            <summary>
            Encryption algorithm is not defined.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.ExtraFieldIDs">
            <summary>
            Some IDs of the zip files extra fields 
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.ExtraFieldsTarget">
            <summary>
            A number of values to indicate where we want to store/read extra fields: local header or central directory. The value is needed for Zip64ExtraField since the header contains only 2 of 4 fields
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ExtraFieldsTarget.LocalHeaderExtraFields">
            <summary>
            Extra fields for local header.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ExtraFieldsTarget.CentralDirectoryExtraFields">
            <summary>
            Extra fields for central directory.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.ExtraFieldData">
            <summary>
            Represents an extra field record
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ExtraFieldData.HeaderId">
            <summary>
            Type of data in block.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ExtraFieldData.DataSize">
            <summary>
            Size in bytes.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ExtraFieldData.Data">
            <summary>
            Extra field data.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ExtraFieldData.LocalHeaderExtraFieldsLength">
            <summary>
            Length of the local header for extra fields.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.#ctor(System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForge.ExtraFieldData"/> class.
            </summary>
            <param name="id">The type of data in block.</param>
            <param name="dataSize">Size of the data.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.LoadFromStream(System.UInt16,System.IO.Stream,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Static method which creates an ExtraFieldData object using the data read from the source stream.
            </summary>
            <param name="extraFieldId">The extra field id.</param>
            <param name="source">The source.</param>
            <param name="item">Target directory item.</param>
            <returns>Extra fields data.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.SetLocalHeaderExtraFieldSize(System.Int32)">
            <summary>
            Sets the size of the local header extra field.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.ResetLocalHeaderExtraFieldSize">
            <summary>
            Resets the size of the local header extra field.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.GetBytes(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Gets the bytes of extra fields.
            </summary>
            <param name="target">The target of extra fields.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.WriteToStream(System.IO.Stream,System.Int64,ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Writes to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.GetExtraFieldSize(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Gets the size of the extra field.
            </summary>
            <param name="target">The target.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.GetExtraFieldId">
            <summary>
            Gets the extra field ID.
            </summary>
            <returns>Extra field id.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.GetDataSize(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Gets the size of the data.
            </summary>
            <param name="target">The target.</param>
            <returns>Extra field data size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.GetData(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Gets the extra field data.
            </summary>
            <param name="target">The target.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.UnicodeExtraFieldData">
            <summary>
            Represents Xceed unicode file name extra field record
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.UnicodeExtraFieldData.FileName">
            <summary>
            Gets/Sets the value of the unicode file name
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.UnicodeExtraFieldData.FileNameLength">
            <summary>
            Gets the length of the filename
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData">
            <summary>
            Represents the zip64 extra fields record
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.FieldId">
            <summary>
            Zip 64 extra field ID
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData._uncompSize">
            <summary>
            Uncompressed file size
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData._compSize">
            <summary>
            Compressed file size
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData._relOffsetLh">
            <summary>
            Local header offset
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData._diskNumberStart">
            <summary>
            start disk number
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.#ctor(System.Int64,System.Int64,System.Int64,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData"/> class.
            </summary>
            <param name="uncompSize">Uncompressed size.</param>
            <param name="compSize">Compressed size.</param>
            <param name="localHeaderOffset">The local header offset.</param>
            <param name="diskNumberStart">The disk number start.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData"/> class.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.LoadFromStream(System.IO.Stream,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            The static method creates a new Zip64ExtraFieldData using the data read from the source stream
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.GetExtraFieldSize(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Gets the size of the extra field.
            </summary>
            <param name="target">The target.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.GetBytes(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Gets the bytes of extra fields.
            </summary>
            <param name="target">The target of extra fields.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.GetData(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Gets the extra field data.
            </summary>
            <param name="target">The target.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.GetDataSize(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Gets the size of the data.
            </summary>
            <param name="target">The target.</param>
            <returns>Extra field data size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.WriteToStream(System.IO.Stream,System.Int64,ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Writes to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.UpdateBaseClassFields">
            <summary>
            Updates fields of the base class
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.GetFieldDataSize(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Returns the value of the dataSize for the Zip64 extra field
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.GetFieldData(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            returns a byte array of the current extra field data
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.UncompressedFileSize">
            <summary>
            Gets/Sets the uncompressed file size value
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.CompressedFileSize">
            <summary>
            Gets/Sets the compressed file size value
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.LocalHeaderOffset">
            <summary>
            Gets/Sets the offset of the file local header
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64ExtraFieldData.StartDiskNumber">
            <summary>
            Gets/Sets the start disk number
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.AESExtraFieldData">
            <summary>
            Represents AES encryption extra fields
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.AESExtraFieldData.VersionNumber">
            <summary>
            Gets/Sets the value of the AES encryption version number
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.AESExtraFieldData.KeyLengthBits">
            <summary>
            Gets/Sets the value of AES encryption key length
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.AESExtraFieldData.CompressionMethod">
            <summary>
            Gets/Sets the value of the actual compression method
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock">
            <summary>
            Represents a block of extra fields records of the file in zip archive
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock._extraFieldsArray">
            <summary>
            A collection of extra fields
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.GetBytesLength(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Returns total length in bytes of extra fields block
            </summary>		
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.WriteToStream(System.IO.Stream,System.Int64,ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Writes the complete extra fields block to the source stream
            </summary>
            <param name="source">The stream to write to.</param>
            <param name="offset">The offset in the <paramref name="source"/> stream.</param>
            <param name="target">Specifies whether we write data for the local header or central dir</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.GetBytes(ComponentAce.Compression.ZipForge.ExtraFieldsTarget)">
            <summary>
            Returns a byte array of extra fields data
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.GetExtraFieldById(System.UInt16)">
            <summary>
            Returns extra field data block with specified header Id 
            </summary>
            <param name="headerId">Extra field header ID</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.AddExtraField(ComponentAce.Compression.ZipForge.ExtraFieldData,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Add the extraField extra fieldto the collection
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.RemoveExtraField(ComponentAce.Compression.ZipForge.ExtraFieldData)">
            <summary>
            Removes the given extra field from the collection
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.RemoveExtraFieldById(System.UInt16)">
            <summary>
            Removes an extra field with the given ID from the collection
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.GetExtraFieldsArray">
            <summary>
            Returns an array of extra fields
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.Clone">
            <summary>
            Implementation of the ICloneable interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.Reset">
            <summary>
            Clears the extra fields collection
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.LoadFromStream(System.IO.Stream,System.UInt16,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            This static method creates an array of extra fields by loading them from the stream and adds the array to the "item" directory item
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.LoadLocalHeaderExtraFieldsFromStream(System.IO.Stream,System.UInt16,ComponentAce.Compression.ZipForge.DirItem)">
            <summary>
            Loads the local header extra fields from stream.
            </summary>
            <param name="source">The source.</param>
            <param name="extraFieldsLength">Length of the extra fields.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.Count">
            <summary>
            Returns a number of extra field records in a collection
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.Item(System.Int32)">
            <summary>
            Indexer allows to get an extra field by its index
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ExtraFieldsDataBlock.Zip64ExtraField">
            <summary>
            Returns a reference to the Zip64 extra field if it exists or null 
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.SpanningMode">
            <summary>
            Specifies how the archive file will be stored on disk.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.SpanningMode.None">
            <summary>
            The archive will be stored as a single file.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.SpanningMode.Spanning">
            <summary>
            The archive file will be stored on removable disks.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.SpanningMode.Splitting">
            <summary>
            The archive will be stored as multiple  files.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.SpanningOptions">
            <summary>
            Describes how the archive file will be splitted or spanned.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.SpanningOptions.#ctor">
            <summary>
            Creates a new instance of the SpanningOptions class with default parameters.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Archiver.SpanningOptions.Assign(System.Object)">
            <summary>
            Allows to copy all options from another <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningOptions"/> object in one operation.
            </summary>
            <param name="source">The <see cref="T:ComponentAce.Compression.Archiver.SpanningOptions"/> object to copy settings from.</param>
            <remarks>
            <para>You have to use it because <see cref="P:ComponentAce.Compression.Archiver.BaseArchiver.SpanningOptions"/> property is readonly.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.SpanningOptions.AdvancedNaming">
            <summary>
            Determines how the archive volumes will be named. 
            </summary>
            <remarks>
            If AdvancedNaming is set to <b>true</b> then archive volumes will be named like archive_001.zip, archive_002.zip, ... ,archive_999.zip. 
                <para>If AdvancedNaming is set to <b>false</b> and SpanningMode is set to smSpanning then archive volumes will be named like archive.zip on each removable disk.</para>
            <para>If AdvancedNaming is set to <b>false</b> and SpanningMode is set to smSplitting then archive volumes will be named like archive.z01, archive.z02, ... , archive.z99.</para>
            <para>You can also specify custom name for each volume using <see cref="E:ComponentAce.Compression.Archiver.BaseArchiver.OnRequestBlankVolume"/> event handler.</para>
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.SpanningOptions.FirstVolumeSize">
            <summary>
            Specifies the size of first volume in bytes.
            </summary>
            <remarks>
            The FirstVolumeSize specifies the size of first volume, minimum blockSizeToDecompress is 64 Kb. If the FirstVolumeSize is set to 0 the blockSizeToDecompress of the first volume will be the same as other volumes and will be defined by <see cref="P:ComponentAce.Compression.Archiver.SpanningOptions.VolumeSize"/> value.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.SpanningOptions.VolumeSize">
            <summary>
            Specifies the size of the volumes for archive splitting or spanning. 
            </summary>
            <remarks>
            The VolumeSize specifies the size of the volumes for archive splitting or spanning. If the VolumeSize is set to Custom, then <see cref="P:ComponentAce.Compression.Archiver.SpanningOptions.CustomVolumeSize"/> will be used.
            </remarks>
        </member>
        <member name="P:ComponentAce.Compression.Archiver.SpanningOptions.CustomVolumeSize">
            <summary>
            Specifies the custom blockSizeToDecompress of the volumes for archive splitting or spanning.
            </summary>
            <remarks>
            The CustomVolumeSize specifies the custom blockSizeToDecompress of the volumes for archive splitting or spanning. This parameter can be used only when <see cref="P:ComponentAce.Compression.Archiver.SpanningOptions.VolumeSize"/> is set to Custom.
            </remarks>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.VolumeSize">
            <summary>
            Specifies the size of the multi-spanning archive volumes.
            </summary>
            <remarks>
            VolumeSize value specifies the size of each multi-disk archive volume. 
            Set <see cref="T:ComponentAce.Compression.Archiver.SpanningOptions"/>.VolumeSize to AutoDetect for automatic detection of the volume size (default value). 
            You can also use Custom value and specify the volume size by setting SpanningOptions.CustomVolumeSize.
            </remarks>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.VolumeSize.AutoDetect">
            <summary>
            Autodetect of the volume size.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.VolumeSize.Custom">
            <summary>
            Custom volume size.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.VolumeSize.Disk1_44MB">
            <summary>
            Volume size is 1.44 Mb (3.5" floppy disk).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.VolumeSize.Disk100MB">
            <summary>
            Volume size is 100 Mb (IOMEGA disk).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.VolumeSize.Disk200MB">
            <summary>
            Volume size is 200 Mb (MO disk).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.VolumeSize.Disk600MB">
            <summary>
            Volume size is 600 Mb (MO disk).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.VolumeSize.Disk650MB">
            <summary>
            Volume size is 650 Mb (74 Min. compact disk).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.VolumeSize.Disk700MB">
            <summary>
            Volume size is 700 Mb (80 Min. compact disk).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.VolumeSize.Disk4700MB">
            <summary>
            Volume size is 4700 Mb (DVD disk). 
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd">
            <summary>
            Zip64 end of the central directory record
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.SizeOf">
            <summary>
            Size of current zip64 end of central directory.
            </summary>
            <returns>Current size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.GetBytes">
            <summary>
            Gets the bytes of current zip64 end of central directory.
            </summary>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.LoadFromByteArray(System.Byte[],System.UInt32)">
            <summary>
            Loads current zip64 end of central directory from byte array.
            </summary>
            <param name="source">The source byte array.</param>
            <param name="offset">The offset in <paramref name="source"/>.</param>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.CentralDirEndSize">
            <summary>
            Gets or sets the end size of the central directory.
            </summary>
            <value>The end size of the central directory.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.VersionMadeBy">
            <summary>
            Gets or sets the version made by.
            </summary>
            <value>The version made by.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.VersionNeededToExtract">
            <summary>
            Gets or sets the version needed to extract.
            </summary>
            <value>The version needed to extract.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.DiskNumber">
            <summary>
            Gets or sets the disk number where current zip64 central directory end would be stored.
            </summary>
            <value>The disk number.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.StartDiskNumber">
            <summary>
            Gets or sets the disk number where the first zip64 central directory end stored.
            </summary>
            <value>The start disk number.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.EntriesOnDisk">
            <summary>
            Gets or sets the number of entries on disk.
            </summary>
            <value>The number of entries on disk.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.EntriesCentralDir">
            <summary>
            Gets or sets the entries central directory.
            </summary>
            <value>The entries central directory.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.CentralDirSize">
            <summary>
            Gets or sets the size of the central directory.
            </summary>
            <value>The size of the central directory.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEnd.OffsetStartDir">
            <summary>
            Gets or sets the offset start directory.
            </summary>
            <value>The offset start directory.</value>
        </member>
        <member name="T:ComponentAce.Compression.Archiver.Zip64Mode">
             <summary>
             Specifies a zip file format. 
             </summary>
             <remarks>
             Use Zip64Mode for creating Zip64 archives. Thus you can create archive files > 4Gb and add files > 4 Gb to the archive. 
             Set Zip64Mode to zmAlways to add files in Zip64 format. Use zmAuto for auto-detection of the archive format depending on sizes of the files being added. zmDisabled is a default value for creating archives in normal Zip format, compatible with most of archivers.
            <para>Zip64 format is not supported by some archivers. ZipForge uses the same format as PKZip. Nevertheless we do not guarantee that it is compatible with other programs.</para>
            </remarks>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.Zip64Mode.Disabled">
            <summary>
            A default value for creating archives in normal Zip format.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.Zip64Mode.Auto">
            <summary>
            Auto-detection of the archive format depending on sizes of the files being added.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Archiver.Zip64Mode.Always">
            <summary>
            Always create archives in Zip64 format.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.ZipCentralDirEnd">
            <summary>
            Zip end of central directory record 
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.SizeOf">
            <summary>
            Size of current zip end of central directory.
            </summary>
            <returns>Current size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.GetBytes">
            <summary>
            Gets the bytes of current zip end of central directory.
            </summary>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.LoadFromByteArray(System.Byte[],System.UInt32)">
            <summary>
            Loads current zip end of central directory from byte array.
            </summary>
            <param name="source">The source byte array.</param>
            <param name="offset">The offset in <paramref name="source"/>.</param>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.DiskNumber">
            <summary>
            Gets or sets the disk number where current zip central directory end would be stored.
            </summary>
            <value>The disk number.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.StartDiskNumber">
            <summary>
            Gets or sets the disk number where the first zip central directory end stored.
            </summary>
            <value>The start disk number.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.EntriesOnDisk">
            <summary>
            Gets or sets the number of entries on disk.
            </summary>
            <value>The number of entries on disk.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.EntriesCentralDir">
            <summary>
            Gets or sets the entries central directory.
            </summary>
            <value>The entries central directory.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.CentralDirSize">
            <summary>
            Gets or sets the size of the central directory.
            </summary>
            <value>The size of the central directory.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.OffsetStartDir">
            <summary>
            Gets or sets the offset start directory.
            </summary>
            <value>The offset start directory.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipCentralDirEnd.CommentLength">
            <summary>
            Gets or sets the length of the comment.
            </summary>
            <value>The length of the comment.</value>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.Zip64CentralDirEndLocator">
            <summary>
            Zip64 end of central directory locator.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64CentralDirEndLocator.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64CentralDirEndLocator.SizeOf">
            <summary>
            Size of current zip64 end of central directory locator.
            </summary>
            <returns>Current size.</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64CentralDirEndLocator.LoadFromByteArray(System.Byte[],System.UInt32)">
            <summary>
            Loads current zip64 end of central directory locator from byte array.
            </summary>
            <param name="source">The source byte array.</param>
            <param name="offset">The offset in <paramref name="source"/>.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.Zip64CentralDirEndLocator.GetBytes">
            <summary>
            Gets bytes of current zip64 end of central directory locator.
            </summary>
            <returns>Bytes array</returns>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEndLocator.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEndLocator.StartDiskNumber">
            <summary>
            Gets or sets the disk number where the first zip64 end of central directory locator stored.
            </summary>
            <value>The start disk number.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEndLocator.OffsetStartDirEnd">
            <summary>
            Gets or sets the offset start directory.
            </summary>
            <value>The offset start directory.</value>
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.Zip64CentralDirEndLocator.TotalNumberOfDisks">
            <summary>
            Gets or sets the total number of disks.
            </summary>
            <value>The total number of disks.</value>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.ZipFileHeader">
            <summary>
            Local file header.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.signature">
            <summary>
            Signature.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.extractVersion">
            <summary>
            Extract version.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.genPurposeFlag">
            <summary>
            General purpose flag.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.compMethod">
            <summary>
            Compression method.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.lastModTime">
            <summary>
            Last modification time.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.lastModDate">
            <summary>
            Last modification date.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.crc32">
            <summary>
            Crc32 checksum of compressed data.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.compSize">
            <summary>
            Compressed size.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.uncompSize">
            <summary>
            Uncompressed size.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.nameLength">
            <summary>
            Length of the name.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.ZipForge.ZipFileHeader.extraLength">
            <summary>
            Length of the extra fields.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipFileHeader.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipFileHeader.SizeOf">
            <summary>
            Gets size of zip file header.
            </summary>
            <returns>30</returns>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipFileHeader.LoadFromByteArray(System.Byte[],System.UInt32)">
            <summary>
            Loads zip file header from byte array.
            </summary>
            <param name="source">The source bytes array.</param>
            <param name="offset">The offset in the <paramref name="source"/>.</param>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipFileHeader.GetBytes">
            <summary>
            Gets the bytes of the zip file header.
            </summary>
            <returns>Bytes array.</returns>
        </member>
        <member name="T:ComponentAce.Compression.ZipForge.ZipForge">
            <summary>
            Contains all the routines to work with ZIP-archives. 
            </summary>
            <remarks>
            Use ZipForge to create, open, close or update ZIP-archives. This component provides all the necessary 
            properties, methods and events for handling ZIP-files.
            </remarks>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipForge.SetCompMethod">
            <summary>
            Sets the compression method.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipForge.#ctor">
            <summary>
            Initializes a new instance of the <b>ZipForge</b> class with the default parameters.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipForge.AddNewItemToItemsHandler">
            <summary>
            Adds the new item to items handler.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.ZipForge.ZipForge.CreateNewArchiveItem">
            <summary>
            Creates the new archive item.
            </summary>
            <returns>New ArchiveItem instance.</returns>
            Author - Osintsev Dmitri (outsourcer Singularis Lab)
            Modification - 16.07.2010  16:48
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipForge.Zip64Mode">
            <summary>
            Specifies whether to use Zip64 format to create archives over 4GB. 
            </summary>
            <remarks>
            Use Zip64Mode for creating Zip64 archives. Thus you can create archive files > 4Gb and add files > 4 Gb to the archive. Set Zip64Mode to zmAlways to add files in Zip64 format. Use zmAuto for auto-detection of the archive format depending on sizes of the files being added. zmDisabled is a default value for creating archives in normal Zip format, compatible with most of archivers.
            <para>Zip64 format is not supported by some archivers. ZipForge.NET uses the same format as PKZip. Nevertheless we do not guarantee that it is compatible with other programs.</para> 
            </remarks> 
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipForge.UnicodeFilenames">
            <summary>
            Specifies whether unicode file names are saved in addition to filenames in standard OEM encoding.
            </summary>	    	    
        </member>
        <member name="P:ComponentAce.Compression.ZipForge.ZipForge.StoreNTFSTimeStamps">
            <summary>
            Specifies whether file modification, last access and creation times are saved.
            </summary>	    	    
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.Adler32">
            <summary>
            This class represents adler32 checksum algorithm
            </summary>
            <exclude />
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Adler32.GetAdler32Checksum(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            This static method returns adler32 checksum of the buffer data
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.Deflate">
            <summary>
            Implementation of the Deflate compression algorithm.
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.MAX_MEM_LEVEL">
            <summary>
            Maximum memory level
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.Z_DEFAULT_COMPRESSION">
            <summary>
            Defalult compression method
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.DEF_MEM_LEVEL">
            <summary>
            Default memory level
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.NeedMore">
            <summary>
            block not completed, need more input or more output
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.BlockDone">
            <summary>
            Block internalFlush performed
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.FinishStarted">
            <summary>
            Finish started, need only more output at next deflate
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.FinishDone">
            <summary>
            finish done, accept no more input or output
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.PRESET_DICT">
            <summary>
            preset dictionary flag in zlib header
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.Z_DEFLATED">
            <summary>
            The deflate compression method
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.Buf_size">
            <summary>
            The size of the buffer
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.REP_3_6">
            <summary>
            repeat previous bit length 3-6 times (2 bits of repeat count)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.REPZ_3_10">
            <summary>
            repeat a zero length 3-10 times  (3 bits of repeat count)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.REPZ_11_138">
            <summary>
            repeat a zero length 11-138 times  (7 bits of repeat count)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.config_table">
            <summary>
            Deflate class congiration table
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.strm">
            <summary>
            Pointer back to this zlib stream
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.status">
            <summary>
            As the name implies
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.pending_buf">
            <summary>
            Output still pending
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.pending_buf_size">
            <summary>
            Size of Pending_buf
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.pending_out">
            <summary>
            Next pending byte to output to the stream
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.pending">
            <summary>
            Number of bytes in the pending buffer
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.noheader">
            <summary>
            suppress zlib header and adler32
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.data_type">
            <summary>
            // UNKNOWN, BINARY or ASCII
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.method">
            <summary>
            STORED (for zip only) or DEFLATED
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.last_flush">
            <summary>
            Value of internalFlush parameter for previous deflate call
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.w_size">
            <summary>
            LZ77 Window size (32K by default)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.w_bits">
            <summary>
            log2(w_size)  (8..16)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.w_mask">
            <summary>
            w_size - 1
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.window">
            <summary>
            Sliding Window. Input bytes are ReadPos into the second half of the Window,
            and move to the first half later to keep a dictionary of at least wSize
            bytes. With this organization, matches are limited to a distance of
            wSize-MAX_MATCH bytes, but this ensures that IO is always
            performed with a length multiple of the block size. Also, it limits
            the Window size to 64K, which is quite useful on MSDOS.
            To do: use the user input buffer as sliding Window.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.window_size">
            <summary>
            Actual size of Window: 2*wSize, except when the user input buffer is directly used as sliding Window.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.prev">
            <summary>
            Link to older string with same hash index. To limit the size of this
            array to 64K, this link is maintained only for the last 32K strings.
            An index in this array is thus a Window index modulo 32K.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.head">
            <summary>
            Heads of the hash chains or NIL.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.ins_h">
            <summary>
            hash index of string to be inserted
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.hash_size">
            <summary>
            number of elements in hash table
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.hash_bits">
            <summary>
            log2(hash_size)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.hash_mask">
            <summary>
            hash_size-1
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.hash_shift">
            <summary>
            Number of bits by which ins_h must be shifted at each input
            step. It must be such that after MIN_MATCH steps, the oldest
            byte no longer takes part in the hash key, that is:
            hash_shift * MIN_MATCH >= hash_bits
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.block_start">
            <summary>
            Window position at the beginning of the current output block. Gets negative when the Window is moved backwards.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.match_length">
            <summary>
            length of best match
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.prev_match">
            <summary>
            previous match
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.match_available">
            <summary>
            set if previous match exists
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.strstart">
            <summary>
            start of string to insert
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.match_start">
            <summary>
            start of matching string
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.lookahead">
            <summary>
            number of valid bytes ahead in Window
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.prev_length">
            <summary>
            Length of the best match at previous step. Matches not greater than this
            are discarded. This is used in the lazy match evaluation.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.max_chain_length">
            <summary>
            To speed up deflation, hash chains are never searched beyond this
            length.  A higher limit improves compression ratio but degrades the speed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.max_lazy_match">
            <summary>
            Attempt to find a better match only when the current match is strictly
            smaller than this value. This mechanism is used only for compression
            levels >= 4.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate._level">
            <summary>
            compression level (1..9)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.strategy">
            <summary>
            favor or force Huffman coding
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.good_match">
            <summary>
            Use a faster search when the previous match is longer than this
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.nice_match">
            <summary>
            Stop searching when current match exceeds this
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.dyn_ltree">
            <summary>
            literal and length tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.dyn_dtree">
            <summary>
            distance tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.bl_tree">
            <summary>
             Huffman tree for bit lengths
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.l_desc">
            <summary>
            Desc for literal tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.d_desc">
            <summary>
            desc for distance tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.bl_desc">
            <summary>
            desc for bit length tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.bl_count">
            <summary>
            number of codes at each bit length for an optimal tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.heap">
            <summary>
            heap used to build the Huffman trees
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.heap_len">
            <summary>
            number of elements in the heap
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.heap_max">
            <summary>
            element of largest frequency
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.depth">
            <summary>
            Depth of each subtree used as tie breaker for trees of equal frequency
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.l_buf">
            <summary>
            index for literals or lengths
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.lit_bufsize">
            <summary>
             Size of match buffer for literals/lengths.  There are 4 reasons for
             limiting lit_bufsize to 64K:
               - frequencies can be kept in 16 bit counters
               - if compression is not successful for the first block, all input
                 data is still in the Window so we can still emit a stored block even
                 when input comes from standard input.  (This can also be done for
                 all blocks if lit_bufsize is not greater than 32K.)
               - if compression is not successful for a file smaller than 64K, we can
                 even emit a stored file instead of a stored block (saving 5 bytes).
                 This is applicable only for zip (not gzip or zlib).
               - creating new Huffman trees less frequently may not provide fast
                 adaptation to changes in the input data statistics. (Take for
                 example a binary file with poorly compressible code followed by
                 a highly compressible string table.) Smaller buffer sizes give
                 fast adaptation but have of course the overhead of transmitting
                 trees more frequently.
               - I can't count above 4
            </summary> 
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.last_lit">
            <summary>
            running index in l_buf
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.d_buf">
            <summary>
            index of pendig_buf
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.opt_len">
            <summary>
            bit length of current block with optimal trees
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.static_len">
            <summary>
            bit length of current block with static trees
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.matches">
            <summary>
            number of string matches in current block
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.last_eob_len">
            <summary>
            bit length of EOB code for last block
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.bi_buf">
            <summary>
            Output buffer. bits are inserted starting at the bottom (least
            significant bits).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.bi_valid">
            <summary>
            Number of valid bits in bi_buf.  All bits above the last valid bit
            are always zero.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.lm_init">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.tr_init">
            <summary>
            Initialize the tree data structures for a new zlib stream.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.init_block">
            <summary>
            Initializes block
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.pqdownheap(System.Int16[],System.Int32)">
            <summary>
             Restore the heap property by moving down the tree starting at node k,
             exchanging a node with the smallest of its two sons if necessary, stopping
             when the heap property is re-established (each father smaller than its
             two sons).
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.scan_tree(System.Int16[],System.Int32)">
            <summary>
             Scan a literal or distance tree to determine the frequencies of the codes
             in the bit length tree.
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.build_bl_tree">
            <summary>
             Construct the Huffman tree for the bit lengths and return the index in
             bl_order of the last bit length code to send.
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.send_all_trees(System.Int32,System.Int32,System.Int32)">
            <summary>
             Send the header for a block using dynamic Huffman trees: the counts, the
             lengths of the bit length codes, the literal tree and the distance tree.
             IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.send_tree(System.Int16[],System.Int32)">
            <summary>
             Send a literal or distance tree in compressed form, using the codes in
             bl_tree.
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.put_byte(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Output a byte on the stream.
             IN assertion: there is enough room in Pending_buf.
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.put_byte(System.Byte)">
            <summary>
            Adds a byte to the buffer
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate._tr_align">
            <summary>
             Send one empty static block to give enough lookahead for inflate.
             This takes 10 bits, of which 7 may remain in the bit buffer.
             The current inflate code requires 9 bits of lookahead. If the
             last two codes for the previous block (real code plus EOB) were coded
             on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode
             the last real code. In this case we send two empty static blocks instead
             of one. (There are no problems if the previous block is stored or fixed.)
             To simplify the code, we assume the worst case of last real code encoded
             on one bit only.
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate._tr_tally(System.Int32,System.Int32)">
            <summary>
            Save the match info and tally the frequency counts. Return true if
            the current block must be flushed.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.compress_block(System.Int16[],System.Int16[])">
            <summary>
             Send the block data compressed using the given Huffman trees
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.set_data_type">
            <summary>
            Set the data type to ASCII or BINARY, using a crude approximation:
            binary if more than 20% of the bytes are &lt;= 6 or &gt;= 128, ascii otherwise.
            IN assertion: the fields freq of dyn_ltree are set and the total of all
            frequencies does not exceed 64K (to fit in an int on 16 bit machines).
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.bi_flush">
            <summary>
            Flush the bit buffer, keeping at most 7 bits in it.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.bi_windup">
            <summary>
            Flush the bit buffer and align the output on a byte boundary
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.copy_block(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy a stored block, storing first the length and its
            one's complement if requested.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.flush_block_only(System.Boolean)">
            <summary>
            Flushes block
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflate_stored(System.Int32)">
            <summary>
            Copy without compression as much as possible from the input stream, return
            the current block state.
            This function does not insert new strings in the dictionary since
            uncompressible data is probably not useful. This function is used
            only for the level=0 compression option.
            NOTE: this function should be optimized to avoid extra copying from
            Window to Pending_buf.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate._tr_stored_block(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Send a stored block
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate._tr_flush_block(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determine the best encoding for the current block: dynamic trees, static
            trees or store, and output the encoded block to the zip file.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.fill_window">
            <summary>
             Fill the Window when the lookahead becomes insufficient.
             Updates strstart and lookahead.
            
             IN assertion: lookahead less than MIN_LOOKAHEAD
             OUT assertions: strstart less than or equal to window_size-MIN_LOOKAHEAD
                At least one byte has been ReadPos, or _avail_in == 0; reads are
                performed for at least two bytes (required for the zip translate_eol
                option -- not supported here).
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflate_fast(System.Int32)">
            <summary>
             Compress as much as possible from the input stream, return the current
             block state.
             This function does not perform lazy evaluation of matches and inserts
             new strings in the dictionary only for unmatched strings or for short
             matches. It is used only for the fast compression options.
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflate_slow(System.Int32)">
            <summary>
             Same as above, but achieves better compression. We use a lazy
             evaluation for matches: a match is finally adopted only if there is
             no better match at the next Window position.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.longest_match(System.Int32)">
            <summary>
            Finds the longest matching data part
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflateInit(ComponentAce.Compression.Libs.ZLib.ZStream,System.Int32,System.Int32)">
            <summary>
            Deflate algorithm initialization
            </summary>
            <param name="strm">ZStream object</param>
            <param name="level">Compression level</param>
            <param name="bits">Window bits</param>
            <returns>A result code</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflateInit(ComponentAce.Compression.Libs.ZLib.ZStream,System.Int32)">
            <summary>
            Initializes deflate algorithm
            </summary>
            <param name="strm">ZStream object</param>
            <param name="level">Compression level</param>
            <returns>Operation result result code</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflateInit2(ComponentAce.Compression.Libs.ZLib.ZStream,System.Int32,System.Int32,System.Int32,System.Int32,ComponentAce.Compression.Libs.ZLib.CompressionStrategy)">
            <summary>
            Deflate algorithm initialization
            </summary>
            <param name="strm">ZStream object</param>
            <param name="level">Compression level</param>
            <param name="method">Compression method</param>
            <param name="windowBits">Window bits</param>
            <param name="memLevel">Memory level</param>
            <param name="strategy">Compression strategy</param>
            <returns>Operation result code</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflateReset(ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Resets the current state of deflate object
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflateEnd">
            <summary>
            Finish compression with deflate algorithm
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflateParams(ComponentAce.Compression.Libs.ZLib.ZStream,System.Int32,ComponentAce.Compression.Libs.ZLib.CompressionStrategy)">
            <summary>
            Sets deflate algorithm parameters
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflateSetDictionary(ComponentAce.Compression.Libs.ZLib.ZStream,System.Byte[],System.Int32)">
            <summary>
            Sets deflate dictionary
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.deflate(ComponentAce.Compression.Libs.ZLib.ZStream,ComponentAce.Compression.Libs.ZLib.FlushStrategy)">
            <summary>
            Performs data compression with the deflate algorithm
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.#cctor">
            <summary>
            Static constructor initializes config_table
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.Deflate.level">
            <summary>
            Compression level
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.Deflate.Pending">
            <summary>
            Number of bytes in the pending buffer
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.Deflate.Pending_buf">
            <summary>
            Output still pending
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.Deflate.Pending_out">
            <summary>
            Next pending byte to output to the stream
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.Deflate.NoHeader">
            <summary>
            suppress zlib header and adler32
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.Deflate.Config">
            <summary>
            Deflate algorithm configuration parameters class
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.Config.good_length">
            <summary>
            reduce lazy search above this match length
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.Config.max_lazy">
            <summary>
            do not perform lazy search above this match length
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Deflate.Config.nice_length">
            <summary>
            quit search above this match length
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Deflate.Config.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor which initializes class inner fields
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.InflateBlockMode">
            <summary>
            InflateBlockMode
            </summary>
            <exclude />
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.InfBlocks">
            <summary>
            InfBlocks
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.mode">
            <summary>
            current inflate_block mode 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.left">
            <summary>
            if STORED, bytes left to copy 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.table">
            <summary>
            table lengths (14 bits) 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.index">
            <summary>
            index into blens (or border) 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.blens">
            <summary>
            bit lengths of codes 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.bb">
            <summary>
            bit length tree depth 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.tb">
            <summary>
            bit length decoding tree 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.codes">
            <summary>
            if CODES, current state 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.last">
            <summary>
            true if this block is the last block 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.bitk">
            <summary>
            bits in bit buffer 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.bitb">
            <summary>
            bit buffer 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.hufts">
            <summary>
            single malloc for tree space 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.window">
            <summary>
            sliding Window 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.end">
            <summary>
            one byte after sliding Window 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.read">
            <summary>
            Window ReadPos pointer 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.write">
            <summary>
            Window WritePos pointer 
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.needCheck">
            <summary>
            need check
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfBlocks.check">
            <summary>
            check on output 
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfBlocks.reset(ComponentAce.Compression.Libs.ZLib.ZStream,System.Int64[])">
            <summary>
            Resets this InfBlocks class instance
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfBlocks.proc(ComponentAce.Compression.Libs.ZLib.ZStream,System.Int32)">
            <summary>
            Block processing functions
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfBlocks.free(ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Frees inner buffers
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfBlocks.set_dictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets dictionary
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfBlocks.sync_point">
            <summary>
             Returns true if inflate is currently at the End of a block generated
             by Z_SYNC_FLUSH or Z_FULL_FLUSH. 
             </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfBlocks.inflate_flush(ComponentAce.Compression.Libs.ZLib.ZStream,System.Int32)">
            <summary>
            copy as much as possible from the sliding Window to the output area
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.InfBlocks.Window">
            <summary>
            sliding window 
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.InfBlocks.End">
            <summary>
            one byte after sliding Window 
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.InfBlocks.ReadPos">
            <summary>
            Window ReadPos pointer 
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.InfBlocks.WritePos">
            <summary>
            Window WritePos pointer 
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.InfBlocks.BitK">
            <summary>
            bits in bit buffer 
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.InfBlocks.BitB">
            <summary>
            bit buffer 
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.InflateCodesMode">
            <summary>
            Inflate codes mode
            </summary>
            <exclude />
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.InfCodes">
            <summary>
            This class is used by the InfBlocks class
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.mode">
            <summary>
            current inflate_codes mode
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.count">
            <summary>
            length
            </summary>        
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.tree">
            <summary>
            pointer into tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.tree_index">
            <summary>
            current index of the tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.need">
            <summary>
            
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.lbits">
            <summary>
            ltree bits decoded per branch
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.dbits">
            <summary>
            dtree bits decoded per branch
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.ltree">
            <summary>
            literal/length/eob tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.ltree_index">
            <summary>
            literal/length/eob tree index
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.dtree">
            <summary>
            distance tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InfCodes.dtree_index">
            <summary>
            distance tree index
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfCodes.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Constructor which takes literal, distance trees, corresponding bites decoded for branches, corresponding indexes and a ZStream object 
            </summary>        
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfCodes.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32[],ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Constructor which takes literal, distance trees, corresponding bites decoded for branches and a ZStream object 
            </summary>   
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfCodes.proc(ComponentAce.Compression.Libs.ZLib.InfBlocks,ComponentAce.Compression.Libs.ZLib.ZStream,System.Int32)">
            <summary>
            Block processing method
            </summary>
            <param name="s">An instance of the InfBlocks class</param>
            <param name="z">A ZStream object</param>
            <param name="r">A result code</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfCodes.free(ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Frees allocated resources
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfCodes.inflate_fast(System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,ComponentAce.Compression.Libs.ZLib.InfBlocks,ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Fast inflate procedure. Called with number of bytes left to WritePos in Window at least 258
            (the maximum string length) and number of input bytes available
            at least ten.  The ten bytes are six bytes for the longest length/
            distance pair plus four bytes for overloading the bit buffer.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.InflateMode">
            <summary>
            This enumeration contains modes of inflate processing
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.METHOD">
            <summary>
            waiting for method byte
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.FLAG">
            <summary>
            waiting for flag byte
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.DICT4">
            <summary>
            four dictionary check bytes to go
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.DICT3">
            <summary>
            three dictionary check bytes to go
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.DICT2">
            <summary>
            two dictionary check bytes to go
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.DICT1">
            <summary>
            one dictionary check byte to go
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.DICT0">
            <summary>
            waiting for inflateSetDictionary
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.BLOCKS">
            <summary>
            decompressing blocks
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.CHECK4">
            <summary>
            four check bytes to go
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.CHECK3">
            <summary>
            three check bytes to go
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.CHECK2">
            <summary>
            two check bytes to go
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.CHECK1">
            <summary>
            one check byte to go
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.DONE">
            <summary>
            finished check, done
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.InflateMode.BAD">
            <summary>
            got an error--stay here
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.Inflate">
            <summary>
            Inflate
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Inflate.mode">
            <summary>
            current inflate mode
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Inflate.method">
            <summary>
            if FLAGS, method byte
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Inflate.was">
            <summary>
            computed check value
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Inflate.need">
            <summary>
            stream check value
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Inflate.marker">
            <summary>
            if BAD, inflateSync's marker bytes count
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Inflate.nowrap">
            <summary>
            flag for no wrapper
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Inflate.wbits">
            <summary>
            log2(Window size)  (8..15, defaults to 15)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Inflate.blocks">
            <summary>
            current inflate_blocks state
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Inflate.inflateReset(ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Resets the Inflate algorithm
            </summary>
            <param name="z">A ZStream object</param>
            <returns>A result code</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Inflate.inflateEnd(ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Finishes the inflate algorithm processing
            </summary>
            <param name="z">A ZStream object</param>
            <returns>Operation result code</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Inflate.inflateInit(ComponentAce.Compression.Libs.ZLib.ZStream,System.Int32)">
            <summary>
            Initializes the inflate algorithm
            </summary>
            <param name="z">A ZStream object</param>
            <param name="windowBits">Window size</param>
            <returns>Operation result code</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Inflate.inflate(ComponentAce.Compression.Libs.ZLib.ZStream,ComponentAce.Compression.Libs.ZLib.FlushStrategy)">
            <summary>
            Runs inflate algorithm
            </summary>
            <param name="z">A ZStream object</param>
            <param name="flush">Flush strategy</param>
            <returns>Operation result code</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Inflate.inflateSetDictionary(ComponentAce.Compression.Libs.ZLib.ZStream,System.Byte[],System.Int32)">
            <summary>
            Sets dictionary for the inflate operation
            </summary>
            <param name="z">A ZStream object</param>
            <param name="dictionary">An array of byte - dictionary</param>
            <param name="dictLength">Dictionary length</param>
            <returns>Operation result code</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Inflate.inflateSync(ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Inflate synchronization
            </summary>
            <param name="z">A ZStream object</param>
            <returns>Operation result code</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Inflate.inflateSyncPoint(ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
             Returns true if inflate is currently at the End of a block generated
             by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP
             implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH
             but removes the length bytes of the resulting empty stored block. When
             decompressing, PPP checks that at the End of input packet, inflate is
             waiting for these length bytes.
             </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.InfTreeUtil">
            <summary>
            Contains utility information for the InfTree class
            </summary>
            <exclude />
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.InfTree">
            <summary>
            InfTree
            </summary>
            <exclude />
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfTree.huft_build(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Given a list of code lengths and a maximum table size, make a set of
            tables to decode that set of codes.  
            </summary>
            <returns>Return (int)ZLibResultCode.Z_OK on success, (int)ZLibResultCode.Z_DATA_ERROR if the given code set is incomplete (the tables are still built in this case), (int)ZLibResultCode.Z_DATA_ERROR if the input is invalid (an over-subscribed set of lengths), or (int)ZLibResultCode.Z_DATA_ERROR if not enough memory.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfTree.inflate_trees_bits(System.Int32[],System.Int32[],System.Int32[],System.Int32[],ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Build trees
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfTree.inflate_trees_dynamic(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Builds dynamic trees
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.InfTree.inflate_trees_fixed(System.Int32[],System.Int32[],System.Int32[][],System.Int32[][],ComponentAce.Compression.Libs.ZLib.ZStream)">
            <summary>
            Build fixed trees
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.StaticTree">
            <summary>
            StaticTree
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.StaticTree.MAX_BL_BITS">
            <summary>
             Bit length codes must not exceed MAX_BL_BITS bits
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.Tree">
            <summary>
            This class represents a tree and is used in the Deflate class
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Tree.dyn_tree">
            <summary>
            The dynamic tree
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Tree.max_code">
            <summary>
            Largest code with non zero frequency
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.Tree.stat_desc">
            <summary>
            the corresponding static tree
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Tree.d_code(System.Int32)">
            <summary>
            Mapping from a distance to a distance code. dist is the distance - 1 and
            must not have side effects. _dist_code[256] and _dist_code[257] are never
            used.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Tree.gen_bitlen(ComponentAce.Compression.Libs.ZLib.Deflate)">
            <summary>
             Compute the optimal bit lengths for a tree and update the total bit length
             for the current block.
             IN assertion: the fields freq and dad are set, heap[heap_max] and
                above are the tree nodes sorted by increasing frequency.
             OUT assertions: the field count is set to the optimal bit length, the
                 array bl_count contains the frequencies for each bit length.
                 The length opt_len is updated; static_len is also updated if stree is
                 not null.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Tree.build_tree(ComponentAce.Compression.Libs.ZLib.Deflate)">
            <summary>
             Construct one Huffman tree and assigns the code bit strings and lengths.
             Update the total bit length for the current block.
             IN assertion: the field freq is set for all tree elements.
             OUT assertions: the fields count and code are set to the optimal bit length
                 and corresponding code. The length opt_len is updated; static_len is
                 also updated if stree is not null. The field max_code is set.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Tree.gen_codes(System.Int16[],System.Int32,System.Int16[])">
            <summary>
             Generate the codes for a given tree and bit counts (which need not be
             optimal).
             IN assertion: the array bl_count contains the bit length statistics for
             the given tree and the field count is set for all tree elements.
             OUT assertion: the field code is set for all tree elements of non
                 zero code length.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.Tree.bi_reverse(System.Int32,System.Int32)">
            <summary>
             Reverse the first count bits of a code, using straightforward code (a faster
             method would use a table)
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.Tree.DynTree">
            <summary>
            The dynamic tree
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.Tree.MaxCode">
            <summary>
            Largest code with non zero frequency
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.Tree.StatDesc">
            <summary>
            the corresponding static tree
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.ZInputStream">
             <summary>
             <para>The <c>ZInputStream</c> class is used for decompression of data. For decompression the inflate algorithm is used.</para>
             <para>To compress data you can use either the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZOutputStream"/> class or the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZLibStream"/> class.</para>
             </summary>
             <example> The following code demonstrates how to use the <c>ZInputStream</c> to decompresses data
             <code>
             [C#]
             private void decompressFile(string inFile, string outFile)
            	{
            	  /* Create a file to store decompressed data */
            		System.IO.FileStream decompressedFile = new System.IO.FileStream(@"c:\data\decompressed.dat", System.IO.FileMode.Create);
            		/* Open a file containing compressed data */
            		System.IO.FileStream compressedFile = new System.IO.FileStream(@"c:\data\compressed.dat", System.IO.FileMode.Open);	
            		/* Create ZInputStream for decompression */
            		ZInputStream decompressionStream = new ZInputStream(compressedFile);
            
            		try
            		{
            				byte[] buffer = new byte[2000];
            				int len;
            				/* Read and decompress data */
            				while ((len = decompressionStream.Read(buffer, 0, 2000)) &gt; 0)
            				{
            				  /* Store decompressed data */
            					decompressedFile.Write(buffer, 0, len);
            				}
            		}
            		finally
            		{
            			decompressionStream.Close();
            			decompressedFile.Close();
            			compressedFile.Close();
            		}
            	}
             </code>
             </example>
             <exclude/>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZInputStream.z">
            <summary>
            ZStream object
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZInputStream.flush">
            <summary>
            Flush strategy
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZInputStream.buf">
            <summary>
            Buffers
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZInputStream.buf1">
            <summary>
            Buffers
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZInputStream._stream">
            <summary>
            Stream to decompress data from
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZInputStream.nomoreinput">
            <summary>
            True if no more input is available
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.InitBlock">
            <summary>
            Initializes a block
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor which takes one argument - the <paramref name="stream"/> containing data to decompress.
            </summary>
            <param name="stream">A stream to decompress data from.</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.ReadByte">
            <summary>
            Reads a byte of decompressed data from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. 
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream. </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Reads a number of decompressed bytes into the specified byte array. 
             </summary>
             <param name="buffer">The array used to store decompressed bytes.</param>
             <param name="offset">The location in the array to begin reading.</param>
             <param name="count">The number of decompressed bytes to read.</param>
             <returns>The number of bytes that were decompressed into the byte array.</returns>
             <example> The following code demonstrates how to use the <c>ZInputStream</c> to decompresses data
             <code>
             [C#]
             private void decompressFile(string inFile, string outFile)
            	{
            	  /* Create a file to store decompressed data */
            		System.IO.FileStream decompressedFile = new System.IO.FileStream(@"c:\data\decompressed.dat", System.IO.FileMode.Create);
            		/* Open a file containing compressed data */
            		System.IO.FileStream compressedFile = new System.IO.FileStream(@"c:\data\compressed.dat", System.IO.FileMode.Open);	
            		/* Create ZInputStream for decompression */
            		ZInputStream decompressionStream = new ZInputStream(compressedFile);
            
            		try
            		{
            				byte[] buffer = new byte[2000];
            				int len;
            				/* Read and decompress data */
            				while ((len = decompressionStream.Read(buffer, 0, 2000)) > 0)
            				{
            				  /* Store decompressed data */
            					decompressedFile.Write(buffer, 0, len);
            				}
            		}
            		finally
            		{
            			decompressionStream.Close();
            			decompressedFile.Close();
            			compressedFile.Close();
            		}
            	}
             </code>
             </example>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a byte to the stream. Please note, that this method throws the <see cref="T:System.NotSupportedException"/> since <see cref="T:ComponentAce.Compression.Libs.ZLib.ZInputStream"/> doesn't support writing.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.Skip(System.Int64)">
            <summary>
            Skips n decompressed bytes in the stream.
            </summary>
            <param name="n">The number of bytes to skip.</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.Finish(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the final block of decompressed data and finishes decompression.
            </summary>
            <param name="buffer">The array used to store decompressed bytes.</param>
            <param name="offset">The location in the array to begin reading.</param>
            <param name="count">The number of decompressed bytes to read.</param>
            <returns>The number of bytes that were decompressed into the byte array.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.End">
            <summary>
            Frees allocated resources.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.Close">
            <summary>
            Closes the stream and the underlying stream.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.Flush">
            <summary>
            Flushes the stream
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. Please note that the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZInputStream"/> class doesn't support the <see cref="M:System.IO.Stream.SetLength(System.Int64)">SetLength</see> operation and thus the <see cref="T:System.NotSupportedException"/> is thrown.
            </summary>
            <param name="value">A new length of the stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to the offset position (from the beginning or from the current position, etc. see the available values of the <paramref name="origin"/> parameter)in the stream. This method throws an exception since ZInpitStream doesn't support <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">seeking</see> operation
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZInputStream.FlushMode">
            <summary>
            Gets/Sets the current <see cref="T:ComponentAce.Compression.Libs.ZLib.FlushStrategy">flush strategy</see>.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZInputStream.Length">
            <summary>
            Gets the length of the stream in bytes. Please note that the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZInputStream"/> class doesn't support the <see cref="P:System.IO.Stream.Length">Length</see> property and thus the <see cref="T:System.NotSupportedException"/> is thrown.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZInputStream.Position">
            <summary>
            Gets/Sets the current position in the stream.  Please note that the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZInputStream"/> class doesn't support the <see cref="P:System.IO.Stream.Position">Position</see> property and thus the <see cref="T:System.NotSupportedException"/> is thrown.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZInputStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading while decompressing a file. 
            </summary>
            <returns>
            Always returns <c>true</c>.
            </returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZInputStream.CanWrite">
            <summary>
            Gets a value indicating whether the stream supports writing. 
            </summary>
            <returns>For the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZInputStream"/> always returns <c>false</c>.</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking.
            </summary>
            <returns>Always returns <c>false</c>.</returns>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.ZLibCompressionLevel">
            <summary>
            Some constants for specifying compression levels. Methods which takes a compression level as a parameter expects an integer value from 0 to 9. You can either specify an integer value or use constants for some most widely used compression levels.
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibCompressionLevel.Z_NO_COMPRESSION">
            <summary>
             No compression should be used at all.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibCompressionLevel.Z_BEST_SPEED">
            <summary>
            Minimal compression, but greatest speed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibCompressionLevel.Z_BEST_COMPRESSION">
            <summary>
            Maximum compression, but slowest.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibCompressionLevel.Z_DEFAULT_COMPRESSION">
            <summary>
            Select default compression level (good compression, good speed).
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.CompressionStrategy">
            <summary>
            Compression strategies. The strategy parameter is used to tune the compression algorithm. The strategy parameter only affects the compression ratio but not the correctness of the compressed output even if it is not set appropriately.
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.CompressionStrategy.Z_FILTERED">
            <summary>
            This strategy is designed for filtered data. Data which consists of mostly small values, with random distribution should use Z_FILTERED. With this strategy, less string matching is performed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.CompressionStrategy.Z_HUFFMAN_ONLY">
            <summary>
            Z_HUFFMAN_ONLY forces Huffman encoding only (no string match)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.CompressionStrategy.Z_DEFAULT_STRATEGY">
            <summary>
            The default strategy is the most commonly used. With this strategy, string matching and huffman compression are balanced.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.FlushStrategy">
            <summary>
            Flush strategies
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_NO_FLUSH">
            <summary>
              Do not internalFlush data, but just write data as normal to the output buffer. This is the normal way in which data is written to the output buffer.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_PARTIAL_FLUSH">
            <summary>
            Obsolete. You should use Z_SYNC_FLUSH instead.
            </summary>        
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_SYNC_FLUSH">
            <summary>
            All pending output is flushed to the output buffer and the output is aligned on a byte boundary, so that the decompressor can get all input data available so far.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FULL_FLUSH">
            <summary>
            All output is flushed as with Z_SYNC_FLUSH, and the compression state is reset so that decompression can restart from this point if previous compressed data has been damaged or if random access is desired. Using Z_FULL_FLUSH too often can seriously degrade the compression. ZLib_InflateSync will locate points in the compression string where a full has been performed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FINISH">
            <summary>
            Notifies the module that the input has now been exhausted. Pending input is processed, pending output is flushed and calls return with Z_STREAM_END if there was enough output space.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.ZLibResultCode">
            <summary>
            Results of operations in ZLib library
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK">
            <summary>
             No failure was encountered, the operation completed without problem.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_END">
            <summary>
            No failure was encountered, and the input has been exhausted.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_NEED_DICT">
            <summary>
            A preset dictionary is required for decompression of the data.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_ERRNO">
            <summary>
            An internal error occurred
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR">
            <summary>
            The stream structure was inconsistent
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_DATA_ERROR">
            <summary>
            Input data has been corrupted (for decompression).
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_MEM_ERROR">
            <summary>
            Memory allocation failed.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_BUF_ERROR">
            <summary>
            There was not enough space in the output buffer.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_VERSION_ERROR">
            <summary>
            The version supplied does not match that supported by the ZLib module.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.DeflateState">
            <summary>
            States of deflate operation
            </summary>
            <exclude />
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.BlockType">
            <summary>
            Data block types, i.e. binary or ascii text
            </summary>
            <exclude />
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.ZLibUtil">
            <summary>
            Helper class
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibUtil.MAX_WBITS">
            <summary>
            Max Window size
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibUtil.PRESET_DICT">
            <summary>
            preset dictionary flag in zlib header
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibUtil.zLibBufSize">
            <summary>
            The size of the buffer
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibUtil.Z_DEFLATED">
            <summary>
            Deflate compression method index
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibUtil.DIST_CODE_LEN">
            <summary>
            see definition of array dist_code below
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to ReadPos from.</param>
            <param name="target">Contains the array of characters ReadPos from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to ReadPos from the source Stream.</param>
            <returns>The number of characters ReadPos. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the End of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to ReadPos from</param>
            <param name="target">Contains the array of characteres ReadPos from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to ReadPos from the source TextReader.</param>
            <returns>The number of characters ReadPos. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the End of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibUtil.CopyLargeArrayToSmall.CopyData">
            <summary>
            Copies large array which was passed as srcBuf to the Initialize method into the destination array which were passes as destBuff
            </summary>
            <returns>The number of bytes copied</returns>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.CompressionDirection">
            <summary>
            Compression directions: compression or decompression. This enumeration is used to specify the direction of compression for the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZLibStream"/>.
            </summary>
            <exclude/>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.CompressionDirection.Compression">
            <summary>
            The <c>CompressionDirection.Compression</c> item means compression of data
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.CompressionDirection.Decompression">
            <summary>
            The <c>CompressionDirection.Decompression</c> item means decompression of data
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.ZLibStream">
            <summary>
            <para>This class represents the Deflate algorithm, an industry standard algorithm for lossless file compression and decompression. It uses a combination of the LZ77 algorithm and Huffman coding. Data can be produced or consumed, even for an arbitrarily long, sequentially presented input data stream, using only previously bound amount of intermediate storage. The format can be implemented readily in a manner not covered by patents. For more information, see RFC 1951. <see href="http://go.microsoft.com/fwlink/?linkid=45286">DEFLATE Compressed Data Format Specification version 1.3.</see></para>
            <para>The compression functionality in ZLibStream is exposed as a stream. Data is read in on a byte-by-byte basis, so it is not possible to perform multiple passes to determine the best method for compressing entire files or large blocks of data.</para>
            </summary>
            <example> Sample code to compress data
            <code>
            [C#]
            public class Test
            {
               public static void Main()
               {
                    /* Open the file containing source data */
                    FileStream sourceStream = new FileStream(@"c:\data\sourceFile.dat", FileMode.Open);
                    /* Create an output stream to store compressed data */
                    FileStream targetStream = new FileStream(@"c:\data\compressedFile.dat", FileMode.CreateNew);
                    /* Create a ZLibStream for compression of data containing in the sourceStream */
                    ZLibStream compressionStream = new ZLibStream(targetStream, CompressionDirection.Compression, false);
                    /* Create a buffer */
                    byte[] buffer = new byte[2000];
                    int len;
                    /* Read source data */
                    while ((len = sourceStream.Read(buffer, 0, 2000)) &gt; 0)
                    {
                        /* Compress the source data and write compressed data to the targetStream */
                        compressionStream.Write(buffer, 0, len);
                    }
                    /* Close streams */
                    sourceStream.Close();
                    compressionStream.Close();
                }
            }
            </code>
            </example>
            <example> Sample code to decompress data
            <code>
            [C#]
            public class Test
            {
               public static void Main()
               {
                    /* Open the file containing compressed data */
                    FileStream sourceStream = new FileStream(@"c:\data\compressedFile.dat", FileMode.Open);
                    /* Create a ZLibStream for decompression of data containing from the sourceStream */
                    ZLibStream decompressionStream = new ZLibStream(sourceStream, CompressionDirection.Decompression, false);
                    /* Create an output stream to store decompressed data */
                    FileStream targetStream = new FileStream(@"c:\data\decompressedFile.dat", FileMode.CreateNew);
                    /* Create a buffer */
                    byte[] buffer = new byte[2000];
                    int len;
                    /* Read data from the decompression stream */
                    while ((len = decompressionStream.Read(buffer, 0, 2000)) &gt; 0)
                    {
                        /* Write decompressed data to the output stream */
                        targetStream.Write(buffer, 0, len);
                    }
                    /* Close streams */
                    targetStream.Close();
                    decompressionStream.Close();
                }
            }
            </code>
            </example>
            <seealso cref="T:ComponentAce.Compression.Libs.ZLib.ZInputStream"/>
            <seealso cref="T:ComponentAce.Compression.Libs.ZLib.ZOutputStream"/>
            <exclude/>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibStream.compressionDirection">
            <summary>
            Whether the stream is used for compression or it is used for decompression
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibStream._stream">
            <summary>
            A stream which will be compressed or decompressed
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibStream.decompressionStream">
            <summary>
            Stream that will be used for decompression
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibStream.compressionStream">
            <summary>
            Stream that will be used for compression
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibStream.compLevel">
            <summary>
            Compression level
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZLibStream.leaveOpen">
            <summary>
            True if we need to leave the underlying stream open when closing the current stream
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.Flush">
            <summary>
            If the current stream was created as a compression stream (<see cref="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.#ctor(System.IO.Stream,ComponentAce.Compression.Libs.ZLib.CompressionDirection,System.Boolean)"/>) this method calls the <see cref="M:System.IO.Stream.Flush"/> method for the underlying stream. If the current stream is a decompression stream this method does nothing.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <para>The <c>Read</c> method allows you to read data from the <c>ZLibStream</c>. The method is supported for a decompression stream only (<see cref="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.#ctor(System.IO.Stream,ComponentAce.Compression.Libs.ZLib.CompressionDirection,System.Boolean)"/>).</para>
            <para>If the current stream is a decompression stream this method reads a block of data from the underlying stream (the one passed to the <see cref="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.#ctor(System.IO.Stream,ComponentAce.Compression.Libs.ZLib.CompressionDirection,System.Boolean)"/> constructor), decompresses it using the inflate algorithm and returns decompressed data block.</para>
            </summary>
            <remarks>
            <para>When calling for a compression stream this method throws the <cref see="NotSupportedException"/> exception.</para>
            <para>Use the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZLibStream.CanRead"/> property to determine whether the current instance supports reading.</para>
            </remarks>
            <param name="buffer">An array of byte in which we want to decompress data. When this method returns the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the decompressed data bytes.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the decompressed data.</param>
            <param name="count">The maximum number of bytes to read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <example>This example shows how to decompress data with the ZLibStream.Read method:
            <code>
            public class Test
            {
               public static void Main()
               {
                    /* Open the file containing compressed data */
                    FileStream sourceStream = new FileStream(@"c:\data\compressedFile.dat", FileMode.Open);
                    /* Create a ZLibStream for decompression of data containing in the sourceStream */
                    ZLibStream decompressionStream = new ZLibStream(sourceStream, CompressionDirection.Decompression, false);
                    /* Create an output stream to store decompressed data */
                    FileStream targetStream = new FileStream(@"c:\data\decompressedFile.dat", FileMode.CreateNew);
                    /* Create a buffer */
                    byte[] buffer = new byte[2000];
                    int len;
                    /* Read data from the decompression stream */
                    while ((len = decompressionStream.Read(buffer, 0, 2000)) &gt; 0)
                    {
                        /* Write decompressed data to the output stream */
                        targetStream.Write(buffer, 0, len);
                    }
                    /* Close streams */
                    targetStream.Close();
                    decompressionStream.Close();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            ZLibStream doesn't support the <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">seeking</see> and thus the <see cref="T:System.NotSupportedException"/> is always thrown.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.SetLength(System.Int64)">
            <summary>
            ZLibStream doesn't support the <see cref="M:System.IO.Stream.SetLength(System.Int64)">SetLength</see> property and thus the <see cref="T:System.NotSupportedException"/> is always thrown.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <para>The <c>Write</c> method allows you to write data to the <c>ZLibStream</c>. The method is supported for a compression stream only (<see cref="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.#ctor(System.IO.Stream,ComponentAce.Compression.Libs.ZLib.CompressionDirection,System.Boolean)"/>).</para>
            <para>If the current stream is a compression stream this method reads a block of data from the <paramref name="buffer"/>, compresses it and writes to the underlying stream (the one passed to the <see cref="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.#ctor(System.IO.Stream,ComponentAce.Compression.Libs.ZLib.CompressionDirection,System.Boolean)"/> constructor).</para>
            </summary>
            <remarks>
            <para>When calling for a decompression stream this method throws the <cref see="NotSupportedException"/> exception.</para>
            <para>Use the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZLibStream.CanWrite"/> property to determine whether the current instance supports writing.</para>
            </remarks>
            <param name="buffer">An array of byte containing source data. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <example language="C#">This example shows how to compress data with the ZLibStream.Write method:
            <code>
            public class Test
            {
               public static void Main()
               {
                    /* Open the file containing source data */
                    FileStream sourceStream = new FileStream(@"c:\data\sourceFile.dat", FileMode.Open);
                    /* Create an output stream to store compressed data */
                    FileStream targetStream = new FileStream(@"c:\data\compressedFile.dat", FileMode.CreateNew);
                    /* Create a ZLibStream for compression of data containing in the sourceStream */
                    ZLibStream compressionStream = new ZLibStream(targetStream, CompressionDirection.Compression, false);
                    /* Create a buffer */
                    byte[] buffer = new byte[2000];
                    int len;
                    /* Read source data */
                    while ((len = sourceStream.Read(buffer, 0, 2000)) &gt; 0)
                    {
                        /* Compress the source data and write compressed data to the targetStream */
                        compressionStream.Write(buffer, 0, len);
                    }
                    /* Close streams */
                    sourceStream.Close();
                    compressionStream.Close();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.Close">
            <summary>
            Closes the current stream and the underlying stream depending on the <see cref="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.#ctor(System.IO.Stream,ComponentAce.Compression.Libs.ZLib.CompressionDirection,System.Boolean)">leaveOpen</see> parameter passed to the ZLibStream constructor.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.#ctor(System.IO.Stream,ComponentAce.Compression.Libs.ZLib.CompressionDirection,System.Boolean)">
            <summary>
            Constructor which creates a new <see cref="T:ComponentAce.Compression.Libs.ZLib.ZLibStream"/> object and initializes it as a compression or a decompression one depending on the <paramref name="dir"/> parameter.
            </summary>
            <param name="stream">The stream containing compressed data for decompression or the stream to store compressed data for compression.</param>
            <param name="dir">One of the <see cref="T:ComponentAce.Compression.Libs.ZLib.CompressionDirection"/> values that indicates the action to take (compression or decompression).</param>
            <param name="leaveOpen">Whether we need to leave the underlying stream open when <see cref="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.Close">closing</see> the current stream.</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.GetCompressionDirection">
            <summary>
            Returns the current <see cref="T:ComponentAce.Compression.Libs.ZLib.CompressionDirection">compression direction</see>.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.SetCompressionLevel(System.Int32)">
            <summary>
            Sets compression level for compression stream. If the current stream was created as a decompression stream the <see cref="T:System.NotSupportedException"/> is thrown.
            </summary>
            <param name="level">An integer value indicating the compression level. The parameter can take values from 0 to 9. You can pass -1 as a parameter to use the default compression level.</param>
            <exception cref="T:System.ArgumentException">The <c>ArgumentException</c> exception is thrown if the specified compression level is less then -1 or greater than 9.</exception>
            <exception cref="T:System.NotSupportedException">The NotSupportedException exception is thrown if we call this method for the decompression stream.</exception>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZLibStream.CanRead">
            <summary>
            CanRead returns <c>false</c> if the current stream is a compression stream. If the current stream is a decompression stream then the property returns the value of the <see cref="P:System.IO.Stream.CanRead"/> property of the underlying stream
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZLibStream.CanSeek">
            <summary>
            <see cref="T:ComponentAce.Compression.Libs.ZLib.ZLibStream"/> doesn't support the <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> operation and thus this property always returns <c>false</c>
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZLibStream.CanWrite">
            <summary>
            The property returns <c>false</c> if the current stream is a decompression stream and the value of the <see cref="P:System.IO.Stream.CanWrite"/> property of the underlying stream in case of the stream is a compression stream
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZLibStream.Length">
            <summary>
            ZLibStream doesn't support the <see cref="P:System.IO.Stream.Length">Length</see> property and thus the <see cref="T:System.NotSupportedException"/> is always thrown.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZLibStream.Position">
            <summary>
            ZLibStream doesn't allow you to get or set the position in the stream and thus the <see cref="T:System.NotSupportedException"/> is always thrown
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZLibStream.BaseStream">
            <summary>
            Gets the base stream for the current ZLibStream. The base stream is a stream passed to the <see cref="M:ComponentAce.Compression.Libs.ZLib.ZLibStream.#ctor(System.IO.Stream,ComponentAce.Compression.Libs.ZLib.CompressionDirection,System.Boolean)">ZLibStream constructor</see>.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.ZOutputStream">
             <summary>
             This class uses the Deflate algorithm (an industry standard algorithm for lossless file compression and decompression) to compress data. When <see cref="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.#ctor(System.IO.Stream,System.Int32)">creating</see> an instance of the class you passes a stream and an integer value indicating the compression level you want to use. The stream passed to the <see cref="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.#ctor(System.IO.Stream,System.Int32)">constructor</see> is used to store compressed data.
             </summary>    
             <example> The following code demonstrates how to use the <c>ZOutputStream</c> to compress data
             <code language="C#">
             [C#]
             private void compressFile(string inFile, string outFile)
            	{
            	    /* Create a file to store compressed data */
            		System.IO.FileStream compressedFile = new System.IO.FileStream(@"c:\data\compressed.dat", System.IO.FileMode.Create);
            		/* Open a file containing source data */
            		System.IO.FileStream sourceFile = new System.IO.FileStream(@"c:\data\source.dat", System.IO.FileMode.Open);	
            		/* Create ZOutputStream for compression */
            		ZOutputStream compressionStream = new ZOutputStream(compressedFile);
            
            		try
            		{
            				byte[] buffer = new byte[2000];
            				int len;
            				/* Read and compress data */
            				while ((len = sourceFile.Read(buffer, 0, 2000)) &gt; 0)
            				{
            				  /* Store compressed data */
            					compressionStream.Write(buffer, 0, len);
            				}
            		}
            		finally
            		{
            			compressionStream.Close();
            			sourceFile.Close();
            			compressedFile.Close();
            		}
            	}
             </code>
             </example>
             <exclude/>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZOutputStream.z">
            <summary>
            A ZStream object
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZOutputStream.flush">
            <summary>
            Current internalFlush strategy
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZOutputStream.buf">
            <summary>
            Buffer byte arrays
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZOutputStream.buf1">
            <summary>
            Buffer byte arrays
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZOutputStream._stream">
            <summary>
            Out stream
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Constructor which takes two parameters: the <paramref name="stream"/> to store compressed data in and the desired compression level.
            </summary>
            <param name="stream">A stream to be used to store compressed data.</param>
            <param name="level">An integer value indicating the desired compression level. The compression level can take values from 0 to 9. The maximum value indicates that the maximum compression should be achieved (but this method will be the slowest one). 0 means that no compression should be used at all. If you want to use the default compression level you can pass -1. Also you can use the constants from the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZLibCompressionLevel"/> class.</param>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Writes a byte array to the stream. This block of data is compressed and stored in the stream passed as a parameter to the <see cref="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.#ctor(System.IO.Stream,System.Int32)">class constructor</see>.
             </summary>
             <param name="buffer">A byte array to compress.</param>
             <param name="offset">Offset of the first byte to compress.</param>
             <param name="count">The number of bytes to compress from the buffer.</param>
             <example> The following code demonstrates how to use the <c>ZOutputStream</c> to compress data
             <code>
             [C#]
             private void compressFile(string inFile, string outFile)
            	{
            	    /* Create a file to store compressed data */
            		System.IO.FileStream compressedFile = new System.IO.FileStream(@"c:\data\compressed.dat", System.IO.FileMode.Create);
            		/* Open a file containing source data */
            		System.IO.FileStream sourceFile = new System.IO.FileStream(@"c:\data\source.dat", System.IO.FileMode.Open);	
            		/* Create ZOutputStream for compression */
            		ZOutputStream compressionStream = new ZOutputStream(compressedFile);
            
            		try
            		{
            				byte[] buffer = new byte[2000];
            				int len;
            				/* Read and compress data */
            				while ((len = sourceFile.Read(buffer, 0, 2000)) &gt; 0)
            				{
            				  /* Store compressed data */
            					compressionStream.Write(buffer, 0, len);
            				}
            		}
            		finally
            		{
            			compressionStream.Close();
            			sourceFile.Close();
            			compressedFile.Close();
            		}
            	}
             </code>
             </example>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.Finish">
            <summary>
            Finishes compression.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.End">
            <summary>
            Frees allocated resources.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.Close">
            <summary>
            Close the current and the underying streams.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from the stream. Please note, that this method throws the <see cref="T:System.NotSupportedException"/> exception since <see cref="T:ComponentAce.Compression.Libs.ZLib.ZOutputStream"/> doesn't support <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">reading</see>.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method throws the <see cref="T:System.NotSupportedException"/> exception since the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZOutputStream"/> class doesn't support <see cref="M:System.IO.Stream.SetLength(System.Int64)">the operation</see>.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position in the stream. This method throws the <see cref="T:System.NotSupportedException"/> exception since the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZOutputStream"/> class doesn't support <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">the operation</see>.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZOutputStream.FlushMode">
            <summary>
            Gets/Sets the <see creg="FlushStrategy">flush</see> strategy to use during compression.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZOutputStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading.
            </summary>
            <remarks>Always returns <c>false</c> since the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZOutputStream"/> doesn't support reading.</remarks>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZOutputStream.CanSeek">
            <summary>
            Whether we can seek to a position in the stream.
            </summary>
            <returns>Always returns false since the <see cref="T:ComponentAce.Compression.Libs.ZLib.ZOutputStream"/> doesn't support <see creg="Stream.Seek">seeking</see>.</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZOutputStream.CanWrite">
            <summary>
            Whether the stream supports the writing operation.
            </summary>
            <returns>This property always returns <c>true</c>.</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZOutputStream.Length">
            <summary>
            Returns the length of the stream. Please note that this property always throws the <see cref="T:System.NotSupportedException"/> exception since the stream doesn't support the <see cref="P:System.IO.Stream.Length">property</see>.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZOutputStream.Position">
            <summary>
            Returns the current position in the compressed stream. This property throws the <see cref="T:System.NotSupportedException"/> exception since the stream doesn't support <see cref="P:System.IO.Stream.Position">this property</see>.
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.ZStream">
            <summary>
            ZStream is used to store user data to compress/decompress.
            </summary>
            <exclude />
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream.MAX_MEM_LEVEL">
            <summary>
            Maximum memory level
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._next_in">
            <summary>
            Next input byte array
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._next_in_index">
            <summary>
            Index of the first byte in the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in">input array</see>.
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._avail_in">
            <summary>
            Number of bytes available at _next_in
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._total_in">
            <summary>
            total nb of input bytes ReadPos so far
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._next_out">
            <summary>
            Byte array for the next output block
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._next_out_index">
            <summary>
            Index of the first byte in the _next_out array
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._avail_out">
            <summary>
            Remaining free space at _next_out
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._total_out">
            <summary>
            Total number of bytes in output array
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._msg">
            <summary>
            A string to store operation result message (corresponding to result codes)
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._dstate">
            <summary>
            A deflate object to perform data compression
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._istate">
            <summary>
            Inflate object to perform data decompression
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream.data_type">
            <summary>
            Best guess about the data type: ascii or binary
            </summary>
        </member>
        <member name="F:ComponentAce.Compression.Libs.ZLib.ZStream._adler">
            <summary>
            A checksum computed with Adler algorithm
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateInit">
            <summary>
            Initializes the internal stream state for decompression. The fields <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/>, <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> must be initialized before by the caller. If <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> is not <c>null</c> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> is large enough (the exact value depends on the compression method), <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateInit"/> determines the compression method from the ZLib header and allocates all data structures accordingly; otherwise the allocation will be deferred to the first call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. 
            </summary>
            <returns>
            inflateInit returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if success, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_MEM_ERROR"/> if there was not enough memory,  <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_VERSION_ERROR"/> if the ZLib library version is incompatible with the version assumed by the caller. <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.msg"/> is set to <c>null</c> if there is no error message. <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateInit"/> does not perform any decompression apart from reading the ZLib header if present: this will be done by <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. (So <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> may be modified, but <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> are unchanged.)
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateInit(System.Int32)">
            <summary>
            This is another version of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateInit"/> with an extra parameter. The fields <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/>, <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> must be initialized before by the caller. If <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> is not <c>null</c> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> is large enough (the exact value depends on the compression method), <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateInit(System.Int32)"/> determines the compression method from the ZLib header and allocates all data structures accordingly; otherwise the allocation will be deferred to the first call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. 
            </summary>
            <param name="windowBits">The <c>windowBits</c> parameter is the base two logarithm of the maximum window size (the size of the history buffer). It should be in the range <c>8..15</c> for this version of the library. The default value is 15 if <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateInit(System.Int32)"/> is used instead. If a compressed stream with a larger window size is given as input, <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> will return with the error code <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_DATA_ERROR"/> instead of trying to allocate a larger window.</param>
            <returns>
            inflateInit returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if success, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_MEM_ERROR"/> if there was not enough memory, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if a parameter is invalid (such as a negative memLevel). <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.msg"/> is set to null if there is no error message. <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateInit(System.Int32)"/> does not perform any decompression apart from reading the ZLib header if present: this will be done by <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. (So <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> may be modified, but <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> are unchanged.)
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)">
            <summary>
            <para>This method decompresses as much data as possible, and stops when the input buffer (<see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/>) becomes empty or the output buffer (<see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/>) becomes full. It may some introduce some output latency (reading input without producing any output) except when forced to flush. </para>
            <para>The detailed semantics are as follows. <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> performs one or both of the following actions: </para>
            <para>
            <list type="bullet">
            <item>Decompress more input starting at <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> and update <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> accordingly. If not all input can be processed (because there is not enough room in the output buffer), <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> is updated and processing will resume at this point for the next call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. </item>
            <item>Provide more output starting at <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> and update <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> accordingly. <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> provides as much output as possible, until there is no more input data or no more space in the output buffer (see below about the <paramref name="flush"/> parameter).</item>
            </list>
            </para>
            </summary>
            <param name="flush"><see cref="T:ComponentAce.Compression.Libs.ZLib.FlushStrategy">Flush strategy</see> to use.</param>
            <remarks>
            <para>Before the call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>, the application should ensure that at least one of the actions is possible, by providing more input and/or consuming more output, and updating the next_* and avail_* values accordingly. The application can consume the uncompressed output when it wants, for example when the output buffer is full (<c>avail_out == 0</c>), or after each call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. If <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> and with zero <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/>, it must be called again after making room in the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out">output buffer</see> because there might be more output pending. </para>
            <para>If the parameter <paramref name="flush"/> is set to <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_SYNC_FLUSH"/>, <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> flushes as much output as possible to the output buffer. The flushing behavior of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> is not specified for values of the <paramref name="flush"/> parameter other than <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_SYNC_FLUSH"/> and <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FINISH"/>, but the current implementation actually flushes as much output as possible anyway. </para>
            <para><see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> should normally be called until it returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_END"/> or an error. However if all decompression is to be performed in a single step (a single call of inflate), the parameter <paramref name="flush"/> should be set to <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FINISH"/>. In this case all pending input is processed and all pending output is flushed ; <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> must be large enough to hold all the uncompressed data. (The size of the uncompressed data may have been saved by the compressor for this purpose.) The next operation on this stream must be <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateEnd"/> to deallocate the decompression state. The use of <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FINISH"/> is never required, but can be used to inform <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> that a faster routine may be used for the single <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> call. </para>
            <para>If a preset dictionary is needed at this point (see <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"/>), <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> sets strm-adler to the adler32 checksum of the dictionary chosen by the compressor and returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_NEED_DICT"/> ; otherwise it sets strm-&gt;adler to the adler32 checksum of all output produced so far (that is, <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.total_out"/> bytes) and returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/>, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_END"/> or an error code as described below. At the end of the stream, <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>) checks that its computed adler32 checksum is equal to that saved by the compressor and returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_END"/> only if the checksum is correct.</para>
            </remarks>
            <returns>
            <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if some progress has been made (more input processed or more output produced), <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_END"/> if the end of the compressed data has been reached and all uncompressed output has been produced, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_NEED_DICT"/> if a preset dictionary is needed at this point, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_DATA_ERROR"/> if the input data was corrupted (input stream not conforming to the ZLib format or incorrect adler32 checksum), <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if the stream structure was inconsistent (for example if <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> or <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> was <c>null</c>), <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_MEM_ERROR"/> if there was not enough memory, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_BUF_ERROR"/> if no progress is possible or if there was not enough room in the output buffer when <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FINISH"/> is used. In the <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_DATA_ERROR"/> case, the application may then call <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateSync"/> to look for a good compression block.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateEnd">
            <summary>
            All dynamically allocated data structures for this stream are freed. This function discards any unprocessed input and does not flush any pending output.
            </summary>
            <returns>
            inflateEnd returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if success, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if the stream state was inconsistent. In the error case, msg may be set but then points to a static string (which must not be deallocated).
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateSync">
            <summary>
            Skips invalid compressed data until a full flush point (see the description of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)">deflate with Z_FULL_FLUSH</see>) can be found, or until all available input is skipped. No output is provided.
            </summary>
            <returns>
            <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateSync"/> returns <seec ref="ZLibResultCode.Z_OK"/> if a full flush point has been found, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_BUF_ERROR"/> if no more input was provided, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_DATA_ERROR"/> if no flush point has been found, or <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if the stream structure was inconsistent. In the success case, the application may save the current current value of <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.total_in"/> which indicates where valid compressed data was found. In the error case, the application may repeatedly call <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateSync"/>, providing more input each time, until success or end of the input data.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the decompression dictionary from the given uncompressed byte sequence. This function must be called immediately after a call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> if this call returned <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_NEED_DICT"/>. The dictionary chosen by the compressor can be determined from the Adler32 value returned by this call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. The compressor and decompresser must use exactly the same dictionary.
            </summary>
            <param name="dictionary">A byte array - a dictionary.</param>
            <param name="dictLength">The length of the dictionary.</param>
            <returns>
            inflateSetDictionary returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if success, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if a parameter is invalid (such as <c>null</c> dictionary) or the stream state is inconsistent, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_DATA_ERROR"/> if the given dictionary doesn't match the expected one (incorrect Adler32 value). inflateSetDictionary does not perform any decompression: this will be done by subsequent calls of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for compression. 
            </summary>
            <param name="level">An integer value from 0 to 9 indicating the desired compression level.</param>
            <returns>
            deflateInit returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if success, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_MEM_ERROR"/> if there was not enough memory, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if level is not a valid compression level. <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.msg"/> is set to <c>null</c> if there is no error message. <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateInit(System.Int32)"/> does not perform any compression: this will be done by <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
            <summary>
            Initializes the internal stream state for compression. 
            </summary>
            <param name="level">An integer value from 0 to 9 indicating the desired compression level.</param>
            <param name="bits"> The windowBits parameter is the base two logarithm of the window size (the size of the history buffer). It should be in the range 8..15 for this version of the library. Larger values of this parameter result in better compression at the expense of memory usage. The default value is 15 if deflateInit is used instead.</param>
            <returns>
            deflateInit returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if success, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_MEM_ERROR"/> if there was not enough memory, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if level is not a valid compression level. <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.msg"/> is set to <c>null</c> if there is no error message. <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateInit(System.Int32,System.Int32)"/> does not perform any compression: this will be done by <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)">
            <summary>
            <para>Deflate compresses as much data as possible, and stops when the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in">input buffer</see> becomes empty or the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out">output buffer</see> becomes full. It may introduce some output latency (reading input without producing any output) except when forced to flush.</para>
            <para>The detailed semantics are as follows. deflate performs one or both of the following actions:
            <list type="bullet">
            <item>Compress more input starting at <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> and update <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> accordingly. If not all input can be processed (because there is not enough room in the output buffer), <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> are updated and processing will resume at this point for the next call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. </item>
            <item>Provide more output starting at <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> and update <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> and <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> accordingly. This action is forced if the parameter flush is non zero. Forcing flush frequently degrades the compression ratio, so this parameter should be set only when necessary (in interactive applications). Some output may be provided even if flush is not set.</item>
            </list>
            </para>
            </summary>
            <param name="flush">The <see cref="T:ComponentAce.Compression.Libs.ZLib.FlushStrategy">flush strategy</see> to use.</param>
            <remarks>
            <para>Before the call of <seec ref="deflate"/>, the application should ensure that at least one of the actions is possible, by providing more input and/or consuming more output, and updating <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> or <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> accordingly ; <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> should never be zero before the call. The application can consume the compressed output when it wants, for example when the output buffer is full (<c>avail_out == 0</c>), or after each call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. If <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> and with zero <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/>, it must be called again after making room in the output buffer because there might be more output pending. </para>
            <para>If the parameter <paramref name="flush"/> is set to <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_SYNC_FLUSH"/>, all pending output is flushed to the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out">output buffer</see> and the output is aligned on a byte boundary, so that the decompressor can get all input data available so far. (In particular <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> is zero after the call if enough output space has been provided before the call.) Flushing may degrade compression for some compression algorithms and so it should be used only when necessary. </para>
            <para>If flush is set to <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FULL_FLUSH"/>, all output is flushed as with <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_SYNC_FLUSH"/>, and the compression state is reset so that decompression can restart from this point if previous compressed data has been damaged or if random access is desired. Using <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FULL_FLUSH"/> too often can seriously degrade the compression.</para>
            </remarks>
            <returns>
            <para>If deflate returns with <c><see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> == 0</c>, this function must be called again with the same value of the flush parameter and more output space (updated <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/>), until the flush is complete (<see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> returns with non-zero <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/>). </para>
            <para>If the parameter <paramref name="flush"/> is set to <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FINISH"/>, pending input is processed, pending output is flushed and deflate returns with <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_END"/> if there was enough output space ; if deflate returns with <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/>, this function must be called again with <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FINISH"/> and more output space (updated <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/>) but no more input data, until it returns with <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_END"/> or an error. After deflate has returned <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_END"/>, the only possible operation on the stream is<see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateEnd"/>. </para>
            <para><see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FINISH"/> can be used immediately after <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateInit(System.Int32)"/> if all the compression is to be done in a single step. In this case, avail_out must be at least 0.1% larger than avail_in plus 12 bytes. If deflate does not return Z_STREAM_END, then it must be called again as described above. </para>
            <para><see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> sets strm-&gt; adler to the adler32 checksum of all input read so far (that is, <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.total_in"/> bytes). </para>
            <para><see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> may update data_type if it can make a good guess about the input data type (<see cref="T:ComponentAce.Compression.Libs.ZLib.BlockType">Z_ASCII or Z_BINARY</see>). In doubt, the data is considered binary. This field is only for information purposes and does not affect the compression algorithm in any manner. </para>
            <para><see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if some progress has been made (more input processed or more output produced), <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_END"/> if all input has been consumed and all output has been produced (only when flush is set to <see cref="F:ComponentAce.Compression.Libs.ZLib.FlushStrategy.Z_FINISH"/>), <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if the stream state was inconsistent (for example if <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> or <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> was <c>null</c>), <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_BUF_ERROR"/> if no progress is possible (for example <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in"/> or <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> was zero).</para>
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateEnd">
            <summary>
            All dynamically allocated data structures for this stream are freed. This function discards any unprocessed input and does not flush any pending output.
            </summary>
            <returns>
            deflateEnd returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if success, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if the stream state was inconsistent, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_DATA_ERROR"/> if the stream was freed prematurely (some input or output was discarded). In the error case, <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.msg"/> may be set but then points to a static string (which must not be deallocated).
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateParams(System.Int32,ComponentAce.Compression.Libs.ZLib.CompressionStrategy)">
            <summary>
            Dynamically update the compression level and compression strategy. The interpretation of level is as in <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateInit(System.Int32)"/>. This can be used to switch between compression and straight copy of the input data, or to switch to a different kind of input data requiring a different strategy. If the compression level is changed, the input available so far is compressed with the old level (and may be flushed); the new level will take effect only at the next call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>
            </summary>
            <param name="level">An integer value indicating the desired compression level.</param>
            <param name="strategy">A <see cref="T:ComponentAce.Compression.Libs.ZLib.FlushStrategy">flush strategy</see> to use.</param>
            <remarks>
            Before the call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateParams(System.Int32,ComponentAce.Compression.Libs.ZLib.CompressionStrategy)"/>, the stream state must be set as for a call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>, since the currently available input may have to be compressed and flushed. In particular, <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> must be non-zero.
            </remarks>
            <returns>
            deflateParams returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if success, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if the source stream state was inconsistent or if a parameter was invalid, <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_BUF_ERROR"/> if <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out"/> was zero.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the compression dictionary from the given byte sequence without producing any compressed output. This function must be called immediately after <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateInit(System.Int32)"/>, before any call of <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. The compressor and decompressor must use exactly the same dictionary (see <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"/>).
            </summary>
            <param name="dictionary">A byte array - a dictionary.</param>
            <param name="dictLength">The length of the dictionary byte array</param>
            <remarks>
            <para>The dictionary should consist of strings (byte sequences) that are likely to be encountered later in the data to be compressed, with the most commonly used strings preferably put towards the end of the dictionary. Using a dictionary is most useful when the data to be compressed is short and can be predicted with good accuracy; the data can then be compressed better than with the default empty dictionary.</para>
            <para>Depending on the size of the compression data structures selected by <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateInit(System.Int32)"/>, a part of the dictionary may in effect be discarded, for example if the dictionary is larger than the window size in <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>. Thus the strings most likely to be useful should be put at the end of the dictionary, not at the front.</para>
            <para>Upon return of this function, adler is set to the Adler32 value of the dictionary; the decompresser may later use this value to determine which dictionary has been used by the compressor. (The Adler32 value applies to the whole dictionary even if only a subset of the dictionary is actually used by the compressor.)</para>
            </remarks>
            <returns>
            deflateSetDictionary returns <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_OK"/> if success, or <see cref="F:ComponentAce.Compression.Libs.ZLib.ZLibResultCode.Z_STREAM_ERROR"/> if a parameter is invalid (such as <c>null</c> dictionary) or the stream state is inconsistent (for example if <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> has already been called for this stream or if the compression method is bsort). <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)"/> does not perform any compression: this will be done by <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/>.
            </returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.flush_pending">
            <summary>
            Flush as much pending output as possible. All <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> output goes through this function so some applications may wish to modify it to avoid allocating a large <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> buffer and copying into it.
            </summary>
            <seealso cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.read_buf(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.read_buf(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a new buffer from the current input stream, update the adler32 and total number of bytes read.  All <see cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.deflate(ComponentAce.Compression.Libs.ZLib.FlushStrategy)"/> input goes through this function so some applications may wish to modify it to avoid allocating a large <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in"/> buffer and copying from it.
            </summary>
            <seealso cref="M:ComponentAce.Compression.Libs.ZLib.ZStream.flush_pending"/>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStream.free">
            <summary>
            Frees all inner <see cref="T:ComponentAce.Compression.Libs.ZLib.ZStream"/> buffers.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.adler">
            <summary>
            Adler-32 value for uncompressed data processed so far.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.Data_type">
            <summary>
            Best guess about the data type: ascii or binary
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in">
            <summary>
            Gets/Sets the next input byte array.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in_index">
            <summary>
            Index of the first byte in the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in">input array</see>.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_in">
            <summary>
            Gets/Sets the number of bytes available in the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in">input buffer</see>.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.total_in">
            <summary>
            Gets/Sets the total number of bytes in the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_in">input buffer</see>.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out">
            <summary>
            Gets/Sets the buffer for the next output data.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out_index">
            <summary>
            Gets/Sets the index of the first byte in the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> byte array to write to.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.avail_out">
            <summary>
            Gets/Sets the remaining free space in the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out"/> buffer.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.total_out">
            <summary>
            Gets/Sets the total number of bytes in the <see cref="P:ComponentAce.Compression.Libs.ZLib.ZStream.next_out">output array</see>.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.msg">
            <summary>
            Gets sets the last error message occurred during class operations.
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.dstate">
            <summary>
            A deflate object to perform data compression
            </summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.ZLib.ZStream.istate">
            <summary>
            Inflate object to perform data decompression
            </summary>
        </member>
        <member name="T:ComponentAce.Compression.Libs.ZLib.ZStreamException">
            <summary>
            Exceptions that occur in ZStream
            </summary>
            <exclude />
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStreamException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.ZLib.ZStreamException.#ctor(System.String)">
            <summary>
            Constructor which takes one parameter - an error message
            </summary>
        </member>
    </members>
</doc>
